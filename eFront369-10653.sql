-- phpMyAdmin SQL Dump
-- version 4.0.10deb1
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Apr 19, 2016 at 10:26 PM
-- Server version: 5.5.41-0ubuntu0.14.04.1
-- PHP Version: 5.5.9-1ubuntu4.6

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `eFront369-10653`
--

-- --------------------------------------------------------

--
-- Table structure for table `benchmark`
--

CREATE TABLE IF NOT EXISTS `benchmark` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `url` text,
  `init_time` float DEFAULT NULL,
  `script_time` float DEFAULT NULL,
  `database_time` float DEFAULT NULL,
  `smarty_time` float DEFAULT NULL,
  `total_time` float DEFAULT NULL,
  `memory_usage` float DEFAULT NULL,
  `total_queries` mediumint(8) unsigned DEFAULT NULL,
  `max_query` text,
  `timestamp` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `bookmarks`
--

CREATE TABLE IF NOT EXISTS `bookmarks` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `users_LOGIN` varchar(100) NOT NULL,
  `lessons_ID` mediumint(8) unsigned DEFAULT NULL,
  `name` text,
  `url` text,
  PRIMARY KEY (`id`),
  KEY `users_LOGIN` (`users_LOGIN`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `cache`
--

CREATE TABLE IF NOT EXISTS `cache` (
  `cache_key` char(64) NOT NULL,
  `value` longtext,
  `timestamp` int(10) unsigned NOT NULL,
  `timeout` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`cache_key`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `cache`
--

INSERT INTO `cache` (`cache_key`, `value`, `timestamp`, `timeout`) VALUES
('f5688489a14f87edbc207357b674624ec9c1c2b4808d84e9f0f3c6509f0ff785', '<li style = "display:none;font-weight:bold" onmouseover = "pauseList()" onmouseout = "continueList()"> News from &quot;<span style = "font-style:italic">eFront news</span>&quot;</li><li style = "display:none" onmouseover = "pauseList()" onmouseout = "continueList()"> 31 Jan 2012 <a href = "http://old.efrontlearning.net/product/efront-news/327-announcement-about-bug-tracking.html" target = "_NEW">Announcement about bug tracking</a><div style = "font-style:italic;margin-left:10px">eFront team informs you that bug tracking system (bugs.efrontlearning.net) will be inactive until fu...</div></li><li style = "display:none" onmouseover = "pauseList()" onmouseout = "continueList()"> 26 Oct 2011 <a href = "http://old.efrontlearning.net/product/efront-news/326-efront-version-3610-build-12151-available.html" target = "_NEW">eFront version 3.6.10 build 12151 available</a><div style = "font-style:italic;margin-left:10px">The eFront team would like to announce the availability of eFront version 3.6.10 build 12151.\nThis i...</div></li><li style = "display:none" onmouseover = "pauseList()" onmouseout = "continueList()"> 08 Oct 2011 <a href = "http://old.efrontlearning.net/product/efront-news/325-security-updates-for-version-369-of-efront.html" target = "_NEW">Security updates for version 3.6.9 of efront</a><div style = "font-style:italic;margin-left:10px">Please find here cumulative patches for all editions of eFront 3.6.9 build 11018, that address poten...</div></li><li style = "display:none" onmouseover = "pauseList()" onmouseout = "continueList()"> 07 Oct 2011 <a href = "http://old.efrontlearning.net/product/efront-news/324-efront-version-3610-build-11944-available.html" target = "_NEW">eFront version 3.6.10 build 11944 available</a><div style = "font-style:italic;margin-left:10px">The eFront team would like to announce the availability of eFront version 3.6.10 build 11944.\nThis l...</div></li><li style = "display:none" onmouseover = "pauseList()" onmouseout = "continueList()"> 01 Jun 2011 <a href = "http://old.efrontlearning.net/product/efront-news/323-efront-version-369-build-11018-available.html" target = "_NEW">eFront version 3.6.9 build 11018 available</a><div style = "font-style:italic;margin-left:10px">The eFront team would like to announce the availability of eFront version 3.6.9 build 11018.\nThis re...</div></li>', 1426496249, 86400);

-- --------------------------------------------------------

--
-- Table structure for table `calendar`
--

CREATE TABLE IF NOT EXISTS `calendar` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `data` text,
  `timestamp` int(10) unsigned NOT NULL,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  `users_LOGIN` varchar(100) NOT NULL,
  `foreign_ID` mediumint(8) unsigned DEFAULT '0',
  `type` varchar(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `carts`
--

CREATE TABLE IF NOT EXISTS `carts` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `timestamp` int(10) unsigned NOT NULL,
  `session_id` varchar(255) NOT NULL,
  `contents` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

--
-- Dumping data for table `carts`
--

INSERT INTO `carts` (`id`, `timestamp`, `session_id`, `contents`) VALUES
(1, 1426223441, 'h1k3msb5ueof17kral9745m776', 'a:1:{s:6:"lesson";a:1:{i:2;s:1:"2";}}');

-- --------------------------------------------------------

--
-- Table structure for table `chatmessages`
--

CREATE TABLE IF NOT EXISTS `chatmessages` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `users_LOGIN` varchar(100) NOT NULL,
  `users_USER_TYPE` varchar(50) NOT NULL,
  `content` text,
  `timestamp` int(10) unsigned NOT NULL,
  `chatrooms_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `chatrooms`
--

CREATE TABLE IF NOT EXISTS `chatrooms` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  `create_timestamp` int(10) unsigned NOT NULL,
  `users_LOGIN` varchar(100) NOT NULL,
  `type` varchar(255) NOT NULL,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  `lessons_ID` mediumint(8) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=6 ;

--
-- Dumping data for table `chatrooms`
--

INSERT INTO `chatrooms` (`id`, `name`, `create_timestamp`, `users_LOGIN`, `type`, `active`, `lessons_ID`) VALUES
(1, 'Greedy algorithms', 1426217774, '', 'public', 1, 1),
(2, 'Maya civilization', 1426217776, '', 'public', 1, 2),
(3, 'How to be a programmer - Beginner', 1426217780, '', 'public', 1, 3),
(4, 'How to be a programmer - Intermediate', 1426217787, '', 'public', 1, 4),
(5, 'How to be a programmer - Advanced', 1426217791, '', 'public', 1, 5);

-- --------------------------------------------------------

--
-- Table structure for table `comments`
--

CREATE TABLE IF NOT EXISTS `comments` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `data` text NOT NULL,
  `users_LOGIN` varchar(100) NOT NULL,
  `content_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `timestamp` int(10) unsigned NOT NULL,
  `active` tinyint(1) NOT NULL DEFAULT '0',
  `private` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `completed_tests`
--

CREATE TABLE IF NOT EXISTS `completed_tests` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `users_LOGIN` varchar(100) DEFAULT NULL,
  `tests_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `test` longblob,
  `status` varchar(255) DEFAULT NULL,
  `timestamp` int(10) unsigned NOT NULL DEFAULT '0',
  `archive` tinyint(1) NOT NULL DEFAULT '0',
  `time_start` int(10) unsigned DEFAULT NULL,
  `time_end` int(10) unsigned DEFAULT NULL,
  `time_spent` int(10) unsigned DEFAULT NULL,
  `score` float DEFAULT NULL,
  `pending` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `users_login` (`users_LOGIN`),
  KEY `tests_ID` (`tests_ID`),
  KEY `status` (`status`),
  KEY `timestamp` (`timestamp`),
  KEY `archive` (`archive`),
  KEY `score` (`score`),
  KEY `pending` (`pending`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

--
-- Dumping data for table `completed_tests`
--

INSERT INTO `completed_tests` (`id`, `users_LOGIN`, `tests_ID`, `test`, `status`, `timestamp`, `archive`, `time_start`, `time_end`, `time_spent`, `score`, `pending`) VALUES
(1, 'student', 2, , 'failed', 1426221750, 0, 1426221741, 1426221750, 9, NULL, 0);

-- --------------------------------------------------------

--
-- Table structure for table `configuration`
--

CREATE TABLE IF NOT EXISTS `configuration` (
  `name` varchar(100) NOT NULL,
  `value` text NOT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `configuration`
--

INSERT INTO `configuration` (`name`, `value`) VALUES
('activate_ldap', '0'),
('activation', '1'),
('allow_users_to_delete_supervisor_files', '1'),
('api', '0'),
('autologout_time', '5'),
('chat_enabled', '0'),
('cms_page', ''),
('collapse_catalog', '0'),
('compress_tests', '0'),
('constrain_access', '1'),
('css', ''),
('currency', 'EUR'),
('currency_order', '1'),
('database_version', '3.6.9'),
('date_format', 'DD/MM/YYYY'),
('debug_mode', ''),
('decimal_point', '.'),
('default_language', 'english'),
('default_type', 'student'),
('disable_bookmarks', '0'),
('disable_calendar', '0'),
('disable_change_info', '0'),
('disable_change_pass', '0'),
('disable_comments', '0'),
('disable_feedback', '0'),
('disable_forum', '0'),
('disable_glossary', '0'),
('disable_help', '0'),
('disable_messages', '0'),
('disable_move_blocks', '0'),
('disable_news', '0'),
('disable_online_users', '0'),
('disable_payments', '0'),
('disable_projects', '0'),
('disable_surveys', '0'),
('disable_tests', '0'),
('disable_tooltip', '0'),
('discount_period', ''),
('discount_start', ''),
('display_empty_blocks', '1'),
('editor_type', 'tinymce_new'),
('eliminate_post_xss', '1'),
('enable_balance', '1'),
('enable_cart', '1'),
('encrypt_url', '0'),
('error_page', 'themes/default/external/default_error_page.html'),
('facebook_api_key', ''),
('facebook_secret', ''),
('favicon', ''),
('file_black_list', 'php,php3,jsp,asp,cgi,pl,exe,com,bat'),
('file_encoding', 'UTF-8'),
('file_white_list', ''),
('force_change_password', '0'),
('gz_handler', '1'),
('help_url', 'http://docs.efrontlearning.net/index.php'),
('insert_group_key', '1'),
('ip_black_list', ''),
('ip_white_list', '*.*.*.*'),
('ldap_base_dn', ''),
('ldap_bind_dn', ''),
('ldap_cn', 'cn'),
('ldap_l', 'l'),
('ldap_mail', 'mail'),
('ldap_password', ''),
('ldap_port', '389'),
('ldap_postaladdress', 'postaladdress'),
('ldap_preferredlanguage', 'referredlanguage'),
('ldap_protocol', '3'),
('ldap_server', 'ldap://localhost'),
('ldap_telephonenumber', 'telephonenumber'),
('ldap_uid', 'uid'),
('lessons_directory', '1'),
('lesson_enroll', '1'),
('license_server', 'http://keys.efrontlearning.net/list.php'),
('location', 'Greece'),
('lock_down', '0'),
('login_redirect_page', 'lesson_catalog'),
('logo', ''),
('logout_redirect', ''),
('logo_max_height', '150'),
('logo_max_width', '200'),
('mail_activation', '0'),
('mapped_accounts', '0'),
('math_content', '0'),
('math_images', '0'),
('math_server', 'http://www.imathas.com/cgi-bin/mimetex.cgi'),
('max_file_size', '50000'),
('module_BBB_salt', '29ae87201c1d23f7099f3dfb92f63578'),
('module_BBB_server', 'http://yourserver.com/'),
('module_BBB_server_version', '1'),
('motto_on_header', '0'),
('multiple_logins', ''),
('normalize_dimensions', '1'),
('notifications_maximum_inter_time', '0'),
('notifications_max_sent_messages', '100'),
('notifications_messages_per_time', '5'),
('notifications_pageloads', '10'),
('onelanguage', '0'),
('only_ldap', '0'),
('password_length', '6'),
('password_reminder', '1'),
('paypalbusiness', ''),
('paypaldebug', '0'),
('paypalmode', 'normal'),
('phplivedocx_password', ''),
('phplivedocx_server', 'https://api.livedocx.com/1.2/mailmerge.asmx?WSDL'),
('phplivedocx_username', ''),
('registration_file', 'includes/webserver_registration.php'),
('show_footer', '1'),
('show_license_note', '0'),
('show_organization_chart', '1'),
('show_unassigned_users_to_supervisors', '1'),
('show_user_form', '0'),
('signup', '1'),
('site_logo', '0'),
('site_motto', 'Refreshing eLearning'),
('site_name', 'eFront'),
('smarty_cache', '1'),
('smarty_cache_timeout', '60'),
('smtp_auth', '0'),
('smtp_host', 'localhost'),
('smtp_pass', ''),
('smtp_port', '25'),
('smtp_timeout', '3'),
('smtp_user', ''),
('social_modules_activated', '63'),
('supervisor_mail_activation', '0'),
('system_email', 'admin@admin.om'),
('theme', '2'),
('thousands_sep', ','),
('time_zone', 'Asia/Singapore'),
('total_discount', '0'),
('unauthorized_page', 'themes/default/external/default_unauthorized_page.html'),
('updater_period', '100000'),
('username_format', '#surname# #n#. (#login#)'),
('username_format_resolve', '1'),
('username_variable', '$_SERVER["REMOTE_USER"]'),
('use_logo', '2'),
('version_hosted', '0'),
('version_key', ''),
('virtual_keyboard', '1'),
('webserver_auth', '0'),
('webserver_registration', '0'),
('zip_method', 'php');

-- --------------------------------------------------------

--
-- Table structure for table `content`
--

CREATE TABLE IF NOT EXISTS `content` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `data` longtext,
  `parent_content_ID` mediumint(8) unsigned DEFAULT '0',
  `lessons_ID` mediumint(8) unsigned DEFAULT '0',
  `timestamp` int(10) unsigned NOT NULL,
  `ctg_type` varchar(255) NOT NULL,
  `active` tinyint(1) DEFAULT '1',
  `previous_content_ID` mediumint(8) unsigned DEFAULT '0',
  `options` text,
  `metadata` text,
  `scorm_version` varchar(50) DEFAULT NULL,
  `publish` tinyint(1) DEFAULT '1',
  `identifier` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=96 ;

--
-- Dumping data for table `content`
--

INSERT INTO `content` (`id`, `name`, `data`, `parent_content_ID`, `lessons_ID`, `timestamp`, `ctg_type`, `active`, `previous_content_ID`, `options`, `metadata`, `scorm_version`, `publish`, `identifier`) VALUES
(1, 'Floyd algorithm', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Floyd algorithm</h1>\r\n			In this problem we want the minimum routes (m.r.) between all the pairs of the peaks of G. The Floyd algorithm solves this problem. This algorithm is an expansion of another algorithm, the Warshall algorithm, who was first defined for the solution of another problem:<br />\r\n			<br />\r\n			In a digraph G (whether there are costs or not, is of no importance) find whether there is a route from V(i) to V(j), for all pairs of (i,j), i&lt;&gt;j.<br />\r\n			<br />\r\n			To solve this problem we find an array A. The elements of this array are A(i,j)=1 if there is a route from i to j, otherwise A(i,j)=0. Because the cost is not important we define the Adjoining Array as if all the costs were 1 that means C(i,j)=1 if there is eij belonging to E and otherwise C(i,j)=0. The requested array A is called transitive closure of the Adjoining Array.<br />\r\n			<br />\r\n			We notice that the elements of the A array are Boolean variables(0 or 1), which means that the operations AND and OR are valid. The Warshall algorithm initializes the A array at the value of C:<br />\r\n			<br />\r\n			A(i,j)=C(i,j), i,j=1,...,n<br />\r\n			<br />\r\n			At this point the A array shows only the direct connections as existing routes. Then the algorithm goes through the A array n times, one time for every node k=1,....,n. For every node V(k) the main thinking is : Is there a route from V(i) to V(j), if it has already been found {that is A(i,j)=1] or if a route is found through V(k), that is if the routes from V(i) to V(k) and from V(k) to V(j)[that is if A(i,k)=1 and A(k,j)=1].\r\n			<br />\r\n			<br />\r\n			<em><strong>\r\n			If the BOOLEAN characteristics of the elements of A are taken under consideration, then the rule in the k pass is:<br />\r\n			A(i,j)=A(i,j) OR {A(i,k) AND A(k,j) }.</strong></em><br />\r\n			<br />\r\n			We now come back to the m.r. problem for all pairs. This time we are talking about a graph, and the Adjoining Array is defined by the costs C(i,j)=c(eij). The A array will finally consist of all the costs of the minimum routes.<br />\r\n			During the k pass the following formula is valid:<br />\r\n			A(i,j)=min{A(i,j),A(i,k) + A(k,j) }<br />\r\n			which means that if the route through V(k) is cheaper will be the winner. That gives us the Floyd algorithm.<br />\r\n			<br />\r\n			<table border="2" cellspacing="4" cellpadding="4" style="border-style: dotted; border-width: 3px; width: 100%; height: 200px; vertical-align: top; color: #333333; background-color: #ccff99">\r\n				<tbody>\r\n					<tr>\r\n						<td colspan="4" align="center"><br />\r\n						<applet codebase="content/lessons/1/java/floyd" code="floyd.class" width="485" height="330"/></applet><font size="2"><font size="4" style="font-weight: bold"></font><br />\r\n						</font>\r\n						<br />\r\n						</td>\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 7, 1, 1170252360, 'theory', 1, 6, 'a:2:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";}', NULL, NULL, 1, ''),
(2, 'General concepts test', '', 0, 1, 1170259693, 'tests', 1, 5, 'b:0;', NULL, NULL, 1, ''),
(3, 'TSP (Travelling Salesman Problem)', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Traveling Salesman Problem (TSP)</h1><strong>\r\n			EXAMPLE:</strong> Heuristic algorithm for the Traveling Salesman Problem (T.S.P) .<br />\r\n			<br />\r\n			This is one of the most known problems ,and is often called as a difficult problem. A salesman must visit n cities, passing through each city only once, beginning from one of them which is considered as his base, and returning to it. The cost of the transportation among the cities (whichever combination possible) is given. The program of the journey is requested, that is the order of visiting the cities in such a way that the cost is the minimum.<br />\r\n			<br />\r\n			Let&#39;s number the cities from 1 to n, and let city 1 be the city-base of the salesman. Also let&#39;s assume that c(i,j) is the visiting cost from i to j. There can be c(i,j)&lt;&gt;c(j,i). Apparently all the possible solutions are (n-1)! Someone could probably determine them systematically, find the cost for each and everyone of these solutions and finally keep the one with the minimum cost. These requires at least (n-1)! steps.<br />\r\n			<br />\r\n			If for example there were 21 cities the steps required are (n-1)!=(21-1)!=20! steps. If every step required a msec we would need about 770 centuries of calculations. Apparently, the exhausting examination of all possible solutions is out of the question. Since we are not aware of any other quick algorithm that finds a best solution we will use a heuristic algorithm. According to this algorithm whenever the salesman is in town i he chooses as his next city, the city j for which the c(i,j) cost is the minimum among all c(i,k) costs, where k are the pointers of the city the salesman has not visited yet. There is also a simple rule just in case more than one cities give the minimum cost, for example in such a case the city with the smaller k will be chosen. This is a greedy algorithm which selects in every step the cheapest visit and does not care whether this will lead to a wrong result or not. \r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 8, 1, 1170259174, 'theory', 1, 8, 'b:0;', NULL, NULL, 1, ''),
(4, 'Adjoining Array', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Adjoining Array</h1>\r\n			The adjoining array can be used as a &quot;data structure&quot; to represent graphs. So it is useful to see how the Prim Algorithm can be implemented using the adjoining array. This array is specified by the costs, which means A(i,j)=c(eij). When we don&#39;t use directed graphs this array is symmetrical.<br />\r\n			<br />\r\n			The Prim algorithm steps are now :<br />\r\n			<br />\r\n			1. We put a mark beside the first line and we delete the first column.<br />\r\n			2. Between the elements that are not deleted and belongs to a line with a mark we choose the least A(j,k). If all elements are deleted the algorithm terminates.<br />\r\n			3. We put a mark beside the k line and we delete k column. We return to step 2<br />\r\n			<br />\r\n			In every step the Vk node become Vj &#39;s child.<br />\r\n			<br />\r\n			<table border="2" cellspacing="4" cellpadding="4" style="border-style: dotted; border-width: 3px; width: 100%; height: 200px; vertical-align: top; color: #333333; background-color: #ccff99">\r\n				<tbody>\r\n					<tr>\r\n						<td colspan="4" align="center"><br />\r\n						<applet codebase="content/lessons/1/java/primArray" code="primArray.class" width="655" height="400"/></applet>\r\n						</td>\r\n						<br />\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 10, 1, 1170258970, 'theory', 1, 10, 'a:2:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";}', NULL, NULL, 1, ''),
(5, 'Backtracking', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Backtracking</h1>\r\n			The backtracking method is based on the systematically inquisition of the possible solutions where through the procedure, set of possible solutions are rejected before even examined so their number is getting a lot smaller.<br />\r\n			<br />\r\n			An important requirement which must be fulfilled is that there must be the proper hierarchy in the systematically produce of solutions so that sets of solutions that do not fulfill a certain requirement are rejected before the solutions are produced. For this reason the examination and produce of the solutions follows a model of non-cycle graph for which in this case we will consider as a tree. The root of the tree represents the set of all the solutions. Nodes in lower levels represent even smaller sets of solutions, based on their properties. Obviously, leaves will be isolated solutions. It is easily understood that the tree (or any other graph) is produced during the examination of the solutions so that no rejected solutions are produced. When a node is rejected, the whole sub-tree is rejected, and we backtrack to the ancestor of the node so that more children are produced and examined. Because this method is expected to produce subsets of solutions which are difficult to process, the method itself is not very popular.\r\n			<br />\r\n			<br />\r\n			<h2>THE QUEENS PROBLEM</h2>\r\n			We consider a grid of squares, dimensioned nXn, partly equivalent to a chessboard containing n2 places. A queen placed in any of the n2 squares controls all the squares that are on its row, its column and the 450 diagonals. The problem asked, is how to put n queens on the chessboard, so that the square of every queen is not controlled by any other queen. Obviously for n=2 there is no problem to the solution, while for n=4 a valid solution is given by the drawing below. <br />\r\n			<br />\r\n			<font size="2"><img src="content/lessons/1/kef5_81.jpg" border="0" hspace="0" align="middle" /></font><br />\r\n			<br />\r\n			A possible position on the grid is set by the pair of pointers (i,j) where 1(1),...V(n)]. All the solutions for which V(i)=V(j) are rejected because 2 queens can not be on the same row.Now the solutions are the permutes of n pointers, which is n!, still a forbiddingly big number. Out of all these solution the correct one is the one which satisfies the last requirement: 2 queens will not belong in the same diagonal, which is:<br />\r\n			<br />\r\n			V(j)-V(i)&lt;&gt;±(i-j) for i&lt;&gt;j. (5.8-1)<br />\r\n			<br />\r\n			A backtracking algorithm or this problem constructs the permutes [V(1),....V(n)] of the {1,...,n} pointers, and examines them as to the property (5.8-1). For example there are (n-2)! permutes in the shape of [3,4....]. These will not be produced and examined if the systematically construction of them has already ordered them in a sub-tree with root [3,4] which will be rejected by the 5.8-1 condition, and will also reject all the (n-2)! permutes. On the contrary, the same way of producing-examining will go even further to the examination of more permutes in the shape of p={1,4,2,...} since, so far the condition is satisfied. The next node to be inserted that is j:=V(4) must also satisfies these:j-1&lt;&gt;3,j-4&lt;&gt;2,j-4&lt;&gt;-2,j-2&lt;&gt;1,j-2&lt;&gt;-1. All the j pointers satisfying these requirements produce the following permutes: [1,4,2,j,...] which connect to the tree as children of p. Meanwhile large sets of permutes such as [1,4,2,6,...] have already been rejected.<br />\r\n			<br />\r\n			A typical declaration of this algorithm: The root of all solutions,has as children n nodes [1],...,[n],where [j] represents all the permutes starting with j(and whose number is (n-1)! for every j). Inductive if a node includes the k nodes {j1,...jk} we attempt to increase it with another node { j1,...,jk,jk+1} so that the condition (5.8-1) is fulfilled.<br />\r\n			<br />\r\n			For n=4 this method produces the indirect graph of the following picture, and does not produce the 4!=24 leaves of all the candidate solutions.<br />\r\n			<br />\r\n			<font size="2"><font size="2"><img src="content/lessons/1/kef5_82.jpg" border="0" hspace="0" align="bottom" /></font></font><br />\r\n			<br />\r\n			<strong>\r\n			Solution to the queens problem using Backtracking (n=4)</strong>\r\n			<p align="center">\r\n			&nbsp;\r\n			</p>\r\n			<table border="2" cellspacing="4" cellpadding="4" style="border: 3px dotted ; vertical-align: top; width: 100%; color: #333333; height: 200px; background-color: #ccff99">\r\n				<tbody>\r\n					<tr>\r\n						<td colspan="4" align="center"><br />\r\n						<strong><applet codebase="content/lessons/1/java/queens" code="queens.class" width="450" height="355"/></applet></strong>\r\n						</td>\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 1, 1170252941, 'theory', 1, 1, 'a:2:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";}', NULL, NULL, 1, ''),
(6, 'Dijkstra algorithm', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Dijkstra Algorithm</h1>\r\n			This algorithm finds the routes,by cost precedence. Let&#39;s assume that every cost is a positive number, and assume the same in the cost function c as in 5.4 paragraph. G may be a graph, a digraph, or even a combined one, which means that only some of its sides are directed.If we consider G as digraph, then every other case is fully covered as well since a no directed side can be considered a 2 directed sides of equal cost for every direction.<br />\r\n			<br />\r\n			The idea for this algorithm is based on the fact that every m.r containing more than one side is the expansion of another m.r. containing a side less. This happens because all costs are considered as positive numbers. In this way the first route D(1) found by the algorithm will be one arc route, that is from the starting point to one of the sides directly connected to this starting point. The next route D(2) will be a one arc route itself, or a two arc route, but in this case will be an expansion of D(1). The whole procedure is a systematically, as to the numbers of sides, appliance of dynamic programming.<br />\r\n			<br />\r\n			<u><strong>\r\n			METHODOLOGY </strong></u><br />\r\n			Let&#39;s call D(1),D(2) the routes (found by the Dijkstra Algorithm) for which { (cost of D(1) ) &lt;= cost of D(2)&lt;=...}. We will show that every m.r.j arcs maximum. <br />\r\n			<br />\r\n			On contrary to our previous symbolism, here we will name V(0) the starting point and V(1),...,V(n-1) the rest of the peaks of G. We assign 2 numbers in every peak with V(i)&lt;&gt;V(0) (as in the Prim Algorithm.) as follows.<br />\r\n			e (i):=cost of the so far known to us minimum route.<br />\r\n			p (i):=the pointer of the V(p(i)) peak for which the minimum route has already been found and the direct connection of the V(i) with the V(p(i)) gives us the so far best route for the V(i) peak, with cost e(i).<br />\r\n			<br />\r\n			When another terminal m.r. for V(m) is found, we examine whether the direct connection of V(i) to V(m) gives us less cost, that is smaller e(i). In such a case we must set: p(i)=m. For initialization we consider p(i)=0, that means direct connection of V(i) to V(0), (obviously e(i)=infinite if the e(0i) does not exist.<br />\r\n			<br />\r\n			<table border="2" cellspacing="4" cellpadding="4" style="border-style: dotted; border-width: 3px; width: 100%; height: 200px; vertical-align: top; color: #333333; background-color: #ccff99">\r\n				<tbody>\r\n					<tr>\r\n						<td colspan="4" align="center"><br />\r\n						<applet codebase="content/lessons/1/java/dijkstra" code="dijkstra.class" width="632" height="345"/></applet><br />\r\n						<br />\r\n						</td>\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 7, 1, 1170252275, 'theory', 1, 7, 'b:0;', NULL, NULL, 1, ''),
(7, 'Minimoum routes', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Minimoum routes</h1>\r\n			The cost of a route in the <strong>(di)graph G</strong> is the cost of the subgraph which is constructed by the route itself. Among all the routes from V(i) to V(j) in a graph, there is at least one with minimum cost.This route is called <strong>&quot;minimum route&quot;</strong>, (m.r.).<br />\r\n			<br />\r\n			The following algorithms are also examples of the greedy method or/and dynamic programming methods. \r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 1, 1170249837, 'theory', 1, 9, 'b:0;', NULL, NULL, 1, ''),
(8, 'Heuristic algorithms', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Heuristic algorithms</h1>\r\n			The term heuristic is used for algorithms which find solutions among all possible ones, but they do not guarantee that the best will be found, therefore they may be considered as approximately and not accurate algorithms. These algorithms usually find a solution close to the best one and they find it fast and easily. Sometimes these algorithms can be accurate, that is they actually find the best solution, but the algorithm is still called heuristic until this best solution is proven to be the best. The method used from a heuristic algorithm is one of the known methods, such as greediness, but in order to be easy and fast the algorithm ignores or even suppresses some of the problem&#39;s demands. \r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 1, 1170249372, 'theory', 1, 11, 'b:0;', NULL, NULL, 1, ''),
(9, 'Dynamic programming', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Dynamic Programming</h1>\r\n			The same general problem is faced here, as in the greedy method, that is the quest for a way to calculate the best solution without spending special time or effort for each and every one of the candidate solutions.<br />\r\n			<br />\r\n			<strong>\r\n			Dynamic Programming (DP)</strong> tends to break the original problem to sub-problems and chooses the best solution in the sub-problems, beginning from the smaller in size. The best solution in the bigger sub-problems is found by using the best ones of the smaller sub-problems through a retroactive formula which connects the solutions. Up to this point (DP) is simply the method Divide And Conquer. What is special is that the retroactive formula is used to abort all the solutions that are candidates, but do not have a chance in giving a best solution. Furthermore the information about the choices who still have a possibility of leading to a best solution are stored and can be used.<br />\r\n			<br />\r\n			In finding this formula,we make a lot of use of what is called &quot; principal of the best &quot;, which roughly defined, says that if the possible solutions of a problem are a combination of possible solutions of sub-problems, then we must expect that the best solution of the problem will come by the combination of the best solutions of sub-problems.<br />\r\n			<br />\r\n			A typical example of applying the principal of the best is given by the problem of minimum routes (also in Chapter 5.7 ) between 2 points: Let&#39;s assume that all the possible routes between two points A and C must go through other points, which means that the choice of the minimum route must be done among the<strong> AB(1)C, AB(2)C,...., AB(k)C.\r\n			<br />\r\n			</strong>\r\n			<br />\r\n			Every route<strong> AB(i)C</strong> is divided in two parts: the <strong>AB(i) and the B(i)C</strong>, which must also go through other points. The choice of the minimum route from <strong>A to B(i)</strong> (sub-problem) can be done through a lot of routes,the same goes for the sub-problem of the minimum route from <strong>B(i) to C</strong>. It is easily understood that:<br />\r\n			<br />\r\n			<strong>\r\n			Minimum route from A to C= {minimum route from A to B (i) + minimum route from B(i) to C} depending on i.</strong><br />\r\n			<br />\r\n			In a simple and restricted form,the principal of the best can be strictly defined and proofed as in the theorem below. We assume that all the pointers belong to a set, and that A+B means the set which consists of all the possible sums a+b with a belonging to the A set and bB set.<br />\r\n			<br />\r\n			We can now say that the main characteristics of a DP algorithm are: <br />\r\n			<br />\r\n			1. The systematic appliance of the &quot;principal of the best&quot;, so that in every step more and more choices are rejected, and only the ones that offer best solutions to the sub-problems remain.<br />\r\n			2. The storing of best solutions in internal steps for future use of them. \r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 1, 1170249710, 'theory', 1, 3, 'b:0;', NULL, NULL, 1, ''),
(10, 'Prim algorithm', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Prim algorithm</h1>\r\n			At first a peak is chosen in random order, which for simplicity we accept it as V(1). This way two sets of pointers are initialized, the 0={1} and P={2...n}.<br />\r\n			<br />\r\n			The O set (the O is taken from the Greek word Oristiko which means Terminal), will always contain the pointers of those peaks which are terminally attached in the T tree. The V(1) peak has already been attached in the T tree. The P set( P is taken form the Greek word Prosorino Temporary) contains the rest of the pointers for the peaks, P={1...n}-O which are those pointers who have not been terminally connected with a node of T, that means they are not attached in the tree. <br />\r\n			<br />\r\n			In every execution of the Prim Algorithm a new peak will be connected to the T tree, not always with their numbering order, for example the V(4) peak can be connected to the tree before the V(2) peak. The corresponding pointer of the newly connected peak will be deleted from P set and will be inserted to the O set. When all peaks are connected there will be O={1,...n} and P=0. This of course means the end of the algorithm.<br />\r\n			<br />\r\n			The new peak every time will be chosen by using a greedy method. Among all sides of G which connect peaks already inserted in the T (pointers in the O set ) tree with the rest of the peaks (pointers in the P set ), we choose one with minimum cost. If the chosen one is e(ij) then i belongs in the O set, V(i) peak is already in the T tree, j belongs in the P set, and V(j) peak has not been attached in the T tree yet. We put V(j) in the T tree, we change the O set by putting the j pointer, and we also change the P set by removing the j pointer.<br />\r\n			<br />\r\n			This may seem to you extremely complicated but it is easily understood by the following animated applet:<br />\r\n			<br />\r\n			<table border="2" cellspacing="4" cellpadding="4" style="border-style: dotted; border-width: 3px; width: 100%; height: 200px; vertical-align: top; color: #333333; background-color: #ccff99">\r\n				<tbody>\r\n					<tr>\r\n						<td colspan="4" align="center"><br />\r\n						<applet codebase="content/lessons/1/java/prim" code="Prim.class" width="632" height="345"/></applet><font size="5"></font>\r\n						</td>\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n			<p>\r\n			&nbsp;\r\n			</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 15, 1, 1170252003, 'theory', 1, 15, 'b:0;', NULL, NULL, 1, ''),
(11, 'Kruskal algorithm', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Kruskal Algorithm</h1>\r\n			The Kruskal Algorithm starts with a forest which consists of n trees. Each and everyone tree, consists only by one node and nothing else. In every step of the algorithm, two different trees of this forest are connected to a bigger tree. Therefore, we keep having less and bigger trees in our forest until we end up in a tree which is the minimum genetic tree (m.g.t.). In every step we choose the side with the least cost, which means that we are still under greedy policy. If the chosen side connects nodes which belong in the same tree the side is rejected, and not examined again because it could produce a circle which will destroy our tree. Either this side or the next one in order of least cost will connect nodes of different trees, and this we insert connecting two small trees into a bigger one.<br />\r\n			<br />\r\n			<table border="2" cellspacing="4" cellpadding="4" style="border-style: dotted; border-width: 3px; width: 100%; height: 200px; vertical-align: top; color: #333333; background-color: #ccff99">\r\n				<tbody>\r\n					<tr>\r\n						<td colspan="4" align="center"><br />\r\n						<applet codebase="content/lessons/1/java/Kruskal" code="Kruskal.class" width="632" height="345"/></applet><span style="font-family: verdana,arial,helvetica,sans-serif"></span><br />\r\n						<br />\r\n						</td>\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 15, 1, 1170252084, 'theory', 1, 4, 'a:2:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";}', NULL, NULL, 1, ''),
(12, 'Introduction', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Introduction</h1>\r\n			In this lesson we discuss general methods which often apply in many and important problems where the number of possible solutions is forbiddingly big, in a sense that it is not possible to create and/or examine all those solutions just to find the one which fulfills certain requirements. Forbiddingly large numbers are for example the exponent and fictional functions of a <strong>n </strong>quantity, such as <strong>2<sup>n</sup></strong> or <strong>n</strong>! in best cases, or maybe combinations of those quantities in even worst cases. Even in modern <em><strong>Parallel Computers</strong></em> the execution of 30! simple mathematical actions would require about 300 centuries of calculations!<br />\r\n			<br />\r\n			All possible solutions are acceptable for a problem, but the one we look for is the <em><strong>best</strong></em> meaning that there is no other better than the one we found. Of course, the comparison is made by certain criteria. Herein we accept that there is a number representing each solution, for example a cost, a profit, that is difficult to calculate, therefore we seek a solution in which this number is, for example, minimum. We will also consider problems, for which we do not want the <em><strong>best</strong></em> solution, but just any other acceptable one out of a forbiddingly number of potential solutions.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 1, 1170248881, 'theory', 1, 0, 'b:0;', NULL, NULL, 1, ''),
(13, 'Greed (and hill elevation)', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Greed (and hill elevation)</h1>\r\n			This method is applied in such cases where a best solution is sought in a forbiddingly number of candidates. Following this method, the profit in every separate step of a procedure is maximized, <strong>without checking the consequences this might have in the next steps and to the final result.<br />\r\n			</strong><br />\r\n			A large number of candidates is rejected in every step of a greedy method, which has as a result the drastic shrinking of their number. This happens because <em><strong>greedy methods</strong></em> try to get the maximum possible <em><strong>best </strong></em>in every step. Despite all that, this method is <em><strong>topical</strong></em>; it does not take in mind the whole problem, therefore it is shortsighted and doesn&#39;t always leads us to the correct result. It often produces, though, a solution which is &quot;<em><strong>pretty near</strong></em>&quot; to the <em><strong>best </strong></em>solution.<br />\r\n			<br />\r\n			This first example is simply an explanation of the part that the shortsighted choice leads to a not optimal final result.<br />\r\n			<br />\r\n			<table border="2" cellspacing="4" cellpadding="4" style="border-style: dotted; border-width: 3px; width: 100%; height: 200px; background-image: none; float: none; text-align: left; vertical-align: top; color: #333333; background-color: #ccff99">\r\n				<tbody>\r\n					<tr>\r\n						<td colspan="4">Here we have the walls of a city, different points inside and outside of it and the time for moving \r\n						between points. Those times depends on a variety of reasons. We ask for the path with the least \r\n						cost to move from point A1 to the center K of the city. The greedy one would try to reach the \r\n						nearer point to A1 inside the city, which is A5 with 6 time units. After that there is no way to find \r\n						the less cost path.<br />\r\n						</td>\r\n					</tr>\r\n					<tr>\r\n						<td colspan="4" align="center"><br />\r\n						<applet codebase="content/lessons/1/java/badgreed" code="badgreed.class" width="350" height="380"/></applet></td>\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n			<br />\r\n			<font size="2"> </font>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 1, 1170251518, 'theory', 1, 12, 'b:0;', NULL, NULL, 1, ''),
(14, 'Order projects by deadlines', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Order projects by deadlines</h1>\r\n			We are about to examine a situation in which greedy methods give the best solution to a very important problem.<br />\r\n			<br />\r\n			Suppose n projects E(1),....E(n) are given. For each and everyone of those projects there is a deadline d(i)&gt;0 which is an integer number of time units and a profit p(i)&gt;0 which is gained only if the project is fulfilled before the exceeded of the deadline. The execution of a project (any of them) requires a time unit. Which projects and in what order should be constructed in order to maximize the total profit?<br />\r\n			<br />\r\n			An expectable or possible solution for this problem is a set of projects which can all be constructed before their deadline in a certain order, but not necessarily with their order of appearance in the set. If for example we consider n=3, (d(1),d(2),d(3)=2,2,1) and (p(1),p(2),p(3))=(50,100,60) a possible solution is the following set:L={E(1),E(2)} with a total profit of 150, whereas another possible solution(which happens to be the best) is the : L{E(2),E(3)}, with order of construction E(3) first, followed by E(2). This solution has a profit which adds up to 160.<br />\r\n			<br />\r\n			If L is a possible solution then the whole profit k is:<br />\r\n			k =Sum( p(i) ) (Presuming that E(i) belongs to the L set).<br />\r\n			<br />\r\n			Let&#39;s accept a greedy algorithm which starts with L=0 and who in every step selects a project with the maximum possible profit (out of the remaining projects). This algorithm will add the project to the L set, if it still gives us a possible solution. To check whether the overadded solution still is possible the algorithm should logically check all the possible transpositions of the elements of the solution. If in the present step there are k elements in the candidate possible solution, the algorithm would have to check k! cases in the worst case, a number forbiddingly big. However, there is a way out of this problem because we must only try to transfer projects with inclining deadline order. If this execution order aborts our deadlines we do not add this new project in our solution, and a new project (one with the maximum profit) is selected out of the remaining projects. The algorithm ends when there are no more projects left.<br />\r\n			<br />\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n<table border="2" cellspacing="4" cellpadding="4" style="border-style: dotted; border-width: 3px; width: 100%; height: 200px; vertical-align: top; color: #333333; background-color: #ccff99">\r\n	<tbody>\r\n		<tr>\r\n			<td colspan="4" align="center"><applet codebase="content/lessons/1/java/greeding" code="greeding.class" width="374" height="300"/></applet> \r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 1, 1170259047, 'theory', 1, 13, 'b:0;', NULL, NULL, 1, ''),
(15, 'Minimum genetic tree', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Minimum genetic tree</h1>\r\n			Let&#39;s assume a network G with cost function for its sides c. That means that c[e(ij)] is a real number and represents the cost for the e(ij) arc.<br />\r\n			<br />\r\n			* There are no arcs for a peak to itself, therefore e(ii) does not belong to the E set for i=1..n. As usually, n is the number of the peaks of G.<br />\r\n			* All costs are positive, therefore c[e(ij)]&gt;0 for i&lt;&gt;j.<br />\r\n			* We expand the c function to the non existing sides( e(ii) not belonging to the E set for i=1..n) assuming that :<br />\r\n			* The cost of the direct access of one peak to itself is zero, c[e(ii)]=0;<br />\r\n			* If there is no side connecting V(i) to V(j) that is e(ij) does not belong to the E set, then the direct access from one peak to another costs infinite. The final conclusion is:<br />\r\n			<br />\r\n			<table border="0">\r\n				<tbody>\r\n					<tr>\r\n						<td rowspan="2"><strong><em> \r\n						c[e(ij)] </em>={</strong></td>\r\n						<td><strong> 0 ,  if i=j.</strong></td>\r\n					</tr>\r\n					<tr>\r\n						<td><strong> \r\n						infinite ,  if i&lt;&gt;j.</strong></td>\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n			<br />\r\n			We can easily assume that G is connective.<br />\r\n			<br />\r\n			As cost of a G&#39;s undergraph is set the total cost of its sides. We are extremely concerned in the cost of a genetic tree T=(V&#39;,E&#39;), where V&#39;=V, that is the positive number:<br />\r\n			cost(T)= Sum( c[e(ij)] ) for e(ij) belonging to E&#39;.<br />\r\n			<br />\r\n			We will examine two algorithms, which solve the problem of finding the minimum genetic tree (m.g.t.) that is a genetic tree T which satisfies the following: cost(T)&lt;=cost(T&#39;) for every genetic tree T&#39; of G.<br />\r\n			They are the PRIM and the KRUSKAL algorithm. \r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 1, 1170248860, 'theory', 1, 14, 'b:0;', NULL, NULL, 1, ''),
(16, 'Religion', '<font size="2"><font size="3"><strong>Religion<br />\r\n<br />\r\n</strong></font></font>\r\n<table border="1" cellspacing="3" cellpadding="3" align="right">\r\n	<tbody>\r\n		<tr>\r\n			<td> \r\n			<div style="text-align: center">\r\n			<img src="content/lessons/2/ChacDresden.jpg" border="0" alt="Chaac" title="Chaac" width="167" height="224" />\r\n			</div>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td> <font size="2"><strong>Chaac, the god of Rain and thunder</strong></font></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n<font size="2">Like the Aztec and Inca who came to power later, the Maya believed in a cyclical nature of time. The rituals and ceremonies were very closely associated with celestial/terrestrial cycles which they observed and inscribed as separate calendars. The Maya priest had the job of interpreting these cycles and giving a prophetic outlook on the future or past based on the number relations of all their calendars. They also had to determine if the &quot;heavens&quot; or celestial matters were appropriate for performing certain religious ceremonies.<br />\r\n<br />\r\nThe Maya practiced human sacrifice. In some Maya rituals people were killed by having their arms and legs held while a priest cut the person&#39;s chest open and tore out his heart as an offering. This is depicted on ancient objects such as pictorial texts, known as codecs. It is believed that children were often offered as sacrificial victims because they were believed to be pure.<br />\r\n<br />\r\nMuch of the Maya religious tradition is still not understood by scholars, but it is known that the Maya, like most pre-modern societies, believed that the cosmos has three major planes, the underworld, the sky, and the earth.<br />\r\n<br />\r\nThe Maya Underworld is reached through caves and ball courts. It was thought to be dominated by the aged Maya gods of death and putrefaction. The Sun and Itzamna, both aged gods, dominated the Maya idea of the sky. The night sky was considered a window showing all supernatural doings. The Maya configured constellations of gods and places, saw the unfolding of narratives in their seasonal movements, and believed that the intersection of all possible worlds was in the night sky.<br />\r\n<br />\r\nMaya gods were not discrete, separate entities like Greek gods. The gods had affinities and aspects that caused them to merge with one another in ways that seem unbounded. There is a massive array of supernatural characters in the Maya religious tradition, only some of which recur with regularity. Good and evil traits are not permanent characteristics of Maya gods, nor is only &quot;good&quot; admirable. What is inappropriate during one season might come to pass in another since much of the Mayan religious tradition is based on cycles and not permanence.<br />\r\n<br />\r\nThe life-cycle of maize lies at the heart of Maya belief. This philosophy is demonstrated on the Maya belief in the Maize God as a central religious figure. The Maya bodily ideal is also based on the form of the young Maize God, which is demonstrated in their artwork. The Maize God was also a model of courtly life for the Classical Maya.<br />\r\n<br />\r\nThe Maya believed that the universe was flat and square, but infinite in area. They also worshiped the circle, which symbolized perfection or the balancing of forces.<br />\r\n<br />\r\nIt is sometimes believed that the multiple &quot;gods&quot; represented nothing more than a mathematical explanation of what they observed. Each god was literally just a number or an explanation of the effects observed by a combination of numbers from multiple calendars. Among the many types of Maya calendars which were maintained, the most important included a 260-day cycle, a 365-day cycle which approximated the solar year, a cycle which recorded lunation periods of the Moon, and a cycle which tracked the synodic period of Venus.<br />\r\n<br />\r\nPhilosophically, the Maya believed that knowing the past meant knowing the cyclical influences that create the present, and by knowing the influences of the present one can see the cyclical influences of the future.<br />\r\n<br />\r\nEven in the 19th century, there was Maya influence in the local branch of Christianity followed in Chan Santa Cruz. Among the K&#39;iche&#39;s in the western highlands of Guatemala these same nine months are replicated, until this very day, in the training of the ajk&#39;ij, the keeper of the 260-day-calendar called ch&#39;olk&#39;ij.<br />\r\n<br />\r\n</font>\r\n<div style="text-align: center">\r\n<br />\r\n</div>\r\n<div align="center">\r\n<br />\r\n</div>\r\n', 29, 2, 1189971471, 'theory', 1, 18, 'a:6:{s:13:"show_headline";s:1:"0";s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";s:14:"reentry_action";b:0;s:17:"complete_question";i:0;}', NULL, NULL, 1, ''),
(17, 'Astronomy', '<div align="justify">\r\n<font size="2"><font size="3"><strong>Astronomy</strong></font></font><br />\r\n<br />\r\n<font size="2">Uniquely, there is some evidence to suggest the Maya appear to be the only pre-telescopic civilization to demonstrate knowledge of the Orion Nebula as being fuzzy, i.e. not a stellar pin-point. The information which supports this theory comes from a folk tale that deals with the Orion constellation&#39;s area of the sky. Their traditional hearths include in their middle a smudge of glowing fire that corresponds with the Orion Nebula. This is a significant clue to support the idea that the Maya detected a diffuse area of the sky contrary to the pin points of stars before the telescope was invented. Many preclassic sites are oriented with the Pleiades and Eta draconnis, as seen in La Blanca, Ujuxte, Monte Alto, and Takalik Abaj.</font><br />\r\n<br />\r\n<font size="2">The Maya were very interested in zenial passages, the time when the sun passes directly overhead. The latitude of most of their cities being below the Tropic of Cancer, these zenial passages would occur twice a year equidistant from the solstice. To represent this position of the sun overhead, the Maya had a god named Diving God.</font><br />\r\n<br />\r\n<font size="2">The Dresden Codex contains the highest concentration of astronomical phenomena observations and calculations of any of the surviving texts (it appears that the data in this codex is primarily or exclusively of an astronomical nature). Examination and analysis of this codex reveals that Venus was the most important astronomical object to the Maya, even more important to them than the sun.</font>\r\n</div>\r\n', 29, 2, 1189971399, 'theory', 1, 20, 'b:0;', NULL, NULL, 1, ''),
(18, 'Mathematics', '<font size="2"><font size="3"><strong>Mathematics<br />\r\n<br />\r\n</strong></font></font>\r\n<table border="0" cellspacing="3" cellpadding="3" align="right">\r\n	<tbody>\r\n		<tr>\r\n			<td> <img src="content/lessons/2/Maya_numbers.png" border="0" alt="Maya Numbers" title="Maya Numbers" width="248" height="286" /></td>\r\n		</tr>\r\n		<tr align="center">\r\n			<td> \r\n			<strong><font size="2">Maya Numbers</font></strong></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n<font size="2">In common with the other Mesoamerican civilizations, the Maya used a base 20 (vigesimal) and base 5 numbering system. Also, the preclassic Maya and their neighbors independently developed the concept of zero by 36 BC. Inscriptions show them on occasion working with sums up to the hundreds of millions and dates so large it would take several lines just to represent it. They produced extremely accurate astronomical observations; their charts of the movements of the moon and planets are equal or superior to those of any other civilization working from naked eye observation.<br />\r\n<br />\r\nAlso in common with the other Mesoamerican civilizations, the Maya utilized a highly accurate measure of the length of the solar year, far more accurate than that used in Europe as the basis of the Gregorian Calendar. They did not use this figure for the length of year in their calendar, however. Instead, the Maya calendar(s) were based on a year length of exactly 365 days, which means that the calendar falls out of step with the seasons by one day every four years. By comparison, the Julian calendar, used in Europe from Roman times until about the 16th Century, accumulated an error of one day every 128 years. The modern Gregorian calendar accumulates a day&#39;s error in approximately 3257 years.<br />\r\n<br />\r\n</font>\r\n<div style="text-align: center">\r\n<br />\r\n<br />\r\n<strong><font size="2"></font></strong><br />\r\n</div>\r\n<br />\r\n', 29, 2, 1189971314, 'theory', 1, 17, 'a:6:{s:13:"show_headline";s:1:"0";s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";s:14:"reentry_action";b:0;s:17:"complete_question";i:0;}', NULL, NULL, 1, '');
INSERT INTO `content` (`id`, `name`, `data`, `parent_content_ID`, `lessons_ID`, `timestamp`, `ctg_type`, `active`, `previous_content_ID`, `options`, `metadata`, `scorm_version`, `publish`, `identifier`) VALUES
(19, 'Writing', '<div align="justify">\r\n<font size="2"><font size="3"><strong>Writing</strong></font></font><br />\r\n<font size="2"><font size="3"><strong>\r\n</strong></font></font><br />\r\n<font size="2"><font size="3"><strong>\r\n</strong></font>The Maya writing system (often called hieroglyphs from a superficial resemblance to the Ancient Egyptian writing) was a combination of phonetic symbols and logograms. It is most often classified as a logographic or (more properly) a logosyllabic writing system, in which syllabic signs play a significant role. It is the only writing system of the Pre-Columbian New World which is known to completely represent the spoken language of its community. In total, the script has more than a thousand different glyphs, although a few are variations of the same sign or meaning, and many appear only rarely or are confined to particular localities. At any one time, no more than around 500 glyphs were in use, some 200 of which (including variations) had a phonetic or syllabic interpretation.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nThe earliest inscriptions in an identifiably-Maya script date back to 200–300 BC. However, this is preceded by several other writing systems which had developed in Mesoamerica, most notably that of the Zapotecs, and (following the 2006 publication of research on the recently-discovered Cascajal Block), the Olmecs. There is a pre-Maya writing known as &quot;Epi-Olmec script&quot; (post Olmec) which some researchers believe may represent a transitional script between Olmec and Maya writing, but the relationships between these remain unclear and the matter is unsettled. On January 5, 2006, National Geographic published the findings of Maya writings that could be as old as 400 BCE, suggesting that the Maya writing system is nearly as old as the oldest Mesoamerican writing known at that time, Zapotec. In the succeeding centuries the Maya developed their script into a form which was far more complete and complex than any other that has yet been found in the Americas.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nSince its inception, the Maya script was in use up to the arrival of the Europeans, peaking during the Maya Classical Period (c. 200 to 900). Although many Maya centers went into decline (or were completely abandoned) during or after this period, the skill and knowledge of Maya writing persisted amongst segments of the population, and the early Spanish conquistadors knew of individuals who could still read and write the script. Unfortunately, the Spanish displayed little interest in it, and as a result of the dire impacts the conquest had on Maya societies, the knowledge was subsequently lost, probably within only a few generations.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nAt a rough estimate, in excess of 10,000 individual texts have so far been recovered, mostly inscribed on stone monuments, lintels, stelae and ceramic pottery. The Maya also produced texts painted on a form of paper manufactured from processed tree-bark, in particular from several species of strangler fig trees such as Ficus cotinifolia and Ficus padifolia. This paper, common throughout Mesoamerica and generally now known by its Nahuatl-language name amatl, was typically bound as a single continuous sheet that was folded into pages of equal width, concertina-style, to produce a codex (book) that could be written on both sides. Shortly after the conquest, all of the codices which could be found were ordered to be burnt and destroyed by zealous Spanish priests, notably Bishop Diego de Landa. Only three reasonably intact examples of Maya codices are known to have survived through to the present day. These are now known as the Madrid, Dresden, and Paris codices. A few pages survive from a fourth, the Grolier codex, whose authenticity is sometimes disputed, but mostly is held to be genuine. Further archaeology conducted at Mayan sites often reveals other fragments, rectangular lumps of plaster and paint chips which formerly were codices; these tantalizing remains are, however, too severely damaged for any inscriptions to have survived, most of the organic material having decayed.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nThe decipherment and recovery of the now-lost knowledge of Maya writing has been a long and laborious process. Some elements were first deciphered in the late 19th and early 20th century, mostly the parts having to do with numbers, the Maya calendar, and astronomy. Major breakthroughs came starting in the 1950s to 1970s, and accelerated rapidly thereafter. By the end of the 20th century, scholars were able to read the majority of Maya texts to a large extent, and recent field work continues to further illuminate the content.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nIn reference to the few extant Maya writings, Michael D. Coe, a prominent linguist and epigrapher at Yale University stated:</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\n&quot;Our knowledge of ancient Maya thought must represent only a tiny fraction of the whole picture, for of the thousands of books in which the full extent of their learning and ritual was recorded, only four have survived to modern times (as though all that posterity knew of ourselves were to be based upon three prayer books and &#39;Pilgrim&#39;s Progress&#39;).&quot; (Michael D. Coe, The Maya, London: Thames and Hudson, 4th ed., 1987, p. 161.)</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nMost surviving pre-Columbian Maya writing is from stelae and other stone inscriptions from Maya sites, many of which were already abandoned before the Spanish arrived. The inscriptions on the stelae mainly record the dynasties and wars of the sites&#39; rulers. Also of note are the inscriptions that reveal information about the lives of ancient Maya women. Much of the remainder of Maya hieroglyphics has been found on funeral pottery, most of which describes the afterlife.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\n<strong>Writing tools</strong></font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nAlthough the archaeological record does not provide examples, Maya art shows that writing was done with brushes made with animal hair and quills. Codex-style writing was usually done in black ink with red highlights, giving rise to the Aztec name for the Maya territory as the &quot;land of red and black&quot;.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\n<strong>Scribes and Literacy</strong></font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nScribes held a prominent position in Maya courts. Maya art often depicts rulers with trappings indicating they were scribes or at least able to write, such as having pen bundles in their headdresses. Additionally, many rulers have been found in conjunction with writing tools such as shell or clay inkpots.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nAlthough the number of logograms and syllabic symbols required to fully write the language numbered in the hundreds, literacy was not necessarily widespread beyond the elite classes. Graffiti uncovered in various contexts, including on fired bricks, shows nonsensical attempts to imitate the writing system.</font>\r\n</div>\r\n', 29, 2, 1189971216, 'theory', 1, 24, 'a:6:{s:13:"show_headline";s:1:"0";s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";s:14:"reentry_action";b:0;s:17:"complete_question";i:0;}', NULL, NULL, 1, ''),
(20, 'Architecture', '<div align="justify">\r\n<font size="2"><font size="3"><strong>Architecture</strong></font></font><br />\r\n<font size="2"><font size="3"><strong>\r\n</strong></font></font><br />\r\n<font size="2"><font size="3"><strong>\r\n</strong></font>As unique and spectacular as Greek or Roman architecture, Maya architecture spans many thousands of years; yet, often the most dramatic and easily recognizable as Maya are the fantastic stepped pyramids from the Terminal Pre-classic period and beyond.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nThere are also cave sites that are important to the Maya. These cave sites include Jolja Cave, the cave site at Naj Tunich, the Candelaria Caves, and the Cave of the Witch. There are also cave-origin myths among the Maya. Some cave sites are still used by the modern Maya in the Chiapas highlands.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nIt has been suggested that, in conjunction to the Maya Long Count Calendar, every fifty-two years, or cycle, temples and pyramids were remodeled and rebuilt. It appears now that the rebuilding process was often instigated by a new ruler or for political matters, as opposed to matching the calendar cycle. However, the process of rebuilding on top of old structures is indeed a common one. Most notably, the North Acropolis at Tikal seems to be the sum total of 1,500 years of architectural modifications. In Tikal and Yaxhá, there are the Twin Pyramid complexes (7 in Tikal and 1 in Yaxhá, that commemorate the end of a Baktún</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nThrough observation of the numerous consistent elements and stylistic distinctions, remnants of Maya architecture have become an important key to understanding the evolution of their ancient civilization.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\n<strong>Urban design</strong></font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nAs Maya cities spread throughout the varied geography of Mesoamerica, site planning appears to have been minimal. Maya architecture tended to integrate a great degree of natural features, and their cities were built somewhat haphazardly as dictated by the topography of each independent location. For instance, some cities on the flat limestone plains of the northern Yucatán grew into great sprawling municipalities, while others built in the hills of Usumacinta utilized the natural loft of the topography to raise their towers and temples to impressive heights. However, some semblance of order, as required by any large city, still prevailed.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nClassic Era Maya urban design could easily be described as the division of space by great monuments and causeways. Open public plazas were the gathering places for people and the focus of urban design, while interior space was entirely secondary. Only in the Late Post-Classic era did the great Maya cities develop into more fortress-like defensive structures that lacked, for the most part, the large and numerous plazas of the Classic.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nAt the onset of large-scale construction during the Classic Era, a predetermined axis was typically established in a cardinal direction. Depending on the location of natural resources such as fresh-water wells, or cenotes, the city grew by using sacbeob (causeways), (singular: Sacbé) to connect great plazas with the numerous platforms that created the sub-structure for nearly all Maya buildings. As more structures were added and existing structures re-built or remodeled, the great Maya cities seemed to take on an almost random identity that contrasted sharply with other great Mesoamerican cities such as Teotihuacan and its rigid grid-like construction.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nAt the heart of the Maya city were large plazas surrounded by the most important governmental and religious buildings, such as the royal acropolis, great pyramid temples and occasionally ball-courts. Though city layouts evolved as nature dictated, careful attention was placed on the directional orientation of temples and observatories so that they were constructed in accordance with Maya interpretation of the orbits of the heavenly bodies. Immediately outside of this ritual center were the structures of lesser nobles, smaller temples, and individual shrines; the less sacred and less important structures had a greater degree of privacy. Outside of the constantly evolving urban core were the less permanent and more modest homes of the common people.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\n<strong>Building materials</strong></font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nA surprising aspect of the great Maya structures is their lack of many advanced technologies seemingly necessary for such constructions. Lacking draft animals necessary for wheel-based modes of transportation, metal tools and even pulleys, Maya architecture required abundant manpower. Yet, beyond this enormous requirement, the remaining materials seem to have been readily available. All stone for Maya structures appears to have been taken from local quarries. They most often used limestone which remained pliable enough to be worked with stone tools while being quarried and only hardened once removed from its bed. In addition to the structural use of limestone, much of their mortar consisted of crushed, burnt and mixed limestone that mimicked the properties of cement and was used as widely for stucco finishing as it was for mortar. Later improvements in quarrying techniques reduced the necessity for this limestone-stucco as the stones began to fit quite perfectly, yet it remained a crucial element in some post and lintel roofs. In the case of the common Maya houses, wooden poles, adobe and thatch were the primary materials; however, instances of what appear to be common houses of limestone have been discovered as well. Also notable throughout Maya architecture is the corbel arch (also known as a &quot;false arch&quot;), whose limitations kept their structures generally weighty rather than airy.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\n<strong>Notable constructions</strong></font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\n* Ceremonial platforms were commonly limestone platforms of typically less than four meters in height where public ceremonies and religious rites were performed. Constructed in the fashion of a typical foundation platform, these were often accented by carved figures, altars and perhaps tzompantli, a stake used to display the heads of victims or defeated Mesoamerican ballgame opponents.</font><br />\r\n<font size="2">\r\n* Palaces were large and often highly decorated, and usually sat close to the center of a city and housed the population&#39;s elite. Any exceedingly large royal palace, or one consisting of many chambers on different levels might be referred to as an acropolis. However, often these were one-story and consisted of many small chambers and typically at least one interior courtyard; these structures appear to take into account the needed functionality required of a residence, as well as the decoration required for their inhabitants stature.</font><br />\r\n<font size="2">\r\n* E-Groups are specific structural configurations present at a number of centers in the Maya area. These complexes are oriented and aligned according to specific astronomical events (primarily the sun’s solstices and equinoxes) and are thought to have been observatories. These structures are usually accompanied by iconographic reliefs that tie astronomical observation into general Maya mythology. The structural complex is named for Group E at Uaxactun, the first documented in Mesoamerica.</font><br />\r\n<font size="2">\r\n* Pyramids and temples. Often the most important religious temples sat atop the towering Maya pyramids, presumably as the closest place to the heavens. While recent discoveries point toward the extensive use of pyramids as tombs, the temples themselves seem to rarely, if ever, contain burials. Residing atop the pyramids, some of over two-hundred feet, such as that at El Mirador, the temples were impressive and decorated structures themselves. Commonly topped with a roof comb, or superficial grandiose wall, these temples might have served as a type of propaganda. As they were often the only structure in a Maya city to exceed the height of the surrounding jungle, the roof combs atop the temples were often carved with representations of rulers that could be seen from vast distances.</font><br />\r\n<font size="2">\r\n* Observatories. The Maya were keen astronomers and had mapped out the phases of celestial objects, especially the Moon and Venus. Many temples have doorways and other features aligning to celestial events. Round temples, often dedicated to Kukulcan, are perhaps those most often described as &quot;observatories&quot; by modern ruin tour-guides, but there is no evidence that they were so used exclusively, and temple pyramids of other shapes may well have been used for observation as well.</font><br />\r\n<font size="2">\r\n* Ball courts. As an integral aspect of the Mesoamerican lifestyle, the courts for their ritual ball-game were constructed throughout the Maya realm and often on a grand scale. Enclosed on two sides by stepped ramps that led to ceremonial platforms or small temples, the ball court itself was of a capital &quot;I&quot; shape and could be found in all but the smallest of Maya cities.</font><br />\r\n<font size="2">\r\n</font><br />\r\n</div>\r\n<font size="2">\r\n</font>\r\n', 29, 2, 1189970952, 'theory', 1, 19, 'b:0;', NULL, NULL, 1, ''),
(21, 'Postclassic', '<div align="justify">\r\n<font size="2"><font size="3"><strong>Postclassic History</strong></font></font><br />\r\n<font size="2"><font size="3"><strong>\r\n</strong></font></font><br />\r\n<font size="2">\r\nDuring the succeeding Postclassic period (from the 10th to the early 16th century), development in the northern centers persisted, characterized by an increasing diversity of external influences. The Maya cities of the northern lowlands in Yucatán continued to flourish for centuries more; some of the important sites in this era were Chichen Itza, Uxmal, Edzná, and Coba. After the decline of the ruling dynasties of Chichen and Uxmal, Mayapan ruled all of Yucatán until a revolt in 1450. (This city&#39;s name may be the source of the word &quot;Maya&quot;, which had a more geographically restricted meaning in Yucatec and colonial Spanish and only grew to its current meaning in the 19th and 20th centuries). The area then degenerated into competing city-states until the Yucatán was conquered by the Spanish.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nThe Itza Maya, Ko&#39;woj, and Yalain groups of Central Peten survived the &quot;Classic Period Collapse&quot; in small numbers and by 1250 reconstituted themselves to form competing city-states. The Itza maintained their capital at Tayasal (also known as Noh Petén), an archaeological site thought to underlay the modern city of Flores, Guatemala on Lake Petén Itzá. It ruled over an area extending across the Peten Lakes region, encompassing the community of Eckixil on Lake Quexil. The Ko&#39;woj had their capital at Zacpeten. Postclassic Maya states also continued to survive in the southern highlands. One of the Maya kingdoms in this area, the Quiché, is responsible for the best-known Maya work of historiography and mythology, the Popol Vuh.<br />\r\n<br />\r\n</font>\r\n<div align="center">\r\n<img src="content/lessons/2/Topoxte.jpg" border="0" alt="Topoxte" title="Topoxte" width="600" height="450" /><br />\r\n<font size="2"><strong><br />\r\nEarly Postclassic Temple ruins of Topoxte<br />\r\n<br />\r\n</strong></font>\r\n</div>\r\n</div>\r\n', 27, 2, 1189970311, 'theory', 1, 25, 'a:6:{s:13:"show_headline";s:1:"0";s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";s:14:"reentry_action";b:0;s:17:"complete_question";i:0;}', NULL, NULL, 1, ''),
(22, 'Colonial Period', '<font size="2"><font size="3"><strong>Colonial Period</strong></font></font><br />\r\n<div align="justify">\r\n<font size="2"><font size="3"><strong>\r\n</strong></font></font><br />\r\n<font size="2"><font size="3"><strong>\r\n</strong></font>Shortly after their first expeditions to the region, the Spanish initiated a number of attempts to subjugate the Maya and establish a colonial presence in the Maya territories of the Yucatán Peninsula and the Guatemalan highlands. This campaign, sometimes termed &quot;The Spanish Conquest of Yucatán,&quot; would prove to be a lengthy and dangerous exercise for the conquistadores from the outset, and it would take some 170 years before the Spanish established substantive control over all Maya lands.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nUnlike the Spanish campaigns against the Aztec and Inca Empires, there was no single Maya political center which once overthrown would hasten the end of collective resistance from the indigenous peoples. Instead, the conquistador forces needed to subdue the numerous independent Maya polities almost one by one, many of which kept up a fierce resistance. Most of the conquistadores were motivated by the prospects of the great wealth to be had from the seizure of precious metal resources such as gold or silver, however the Maya lands themselves were poor in these resources. This would become another factor in forestalling Spanish designs of conquest, as they instead were initially attracted to the reports of great riches in central Mexico or Peru.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nThe last Maya states, the Itza polity of Tayasal and the Ko&#39;woj city of Zacpeten, were continuously occupied and remained independent of the Spanish until late in the 17th century. They were finally subdued by the Spanish in 1697.<br />\r\n<br />\r\n</font>\r\n<div style="text-align: center">\r\n<div align="justify">\r\n<div style="text-align: center">\r\n<img src="content/lessons/2/Spanish_Empire-World_Map.png" border="0" alt="Spanish Empire" title="Spanish Empire" />\r\n</div>\r\n<br />\r\n</div>\r\n<br />\r\n<font size="2"><strong>The full extend of Spanish Empire<br />\r\n<br />\r\n</strong></font>\r\n</div>\r\n<br />\r\n</div>\r\n', 27, 2, 1189970541, 'theory', 1, 21, 'a:6:{s:13:"show_headline";s:1:"0";s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";s:14:"reentry_action";b:0;s:17:"complete_question";i:0;}', NULL, NULL, 1, ''),
(23, 'Political Structures', '<font size="2"><font size="3"><strong>Political Structures<br />\r\n</strong></font><br />\r\n</font>\r\n<div align="justify">\r\n<font size="2">\r\nA typical Classic Maya polity was a small hierarchical state (ajawil, ajawlel, or ajawlil) headed by a hereditary ruler known as an ajaw (later k’uhul ajaw). Such kingdoms were usually no more than a capital city with its neighborhood and several lesser towns, although there were greater kingdoms, which controlled larger territories and extended patronage over smaller polities.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nEach kingdom had a name that did not necessarily correspond to any locality within its territory. Its identity was that of a political unit associated with a particular ruling dynasty. For instance, the archaeological site of Naranjo was the capital of the kingdom of Saal. The land (chan ch’e’n) of the kingdom and its capital were called Wakab’nal or Maxam and were part of a larger geographical entity known as Huk Tsuk. Interestingly, despite constant warfare and eventual shifts in regional power, most kingdoms never disappeared from the political landscape until the collapse of the whole system in the 9th century AD. In this respect, Classic Maya kingdoms are highly similar to late Post Classic polities encountered by the Spaniards in Yucatán and Central Mexico: some polities could be subordinated to hegemonic rulers through conquests or dynastic unions and yet even then they persisted as distinct entities.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nMayanists have been increasingly accepting a &quot;court paradigm&quot; of Classic Maya societies which puts the emphasis on the centrality of the royal household and especially the person of the king. This approach focuses on Maya monumental spaces as the embodiment of the diverse activities of the royal household. It considers the role of places and spaces (including dwellings of royalty and nobles, throne rooms, temples, halls and plazas for public ceremonies) in establishing power and social hierarchy, and also in projecting aesthetic and moral values to define the wider social realm.</font><br />\r\n<font size="2">\r\n</font><br />\r\n<font size="2">\r\nSpanish sources invariably describe even the largest Maya settlements as dispersed collections of dwellings grouped around the temples and palaces of the ruling dynasty and lesser nobles. None of the Classic Maya cities shows evidence of economic specialization and commerce of the scale of Mexican Tenochtitlan. Instead, Maya cities could be seen as enormous royal households, the locales of the administrative and ritual activities of the royal court. They were the places where privileged nobles could approach the holy ruler, where aesthetic values of the high culture were formulated and disseminated, where aesthetic items were consumed. They were the self-proclaimed centers and the sources of social, moral, and cosmic order. The fall of a royal court as in the well-documented cases of Piedras Negras or Copan would cause the inevitable &quot;death&quot; of the associated settlement.</font><br />\r\n</div>\r\n<font size="2">\r\n<br />\r\n</font>\r\n', 29, 2, 1189970644, 'theory', 1, 22, 'b:0;', NULL, NULL, 1, ''),
(24, 'Art', '<div align="justify">\r\n<font size="2"><font size="3"><strong>Art</strong></font></font><br />\r\n<br />\r\n<font size="2">A typical Classic <strong>Maya </strong>polity was a small hierarchical state (ajawil, ajawlel, or ajawlil) headed by a hereditary ruler known as an ajaw (later k’uhul ajaw). Such kingdoms were usually no more than a capital city with its neighborhood and several lesser towns, although there were greater kingdoms, which controlled larger territories and extended patronage over smaller polities.</font><br />\r\n<br />\r\n<font size="2">Each kingdom had a name that did not necessarily correspond to any locality within its territory. Its identity was that of a political unit associated with a particular ruling dynasty. For instance, the archaeological site of Naranjo was the capital of the kingdom of Saal. The land (chan ch’e’n) of the kingdom and its capital were called Wakab’nal or Maxam and were part of a larger geographical entity known as Huk Tsuk. Interestingly, despite constant warfare and eventual shifts in regional power, most kingdoms never disappeared from the political landscape until the collapse of the whole system in the 9th century AD. In this respect, Classic Maya kingdoms are highly similar to late Post Classic polities encountered by the Spaniards in Yucatán and Central Mexico: some polities could be subordinated to hegemonic rulers through conquests or dynastic unions and yet even then they persisted as distinct entities.</font><br />\r\n<br />\r\n<font size="2">Mayanists have been increasingly accepting a &quot;court paradigm&quot; of Classic Maya societies which puts the emphasis on the centrality of the royal household and especially the person of the king. This approach focuses on Maya monumental spaces as the embodiment of the diverse activities of the royal household. It considers the role of places and spaces (including dwellings of royalty and nobles, throne rooms, temples, halls and plazas for public ceremonies) in establishing power and social hierarchy, and also in projecting aesthetic and moral values to define the wider social realm.</font><br />\r\n<br />\r\n<font size="2">Spanish sources invariably describe even the largest Maya settlements as dispersed collections of dwellings grouped around the temples and palaces of the ruling dynasty and lesser nobles. None of the Classic Maya cities shows evidence of economic specialization and commerce of the scale of Mexican Tenochtitlan. Instead, Maya cities could be seen as enormous royal households, the locales of the administrative and ritual activities of the royal court. They were the places where privileged nobles could approach the holy ruler, where aesthetic values of the high culture were formulated and disseminated, where aesthetic items were consumed. They were the self-proclaimed centers and the sources of social, moral, and cosmic order. The fall of a royal court as in the well-documented cases of Piedras Negras or Copan would cause the inevitable &quot;death&quot; of the associated settlement.<br />\r\n<br />\r\n</font>\r\n<div style="text-align: center">\r\n<img src="content/lessons/2/Palenque_Relief.jpg" border="0" alt="Palenque_Relief" title="Palenque_Relief" width="391" height="796" /><br />\r\n<br />\r\n<font size="2"><strong>\r\nA stucco relief from Palenque depicting Upakal K&#39;inich</strong></font><br />\r\n</div>\r\n<br />\r\n<br />\r\n</div>\r\n', 29, 2, 1189970786, 'theory', 1, 23, 'a:6:{s:13:"show_headline";s:1:"0";s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";s:14:"reentry_action";b:0;s:17:"complete_question";i:0;}', NULL, NULL, 1, ''),
(25, 'Classic', '<font size="2"><strong><font size="3">Classic History</font></strong><br />\r\n<br />\r\nThe Classic period (c. 250–900) witnessed the peak of large-scale construction and urbanism, the recording of monumental inscriptions, and a period of significant intellectual and artistic development, particularly in the southern lowland regions. They developed an agriculturally intensive, city-centered empire consisting of numerous independent city-states. This includes the well-known cities of Tikal, Palenque, Copán and Calakmul, but also the lesser known Dos Pilas, Uaxactun, Altun Ha, and Bonampak, among others. The Early Classic settlement distribution in the northern Maya lowlands is not as clearly known as the southern zone, but does include a number of population centers, such as Oxkintok, Chunchucmil, and the early occupation of Uxmal.<br />\r\n<br />\r\nThe most notable monuments are the pyramids they built in their religious centers and the accompanying palaces of their rulers. The palace at Cancuen is the largest in the Maya area, though the site, interestingly, lacks pyramids. Other important archaeological remains include the carved stone slabs usually called stelae (the Maya called them tetun, or &quot;tree-stones&quot;), which depict rulers along with hieroglyphic texts describing their genealogy, military victories, and other accomplishments.<br />\r\n<br />\r\nThe Maya participated in long distance trade with many of the other Mesoamerican cultures, including Teotihuacan, the Zapotec, and other groups in central and gulf-coast Mexico, as well as with more distant, non-Mesoamerican groups. For example, archaeologists found gold from Panama in the Sacred Cenote of Chichen Itza. Important trade goods included cacao, salt, sea shells, jade and obsidian.<br />\r\n<br />\r\n</font>\r\n<div style="text-align: center">\r\n<img src="content/lessons/2/Palenque_Ruins.jpg" border="0" alt="The Palenqua Ruins" title="The Palenqua Ruins" width="629" height="472" />\r\n</div>\r\n<br />\r\n<div align="center">\r\n<strong><font size="2">The Palenqua Ruins<br />\r\n<br />\r\n<br />\r\n</font></strong>\r\n</div>\r\n', 27, 2, 1189970195, 'theory', 1, 28, 'a:6:{s:13:"show_headline";s:1:"0";s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";s:14:"reentry_action";b:0;s:17:"complete_question";i:0;}', NULL, NULL, 1, ''),
(26, 'Geographical Position', '<font size="2"><font size="3"><strong>Geographical Position<br />\r\n</strong></font><br />\r\nThe geographic extent of the Maya civilization, known as the Maya area, extended throughout the northern Central American region, including the present-day nations of Guatemala, Belize, El Salvador, western Honduras , and the southern Mexican states of Chiapas, Tabasco, and the Yucatán Peninsula states of Quintana Roo, Campeche and Yucatán.<br />\r\n<br />\r\nAs the largest sub-region in Mesoamerica, it encompassed a vast and varied landscape, from the mountainous regions of the Sierra Madre to the semi-arid plains of northern Yucatán. Climate in the Maya region can vary tremendously, as the low-lying areas are particularly susceptible to the hurricanes and tropical storms that frequent the Caribbean.<br />\r\n<br />\r\nThe Maya area is generally divided into three loosely defined zones: the southern Maya highlands, the southern (or central) Maya lowlands, and the northern Maya lowlands. The southern Maya highlands include all of elevated terrain in Guatemala and the Chiapas highlands. The southern lowlands lie just north of the highlands, and incorporate the Petén of northern Guatemala, Belize, El Salvador, and the southern portions of the Mexican states of Campeche and Quintana Roo. The northern lowlands cover the remainder of the Yucatán Peninsula, including the Puuc hills.<br />\r\n<br />\r\n</font>\r\n<div style="text-align: center">\r\n<img src="content/lessons/2/mayamap.jpg" border="0" alt="Maya Map" title="Maya Map" /><br />\r\n<br />\r\n<font size="2"><strong>Geographical Position of Maya&#39;s<br />\r\n<br />\r\n</strong></font>\r\n</div>\r\n<br />\r\n', 29, 2, 1189969299, 'theory', 1, 29, 'a:6:{s:13:"show_headline";s:1:"0";s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";s:14:"reentry_action";b:0;s:17:"complete_question";i:0;}', NULL, NULL, 1, ''),
(27, 'History', '', 29, 2, 1189970002, 'theory', 1, 26, 'b:0;', NULL, NULL, 1, ''),
(28, 'Preclassic', '<font size="2"><font size="3"><strong>Preclassic History<br />\r\n</strong></font><br />\r\nWhile the Maya area was initially inhabited around the 10th millennium BC, the first clearly “Maya” settlements were established in approximately 1800 BC in Soconusco region of the Pacific Coast. This point in time, known as the Early Preclassic, was characterized by sedentary communities and the introduction of pottery and fired clay figurines.<br />\r\n<br />\r\nArchaeological evidence suggests the construction of ceremonial architecture in Maya area by approximately 1000 BC. The earliest configurations of such architecture consist of simple burial mounds, which would be the precursors to the stepped pyramids subsequently erected in the Late Preclassic. Prominent Middle and Late Preclassic settlement zones are located in the southern Maya lowlands, specifically in the Mirador and Petén Basins. Important sites in the southern Maya lowlands include Nakbe, El Mirador, Cival, and San Bartolo. Mid-sized Maya communities also began to develop in the northern Maya lowlands during the Middle and Late Preclassic, though these lacked the size, scale, and influence of the large centers of the southern lowlands. Two important Preclassic northern sites include Komchen and Dzibilchaltun.<br />\r\n<br />\r\nThere is some disagreement about the boundaries which differentiate the physical and cultural extent of the early Maya and neighboring Preclassic Mesoamerican civilizations, such as the Olmec culture of the Tabasco lowlands and the Mixe-Zoque– and Zapotec–speaking peoples of Chiapas and southern Oaxaca, respectively. Many of the earliest significant inscriptions and buildings appeared in this overlapping zone, and evidence suggests that these cultures and the formative Maya influenced one another</font>\r\n', 27, 2, 1189970081, 'theory', 1, 27, 'b:0;', NULL, NULL, 1, ''),
(29, 'The Maya Civilization', '<font face="verdana,geneva" size="2"><font size="3"><strong>The Maya Civilization<br />\r\n</strong></font><br />\r\nThe Maya civilization is a Mesoamerican civilization, noted for the only known fully developed written language of the pre-Columbian Americas, as well as its spectacular art, monumental architecture, and sophisticated mathematical and astronomical systems. Initially established during the Preclassic period, many of these reached their apogee of development during the Classic period (c. 250 to 900), and continued throughout the Postclassic period until the arrival of the Spanish. At its peak, it was one of the most densely populated and culturally dynamic societies in the world.<br />\r\n<br />\r\nThe Maya civilization shares many features with other Mesoamerican civilizations due to the high degree of interaction and cultural diffusion that characterized the region. Advances such as writing, epigraphy, and the calendar did not originate with the Maya; however, their civilization fully developed them. Maya influence can be detected as far as central Mexico, more than 1000 km (625 miles) from the Maya area. Many outside influences are found in Maya art and architecture, which are thought to result from trade and cultural exchange rather than direct external conquest.<br />\r\n<br />\r\nThe Maya peoples never disappeared, neither at the time of the Classic period decline nor with the arrival of the Spanish conquistadores and the subsequent Spanish colonization of the Americas. Today, the Maya and their descendants form sizable populations throughout the Maya area and maintain a distinctive set of traditions and beliefs that are the result of the merger of pre-Columbian and post-Conquest ideologies (and structured by the almost total adoption of Roman Catholicism). Many different Mayan languages continue to be spoken as primary languages today; the Rabinal Achí, a play written in the Q&#39;eqchi&#39; language, was declared a Masterpiece of the Oral and Intangible Heritage of Humanity by UNESCO in 2005.<br />\r\n<br />\r\n</font>\r\n<div style="text-align: center">\r\n<br />\r\n<img src="content/lessons/2/Bonampak_painting+contrast.jpg" border="0" alt="Bonampak_painting" width="642" height="374" /><br />\r\n<font size="2"><strong><br />\r\nBonampak Painting showing Ancient Mayas<br />\r\n</strong></font>\r\n<br />\r\n</div>\r\n<br />\r\n', 0, 2, 1189969097, 'theory', 1, 0, 'a:6:{s:13:"show_headline";s:1:"0";s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";s:14:"reentry_action";b:0;s:17:"complete_question";i:0;}', NULL, NULL, 1, ''),
(30, 'Maya History Test', '', 29, 2, 1189973338, 'tests', 1, 16, 'b:0;', NULL, NULL, 1, ''),
(31, '1. Learn to Debug', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Learn to Debug</h1>\r\n			Debugging is the cornerstone of being a programmer. The first meaning of the verb to debug is to\r\n			remove errors, but the meaning that really matters is to see into the execution of a program by examining\r\n			it. A programmer that cannot debug effectively is blind.<br />\r\n			<br />\r\n			Idealists that think design, or analysis, or complexity theory, or whatnot, are more fundamental are\r\n			not working programmers. The working programmer does not live in an ideal world. Even if you\r\n			are perfect, your are surrounded by and must interact with code written by major software companies,\r\n			organizations like GNU, and your colleagues. Most of this code is imperfect and imperfectly\r\n			documented. Without the ability to gain visibility into the execution of this code the slightest\r\n			bump will throw you permanently. Often this visibility can only be gained by experimentation,\r\n			that is, debugging.<br />\r\n			<br />\r\n			Debugging is about the running of programs, not programs themselves. If you buy something from\r\n			a major software company, you usually don&#39;t get to see the program. But there will still arise\r\n			places where the code does not conform to the documentation (crashing your entire machine is a\r\n			common and spectacular example), or where the documentation is mute. More commonly, you\r\n			create an error, examine the code you wrote and have no clue how the error can be occurring. Inevitably,\r\n			this means some assumption you are making is not quite correct, or some condition arises\r\n			that you did not anticipate. Sometimes the magic trick of staring into the source code works. When\r\n			it doesn&#39;t, you must debug.<br />\r\n			<br />\r\n			To get visibility into the execution of a program you must be able to execute the code and observe\r\n			something about it. Sometimes this is visible, like what is being displayed on a screen, or the delay\r\n			between two events. In many other cases, it involves things that are not meant to be visible, like\r\n			the state of some variables inside the code, which lines of code are actually being executed, or\r\n			whether certain assertions hold across a complicated data structure. These hidden things must be\r\n			revealed.<br />\r\n			<br />\r\n			The common ways of looking into the ‘innards’ of an executing program can be categorized as:<br />\r\n			<br />\r\n			• Using a debugging tool,<br />\r\n			• Printlining --- Making a temporary modification to the program, typically adding lines that\r\n			print information out, and<br />\r\n			• Logging --- Creating a permanent window into the programs execution in the form of a log.<br />\r\n			<br />\r\n			Debugging tools are wonderful when they are stable and available, but the printlining and logging\r\n			are even more important. Debugging tools often lag behind language development, so at any point\r\n			in time they may not be available. In addition, because the debugging tool may subtly change the\r\n			way the program executes it may not always be practical. Finally, there are some kinds of debugging,\r\n			such as checking an assertion against a large data structure, that require writing code and\r\n			changing the execution of the program. It is good to know how to use debugging tools when they\r\n			are stable, but it is critical to be able to employ the other two methods.\r\n			<br />\r\n			<br />\r\n			Some beginners fear debugging when it requires modifying code. This is understandable---it is a\r\n			little like exploratory surgery. But you have to learn to poke at the code and make it jump; you\r\n			have to learn to experiment on it, and understand that nothing that you temporarily do to it will\r\n			make it worse. If you feel this fear, seek out a mentor---we lose a lot of good programmers at the\r\n			delicate onset of their learning to this fear.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681063, 'theory', 1, 0, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:17:"1. Learn to Debug";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(32, '2. How to Debug by Splitting the Problem Space', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Debug by Splitting the Problem Space</h1>\r\n			Debugging is fun, because it begins with a mystery. You think it should do something, but instead\r\n			it does something else. It is not always quite so simple---any examples I can give will be contrived\r\n			compared to what sometimes happens in practice. Debugging requires creativity and ingenuity. If\r\n			there is a single key to debugging is to use the divide and conquer technique on the mystery.<br />\r\n			<br />\r\n			Suppose, for example, you created a program that should do ten things in a sequence. When you\r\n			run it, it crashes. Since you didn&#39;t program it to crash, you now have a mystery. When out look at\r\n			the output, you see that the first seven things in the sequence were run successfully. The last three\r\n			are not visible from the output, so now your mystery is smaller: ‘It crashed on thing #8, #9, or\r\n			#10.’<br />\r\n			<br />\r\n			Can you design an experiment to see which thing it crashed on? Sure. You can use a debugger or\r\n			we can add printline statements (or the equivalent in whatever language you are working in) after\r\n			#8 and #9. When we run it again, our mystery will be smaller, such as ‘It crashed on thing #9.’ I\r\n			find that bearing in mind exactly what the mystery is at any point in time helps keep one focused.\r\n			When several people are working together under pressure on a problem it is easy to forget what\r\n			the most important mystery is.<br />\r\n			<br />\r\n			The key to divide and conquer as a debugging technique is the same as it is for algorithm design:\r\n			as long as you do a good job splitting the mystery in the middle, you won&#39;t have to split it too\r\n			many times, and you will be debugging quickly. But what is the middle of a mystery? There is\r\n			where true creativity and experience comes in.<br />\r\n			<br />\r\n			To a true beginner, the space of all possible errors looks like every line in the source code. You\r\n			don&#39;t have the vision you will later develop to see the other dimensions of the program, such as the\r\n			space of executed lines, the data structure, the memory management, the interaction with foreign\r\n			code, the code that is risky, and the code that is simple. For the experience programmer, these\r\n			other dimensions form an imperfect but very useful mental model of all the things that can go\r\n			wrong. Having that mental model is what helps one find the middle of the mystery effectively.<br />\r\n			<br />\r\n			Once you have evenly subdivided the space of all that can go wrong, you must try to decide in\r\n			which space the error lies. In the simple case where the mystery is: ‘Which single unknown line\r\n			makes my program crash?’, you can ask yourself: ‘Is the unknown line executed before or after\r\n			this line that I judge to be executed in the about the middle of the running program?’ Usually you\r\n			will not be so lucky as to know that the error exists in a single line, or even a single block. Often\r\n			the mystery will be more like: ‘Either there is a pointer in that graph that points to the wrong node,\r\n			or my algorithm that adds up the variables in that graph doesn&#39;t work.’ In that case you may have\r\n			to write a small program to check that the pointers in the graph are all correct in order to decide\r\n			which part of the subdivided mystery can be eliminated.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681105, 'theory', 1, 31, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:45:"2.How to Debug by Splitting the Problem Space";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, '');
INSERT INTO `content` (`id`, `name`, `data`, `parent_content_ID`, `lessons_ID`, `timestamp`, `ctg_type`, `active`, `previous_content_ID`, `options`, `metadata`, `scorm_version`, `publish`, `identifier`) VALUES
(33, '3. How to Remove an Error', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Remove an Error</h1>\r\n			I&#39;ve intentionally separated the act of examining a program&#39;s execution from the act of fixing an\r\n			error. But of course, debugging does also mean removing the bug. Ideally you will have perfect\r\n			understanding of the code and will reach an ‘A-Ha!’ moment where you perfectly see the error and\r\n			how to fix it. But since your program will often use insufficiently documented systems into which\r\n			you have no visibility, this is not always possible. In other cases the code is so complicated that\r\n			your understanding cannot be perfect.<br />\r\n			<br />\r\n			In fixing a bug, you want to make the smallest change that fixes the bug. You may see other things\r\n			that need improvement; but don&#39;t fix those at the same time. Attempt to employ the scientific\r\n			method of changing one thing and only one thing at a time. The best process for this is to be able\r\n			to easily reproduce the bug, then put your fix in place, and then rerun the program and observe\r\n			that the bug no longer exists. Of course, sometimes more than one line must be changed, but you\r\n			should still conceptually apply a single atomic change to fix the bug.<br />\r\n			<br />\r\n			Sometimes, there are really several bugs that look like one. It is up to you to define the bugs and\r\n			fix them one at a time. Sometimes it is unclear what the program should do or what the original\r\n			author intended. In this case, you must exercise your experience and judgment and assign your\r\n			own meaning to the code. Decide what it should do, and comment it or clarify it in some way and\r\n			then make the code conform to your meaning. This is an intermediate or advanced skill that is\r\n			sometimes harder than writing the original function in the first place, but the real world is often\r\n			messy. You may have to fix a system you cannot rewrite.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681155, 'theory', 1, 32, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:25:"3. How to Remove an Error";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(34, '4. How to Debug Using a Log', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Debug Using a Log</h1>\r\n			Logging is the practice of writing a system so that it produces a sequence of informative records,\r\n			called a log. Printlining is just producing a simple, usually temporary, log. Absolute beginners\r\n			must understand and use logs because their knowledge of the programming is limited; system architects\r\n			must understand and use logs because of the complexity of the system. The amount of information\r\n			that is provided by the log should be configurable, ideally while the program is running.<br />\r\n			<br />\r\n			In general, logs offer three basic advantages:<br />\r\n			<br />\r\n			• Logs can provide useful information about bugs that are hard to reproduce (such as those that\r\n			occur in the production environment but that cannot be reproduced in the test environment).<br />\r\n			• Logs can provide statistics and data relevant to performance, such as the time passing between\r\n			statements.<br />\r\n			• When configurable, logs allow general information to be captured in order to debug unanticipated\r\n			specific problems without having to modify and/or redeploy the code just to deal with\r\n			those specific problems.<br />\r\n			<br />\r\n			The amount to output into the log is always a compromise between information and brevity. Too\r\n			much information makes the log expensive and produces scroll blindness, making it hard to find\r\n			the information you need. Too little information and it may not contain what you need. For this\r\n			reason, making what is output configurable is very useful. Typically, each record in the log will\r\n			identify its position in the source code, the thread that executed it if applicable, the precise time of\r\n			execution, and, commonly, an additional useful piece of information, such as the value of some\r\n			variable, the amount of free memory, the number of data objects, etc. These log statements are\r\n			sprinkled throughout the source code but are particularly at major functionality points and around\r\n			risky code. Each statement can be assigned a level and will only output a record if the system is\r\n			currently configured to output that level. You should design the log statements to address problems\r\n			that you anticipate. Anticipate the need to measure performance.<br />\r\n			<br />\r\n			If you have a permanent log, printlining can now be done in terms of the log records, and some of\r\n			the debugging statements will probably be permanently added to the logging system.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681200, 'theory', 1, 33, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:27:"4. How to Debug Using a Log";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(35, '5. How to Understand Performance Problems', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Understand Performance Problems</h1>\r\n			Learning to understand the performance of a running system is unavoidable for the same reason\r\n			that learning debugging is. Even if you understand perfectly and precisely the cost of the code you\r\n			write, your code will make calls into other software systems that you have little control over or\r\n			visibility into. However, in practice performance problems are a little different and a little easier\r\n			than debugging in general.<br />\r\n			<br />\r\n			Suppose that you or your customers consider a system or a subsystem to be too slow. Before you\r\n			try to make it faster, you must build a mental model of why it is slow. To do this you can use a\r\n			profiling tool or a good log to figure out where the time or other resources are really being spent.\r\n			There is a famous dictum that 90% of the time will be spent in 10% of the code. I would add to\r\n			that the importance of input/output expense (I/O) to performance issues. Often most of the time is\r\n			spent in I/O in one way or another. Finding the expensive I/O and the expensive 10% of the code\r\n			is a good first step to building your mental model.<br />\r\n			<br />\r\n			There are many dimensions to the performance of a computer system, and many resources consumed.\r\n			The first resource to measure is wall--clock time, the total time that passes for the computation.\r\n			Logging wall-clock time is particularly valuable because it can inform about unpredictable\r\n			circumstance that arise in situations where other profiling is impractical. However, this may not\r\n			always represent the whole picture. Sometimes something that takes a little longer but doesn&#39;t burn\r\n			up so many processor seconds will be much better in computing environment you actually have to\r\n			deal with. Similarly, memory, network bandwidth, database or other server accesses may, in the\r\n			end, be far more expensive than processor seconds.<br />\r\n			<br />\r\n			Contention for shared resources that are synchronized can cause deadlock and starvation. Deadlock\r\n			is the inability to proceed because of improper synchronization or resource demands. Starvation\r\n			is the failure to schedule a component properly. If it can be at all anticipated, it is best to have\r\n			a way of measuring this contention from the start of your project. Even if this contention does not\r\n			occur, it is very helpful to be able to assert that with confidence.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681240, 'theory', 1, 34, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:41:"5. How to Understand Performance Problems";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(36, '6. How to Fix Performance Problems', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Fix Performance Problems</h1>\r\n			Most software projects can be made 10 to 100 times faster than they are at the time that they are\r\n			first released with relatively little effort. Under time-to-market pressure, it is both wise and effective\r\n			to choose a solution that gets the job done simply and quickly, but less efficiently than some\r\n			other solution. However, performance is a part of usability, and often it must eventually be considered\r\n			more carefully.<br />\r\n			<br />\r\n			The key to improving the performance of a very complicated system is to analyze it well enough\r\n			to find the bottlenecks, or places where most of the resources are consumed. There is not much\r\n			sense in optimizing a function that accounts for only 1% of the computation time. As a rule of\r\n			thumb you should think carefully before doing anything unless you think it is going to make the\r\n			system or a significant part of it at least twice as fast. There is usually a way to do this. Consider\r\n			the test and quality assurance effort that your change will require. Each change brings a test burden\r\n			with it, so it is much better to have a few big changes.<br />\r\n			<br />\r\n			After you&#39;ve made a two-fold improvement in something, you need to at least rethink and perhaps\r\n			reanalyze to discover the next-most-expensive bottleneck in the system, and attack that to get another\r\n			two-fold improvement.<br />\r\n			<br />\r\n			Often, the bottlenecks in performance will be an example of counting cows by counting legs and\r\n			dividing by four, instead of counting heads. For example, I&#39;ve made errors such as failing to provide\r\n			a relational database system with a proper index on a column I look up a lot, which probably\r\n			made it at least 20 times slower. Other examples include doing unnecessary I/O in inner loops,\r\n			leaving in debugging statements that are no longer needed, unnecessary memory allocation, and,\r\n			in particular, inexpert use of libraries and other subsystems that are often poorly documented with\r\n			respect to performance. This kind of improvement is sometimes called low-hanging fruit, meaning\r\n			that it can be easily picked to provide some benefit.<br />\r\n			<br />\r\n			What do you do when you start to run out of low-hanging fruit? Well, you can reach higher, or\r\n			chop the tree down. You can continue making small improvements or you can seriously redesign a\r\n			system or a subsystem. (This is a great opportunity to use your skills as a good programmer, not\r\n			only in the new design but also in convincing your boss that this is a good idea.) However, before\r\n			you argue for the redesign of a subsystem, you should ask yourself whether or not your proposal\r\n			will make it five to ten time better.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681340, 'theory', 1, 35, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:34:"6. How to Fix Performance Problems";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(37, '7. How to Optimize Loops', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Optimize Loops</h1>\r\n			Sometimes you&#39;ll encounter loops, or recursive functions, that take a long time to execute and are\r\n			bottlenecks in your product. Before you try to make the loop a little faster, spend a few minutes\r\n			considering if there is a way to remove it entirely. Would a different algorithm do? Could you\r\n			compute that while computing something else? If you can&#39;t find away around it, then you can optimize\r\n			the loop. This is simple; move stuff out. In the end, this will require not only ingenuity but\r\n			also an understanding of the expense of each kind of statement and expression. Here are some suggestions:<br />\r\n			<br />\r\n			• Remove floating point operations.<br />\r\n			• Don&#39;t allocate new memory blocks unnecessarily.<br />\r\n			• Fold constants together.<br />\r\n			• Move I/O into a buffer.<br />\r\n			• Try not to divide.<br />\r\n			• Try not to do expensive typecasts.<br />\r\n			• Move a pointer rather than recomputing indices.<br />\r\n			<br />\r\n			The cost of each of these operations depends on your specific system. On some systems compilers\r\n			and hardware do these things for you. Clear, efficient code is better than code that requires an understanding\r\n			of a particular platform.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681394, 'theory', 1, 36, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:24:"7. How to Optimize Loops";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(38, '8. How to Deal with I-O Expense', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Deal with I/O Expense</h1>\r\n			For a lot of problems, processors are fast compared to the cost of communicating with a hardware\r\n			device. This cost is usually abbreviated I/O, and can include network cost, disk I/O, database\r\n			queries, file I/O, and other use of some hardware not very close to the processor. Therefore building\r\n			a fast system is often more a question of improving I/O than improving the code in some tight\r\n			loop, or even improving an algorithm.<br />\r\n			<br />\r\n			There are two very fundamental techniques to improving I/O: caching and representation. Caching\r\n			is avoiding I/O (generally avoiding the reading of some abstract value) by storing a copy of that\r\n			value locally so no I/O is performed to get the value. The first key to caching is to make it crystal\r\n			clear which data is the master and which are copies. There is only one master---period. Caching\r\n			brings with it the danger that the copy is sometimes can&#39;t reflect changes to the master instantaneously.\r\n			Representation is the approach of making I/O cheaper by representing data more efficiently. This\r\n			is often in tension with other demands, like human readability and portability.<br />\r\n			<br />\r\n			Representations can often be improved by a factor of two or three from their first implementation.\r\n			Techniques for doing this include using a binary representation instead of one that is human readable,\r\n			transmitting a dictionary of symbols along with the data so that long symbols don&#39;t have to\r\n			be encoded, and, at the extreme, things like Huffman encoding.<br />\r\n			<br />\r\n			A third technique that is sometimes possible is to improve the locality of reference by pushing the\r\n			computation closer to the data. For instance, if you are reading some data from a database and\r\n			computing something simple from it, such as a summation, try to get the database server to do it\r\n			for you. This is highly dependent on the kind of system you&#39;re working with, but you should explore\r\n			it.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681441, 'theory', 1, 37, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:31:"8. How to Deal with I-O Expense";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(39, '9. How to Manage Memory', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Manage Memory</h1>\r\n			Memory is a precious resource that you can&#39;t afford to run out of. You can ignore it for a while but\r\n			eventually you will have to decide how to manage memory.<br />\r\n			<br />\r\n			Space that needs to persist beyond the scope of a single subroutine is often called heap allocated.\r\n			A chunk of memory is useless, hence garbage, when nothing refers to it. Depending on the system\r\n			you use, you may have to explicitly deallocate memory yourself when it is about to become\r\n			garbage. More often you may be able to use a system that provides a garbage collector. A garbage\r\n			collector notices garbage and frees its space without any action required by the programmer.\r\n			Garbage collection is wonderful: it lessens errors and increases code brevity and concision\r\n			cheaply. Use it when you can.<br />\r\n			<br />\r\n			But even with garbage collection, you can fill up all memory with garbage. A classic mistake is to\r\n			use a hash table as a cache and forget to remove the references in the hash table. Since the reference\r\n			remains, the referent is noncollectable but useless. This is called a memory leak. You should\r\n			look for and fix memory leaks early. If you have long running systems memory may never be exhausted\r\n			in testing but will be exhausted by the user.<br />\r\n			<br />\r\n			The creation of new objects is moderately expensive on any system. Memory allocated directly in\r\n			the local variables of a subroutine, however, is usually cheap because the policy for freeing it can\r\n			be very simple. You should avoid unnecessary object creation.<br />\r\n			<br />\r\n			An important case occurs when you can define an upper bound on the number of objects you will\r\n			need at one time. If these objects all take up the same amount of memory, you may be able to allocate\r\n			a single block of memory, or a buffer, to hold them all. The objects you need can be allocated\r\n			and released inside this buffer in a set rotation pattern, so it is sometimes called a ring buffer. This\r\n			is usually faster than heap allocation.<br />\r\n			<br />\r\n			Sometimes you have to explicitly free allocated space so it can be reallocated rather than rely on\r\n			garbage collection. Then you must apply careful intelligence to each chunk of allocated memory\r\n			and design a way for it to be deallocated at the appropriate time. The method may differ for each\r\n			kind of object you create. You must make sure that every execution of a memory allocating operation\r\n			is matched by a memory deallocating operation eventually. This is so difficult that programmers\r\n			often simply implement a rudimentary form or garbage collection, such as reference counting,\r\n			to do this for them.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681483, 'theory', 1, 38, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:23:"9. How to Manage Memory";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(40, '10. How to Deal with Intermittent Bugs', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Deal with Intermittent Bugs</h1>\r\n			The intermittent bug is a cousin of the 50-foot-invisible-scorpion-from-outer-space kind of bug.\r\n			This nightmare occurs so rarely that it is hard to observe, yet often enough that it can&#39;t be ignored.\r\n			You can&#39;t debug it because you can&#39;t find it.<br />\r\n			<br />\r\n			Although after eight hours you will start to doubt it, the intermittent bug has to obey the same laws\r\n			of logic everything else does. What makes it hard is that it occurs only under unknown conditions.\r\n			Try to record the circumstances under which the bug does occur, so that you can guess at what the\r\n			variability really is. The condition may be related to data values, such as ‘This only happens when\r\n			we enter Wyoming as a value.’ If that is not the source of variability, the next suspect should be\r\n			improperly synchronized concurrency.<br />\r\n			<br />\r\n			Try, try, try to reproduce the bug in a controlled way. If you can&#39;t reproduce it, set a trap for it by\r\n			building a logging system, a special one if you have to, that can log what you guess you need\r\n			when it really does occur. Resign yourself to that if the bug only occurs in production and not at\r\n			your whim, this is may be a long process. The hints that you get from the log may not provide the\r\n			solution but may give you enough information to improve the logging. The improved logging system\r\n			may take a long time to be put into production. Then, you have to wait for the bug to reoccur\r\n			to get more information. This cycle can go on for some time.<br />\r\n			<br />\r\n			The stupidest intermittent bug I ever created was in a multi-threaded implementation of a functional\r\n			programming language for a class project. I had very carefully insured correct concurrent\r\n			evaluation of the functional program, good utilization of all the CPUs available (eight, in this\r\n			case). I simply forgot to synchronize the garbage collector. The system could run a long time, often\r\n			finishing whatever task I began, before anything noticeable went wrong. I&#39;m ashamed to admit\r\n			I had begun to question the hardware before my mistake dawned on me.<br />\r\n			<br />\r\n			At work we recently had an intermittent bug that took us several weeks to find. We have multithreaded\r\n			application servers in Java™ behind Apache™ web servers. To maintain fast page turns,\r\n			we do all I/O in small set of four separate threads that are different than the page-turning threads.\r\n			Every once in a while these would apparently get ‘stuck’ and cease doing anything useful, so far\r\n			as our logging allowed us to tell, for hours. Since we had four threads, this was not in itself a giant\r\n			problem---unless all four got stuck. Then the queues emptied by these threads would quickly fill\r\n			up all available memory and crash our server. It took us about a week to figure this much out, and\r\n			we still didn&#39;t know what caused it, when it would happen, or even what the threads where doing\r\n			when they got ‘stuck’.<br />\r\n			<br />\r\n			This illustrates some risk associated with third-party software. We were using a licensed piece of\r\n			code that removed HTML tags from text. Due to its place of origin we affectionately referred to\r\n			this as ‘the French stripper.’ Although we had the source code (thank goodness!) we had not studied\r\n			it carefully until by turning up the logging on our servers we finally realized that the email\r\n			threads were getting stuck in the French stripper.<br />\r\n			<br />\r\n			The stripper performed well except on some long and unusual kinds of texts. On these texts, the\r\n			code was quadratic or worse. This means that the processing time was proportional to the square\r\n			of the length of the text. Had these texts occurred commonly, we would have found the bug right\r\n			away. If they had never occurred at all, we would never have had a problem. As it happens, it took\r\n			us weeks to finally understand and resolve the problem.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681628, 'theory', 1, 39, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:38:"10. How to Deal with Intermittent Bugs";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(41, '11. How to Learn Design Skills', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Learn Design Skills</h1>\r\n			To learn how to design software, study the action of a mentor by being physically present when\r\n			they are designing. Then study well-written pieces of software. After that, you can read some\r\n			books on the latest design techniques.<br />\r\n			<br />\r\n			Then you must do it yourself. Start with a small project. When you are finally done, consider how\r\n			the design failed or succeeded and how you diverged from your original conception. They move\r\n			on to larger projects, hopefully in conjunction with other people. Design is a matter of judgment\r\n			that takes years to acquire. A smart programmer can learn the basics adequately in two months and\r\n			can improve from there.<br />\r\n			<br />\r\n			It is natural and helpful to develop your own style, but remember that design is an art, not a science.\r\n			People who write books on the subject have a vested interest in making it seem scientific.<br />\r\n			Don&#39;t become dogmatic about particular design styles.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681748, 'theory', 1, 40, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:30:"11. How to Learn Design Skills";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(42, '12. How to Conduct Experiments', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Conduct Experiments</h1>\r\n			The late, great Edsger Dijkstra has eloquently explained that Computer Science is not an experimental\r\n			science[ExpCS] and doesn&#39;t depend on electronic computers. As he puts it referring to the\r\n			1960s[Knife],<br />\r\n			<br />\r\n			...the harm was done: the topic became known as ‘computer science’---which,\r\n			actually, is like referring to surgery as ‘knife science’ --- and it was firmly implanted\r\n			in people&#39;s minds that computing science is about machines and their peripheral\r\n			equipment.<br />\r\n			<br />\r\n			Programming ought not to be an experimental science, but most working programmers do not\r\n			have the luxury of engaging in what Dijkstra means by computing science. We must work in the\r\n			realm of experimentation, just as some, but not all, physicists do. If thirty years from now programming\r\n			can be performed without experimentation, it will be a great accomplishment of Computer\r\n			Science.<br />\r\n			<br />\r\n			The kinds of experiments you will have to perform include:<br />\r\n			<br />\r\n			• Testing systems with small examples to verify that they conform to the documentation or to\r\n			understand their response when there is no documentation,<br />\r\n			• Testing small code changes to see if they actually fix a bug,<br />\r\n			• Measuring the performance of a system under two different conditions due to imperfect\r\n			knowledge of there performance characteristics,<br />\r\n			• Checking the integrity of data, and<br />\r\n			• Collecting statistics that may hint at the solution to difficult or hard-to-repeat bugs.<br />\r\n			<br />\r\n			I don&#39;t think in this essay I can explain the design of experiments; you will have to study and practice.\r\n			However, I can offer two bits of advice.\r\n			First, try to be very clear about your hypothesis, or the assertion that you are trying to test. It also\r\n			helps to write the hypothesis down, especially if you find yourself confused or are working with\r\n			others.<br />\r\n			<br />\r\n			You will often find yourself having to design a series of experiments, each of which is based on\r\n			the knowledge gained from the last experiment. Therefore, you should design your experiments to\r\n			provide the most information possible. Unfortunately, this is in tension with keeping each experiment\r\n			simple---you will have to develop this judgment through experience.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681780, 'theory', 1, 41, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:30:"12. How to Conduct Experiments";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(43, '13. Why Estimation is Important', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Why Estimation is Important</h1>\r\n			To get a working software system in active use as quickly as possible requires not only planning\r\n			the development, but also planning the documentation, deployment, marketing. In a commercial\r\n			project it also requires sales and finance. Without predictability of the development time, it is impossible\r\n			to plan these effectively.<br />\r\n			<br />\r\n			Good estimation provides predictability. Managers love it, as well they should. The fact that it is\r\n			impossible, both theoretically and practically, to predict accurately how long it will take to develop\r\n			software is often lost on managers. We are asked to do this impossible thing all the time,\r\n			and we must face up to it honestly. However, it would be dishonest not to admit the impossibility\r\n			of this task, and when necessary, explain it. There is a lot of room for miscommunication about estimates,\r\n			as people have a startling tendency to think wishfully that the sentence:<br />\r\n			<br />\r\n			I estimate that, if I really understand the problem, it is about 50% likely that we\r\n			will be done in five weeks (if no one bothers us during that time).<br />\r\n			<br />\r\n			really means:<br />\r\n			<br />\r\n			I promise to have it all done five weeks from now.<br />\r\n			<br />\r\n			This common interpretation problem requires that you explicitly discuss what the estimate means\r\n			with your boss or customer as if they were a simpleton. Restate your assumptions, no matter how\r\n			obvious they seem to you.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681844, 'theory', 1, 42, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:31:"13. Why Estimation is Important";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(44, '14. How to Estimate Programming Time', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Estimate Programming Time</h1>\r\n			Estimation takes practice. It also takes labor. It takes so much labor it may be a good idea to estimate\r\n			the time it will take to make the estimate, especially if you are asked to estimate something\r\n			big.<br />\r\n			<br />\r\n			When asked to provide an estimate of something big, the most honest thing to do is to stall. Most\r\n			engineers are enthusiastic and eager to please, and stalling certainly will displease the stalled. But\r\n			an on-the-spot estimate probably won&#39;t be accurate and honest.<br />\r\n			<br />\r\n			While stalling, it may be possible to consider doing or prototyping the task. If political pressure\r\n			permits, this is the most accurate way of producing the estimate, and it makes real progress.<br />\r\n			<br />\r\n			When not possible to take the time for some investigation, you should first establish the meaning\r\n			of the estimate very clearly. Restate that meaning as the first and last part of your written estimate.\r\n			Prepare a written estimate by deconstructing the task into progressively smaller subtasks until each\r\n			small task is no more than a day; ideally at most in length. The most important thing is not to leave\r\n			anything out. For instance, documentation, testing, time for planning, time for communicating\r\n			with other groups, and vacation time are all very important. If you spend part of each day dealing\r\n			with knuckleheads, put a line item for that in the estimate. This gives your boss visibility into what\r\n			is using up your time at a minimum, and might get you more time.<br />\r\n			<br />\r\n			I know good engineers who pad estimates implicitly, but I recommend that you do not. One of the\r\n			results of padding is trust in you may be depleted. For instance, an engineer might estimate three\r\n			days for a task that she truly thinks will take one day. The engineer may plan to spend two days\r\n			documenting it, or two days working on some other useful project. But it will be detectable that\r\n			the task was done in only one day (if it turns out that way), and the appearance of slacking or overestimating\r\n			is born. It&#39;s far better to give proper visibility into what you are actually doing. If documentation\r\n			takes twice as long as coding and the estimate says so, tremendous advantage is gained\r\n			by making this visible to the manager.<br />\r\n			<br />\r\n			Pad explicitly instead. If a task will probably take one day---but might take ten days if your approach\r\n			doesn&#39;t work---note this somehow in the estimate if you can; if not, at least do an average\r\n			weighted by your estimates of the probabilities. Any risk factor that you can identify and assign an\r\n			estimate to should go into the schedule. One person is unlikely to be sick in any given week. But a\r\n			large project with many engineers will have some sick time; likewise vacation time. And what is\r\n			the probability of a mandatory company-wide training seminar? If it can be estimated, stick it in.\r\n			There are of course, unknown unknowns, or unk-unks. Unk-unks by definition cannot be estimated\r\n			individually. You can try to create a global line item for all unk-unks, or handle them in some\r\n			other way that you communicate to your boss. You cannot, however, let your boss forget that they\r\n			exist, and it is devilishly easy for an estimate to become a schedule without the unk-unks considered.\r\n			<br />\r\n			<br />\r\n			In a team environment, you should try to have the people who will do the work do the estimate,\r\n			and you should try to have team-wide consensus on estimates. People vary widely in skill, experience,\r\n			preparedness, and confidence. Calamity strikes when a strong programmer estimates for herself\r\n			and then weak programmers are held to this estimate. The act of having the whole team agree\r\n			on a line-by-line basis to the estimate clarifies the team understanding, as well as allowing the opportunity\r\n			for tactical reassignment of resources (for instance, shifting burden away from weaker\r\n			team members to stronger).<br />\r\n			<br />\r\n			If there are big risks that cannot be evaluated, it is your duty to state so forcefully enough that your\r\n			manager does not commit to them and then become embarrassed when the risk occurs. Hopefully\r\n			in such a case whatever is needed will be done to decrease the risk.<br />\r\n			<br />\r\n			If you can convince your company to use Extreme Programming, you will only have to estimate\r\n			relatively small things, and this is both more fun and more productive.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222681915, 'theory', 1, 43, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:36:"14. How to Estimate Programming Time";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(45, '15. How to Find Out Information', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Estimate Programming Time</h1>\r\n			The nature of what you need to know determines how you should find it.<br />\r\n			<br />\r\n			If you need information about concrete things that are objective and easy to verify, for example\r\n			the latest patch level of a software product, ask a large number of people politely by searching the\r\n			internet for it or by posting on a discussion group. Don&#39;t search on the internet for anything that\r\n			smacks of either opinion or subjective interpretation: the ratio of drivel to truth is too high.<br />\r\n			<br />\r\n			If you need general knowledge about something subjective the history of what people have\r\n			thought about it, go to the library (the physical building in which books are stored). For example,\r\n			to learn about math or mushrooms or mysticism, go to the library.<br />\r\n			<br />\r\n			If you need to know how to do something that is not trivial get two or three books on the subject\r\n			and read them. You might learn how to do something trivial, like install a software package, from\r\n			the Internet. You can even learn important things, like good programming technique, but you can\r\n			easily spend more time searching and sorting the results and attempting to divine the authority of\r\n			the results than it would take to read the pertinent part of a solid book.<br />\r\n			<br />\r\n			If you need information that no one else could be expected to know for example, ‘does this software\r\n			that is brand new work on gigantic data sets?’, you must still search the internet and the library.\r\n			After those options are completely exhausted, you may design an experiment to ascertain it.<br />\r\n			<br />\r\n			If you want an opinion or a value judgment that takes into account some unique circumstance, talk\r\n			to an expert. For instance, if you want to know whether or not it is a good idea to build a modern\r\n			database management system in LISP, you should talk to a LISP expert and a database expert.<br />\r\n			<br />\r\n			If you want to know how likely it is that a faster algorithm for a particular application exists that\r\n			has not yet been published, talk to someone working in that field.<br />\r\n			<br />\r\n			If you want to make a personal decision that only you can make like whether or not you should\r\n			start a business, try putting into writing a list of arguments for and against the idea. If that fails,\r\n			consider divination. Suppose you have studied the idea from all angles, have done all your homework,\r\n			and worked out all the consequences and pros and cons in your mind, and yet still remain\r\n			indecisive. You now must follow your heart and tell your brain to shut up. The multitude of available\r\n			divination techniques are very useful for determining your own semi-conscious desires, as\r\n			they each present a complete ambiguous and random pattern that your own subconscious will assign\r\n			meaning to.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222682006, 'theory', 1, 44, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:31:"15. How to Find Out Information";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(46, '16. How to Utilize People as Information Sour...', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Utilize People as Information\r\n			Sources</h1>\r\n			Respect every person&#39;s time and balance it against your own. Asking someone a question accomplishes\r\n			far more than just receiving the answer. The person learns about you, both by enjoying\r\n			your presence and hearing the particular question. You learn about the person in the same way,\r\n			and you may learn the answer you seek. This is usually far more important than your question.<br />\r\n			<br />\r\n			However, the value of this diminishes the more you do it. You are, after all, using the most precious\r\n			commodity a person has: their time. The benefits of communication must be weighed\r\n			against the costs. Furthermore, the particular costs and benefits derived differ from person to person.\r\n			I strongly believe that an executive of 100 people should spend five minutes a month talking\r\n			to each person in her organization, which would be about 5% of their time. But ten minutes might\r\n			be too much, and five minutes is too much if they have one thousand employees. The amount of\r\n			time you spend talking to each person in your organization depends on their role (more than their\r\n			position). You should talk to your boss more than your boss&#39;s boss, but you should talk to your\r\n			boss&#39;s boss a little. It may be uncomfortable, but I believe you have a duty to talk a little bit to all\r\n			your superiors, each month, no matter what.<br />\r\n			<br />\r\n			The basic rule is that everyone benefits from talking to you a little bit, and the more they talk to\r\n			you, the less benefit they derive. It is your job to provide them this benefit, and to get the benefit\r\n			of communicating with them, keeping the benefit in balance with the time spent.<br />\r\n			<br />\r\n			It is important to respect your own time. If talking to someone, even if it will cost them time, will\r\n			save you a great deal of time, then you should do it unless you think their time is more valuable\r\n			than yours, to the tribe, by that factor.<br />\r\n			<br />\r\n			A strange example of this is the summer intern. A summer intern in a highly technical position\r\n			can&#39;t be expected to accomplish too much; they can be expected to pester the hell out of everybody\r\n			there. So why is this tolerated? Because the pestered are receiving something important from the\r\n			intern. They get a chance to showoff a little. They get a chance to hear some new ideas, maybe;\r\n			they get a chance to see things from a different perspective. They may also be trying to recruit the\r\n			intern, but even if this is not the case there is much to gain.<br />\r\n			<br />\r\n			You should ask people for a little bit of their wisdom and judgment whenever you honestly believe\r\n			they have something to say. This flatters them and you will learn something and teach them\r\n			something. A good programmer does not often need the advice of a Vice President of Sales, but if\r\n			you ever do, you be sure to ask for it. I once asked to listen in on a few sales calls to better understand\r\n			the job of our sales staff. This took no more than 30 minutes but I think that small effort\r\n			made an impression on the sales force.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222682040, 'theory', 1, 45, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:53:"16. 2.4. How to Utilize People as Information Sources";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(47, '17.  How to Document Wisely', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Document Wisely</h1>\r\n			Life is too short to write crap nobody will read; if you write crap, nobody will read it. Therefore a\r\n			little good documentation is best. Managers often don&#39;t understand this, because even bad documentation\r\n			gives them a false sense of security that they are not dependent on their programmers. If\r\n			someone absolutely insists that you write truly useless documentation, say ``yes&#39;&#39; and quietly begin\r\n			looking for a better job.<br />\r\n			<br />\r\n			There&#39;s nothing quite as effective as putting an accurate estimate of the amount of time it will take\r\n			to produce good documentation into an estimate to slacken the demand for documentation. The\r\n			truth is cold and hard: documentation, like testing, can take many times longer than developing\r\n			code.<br />\r\n			<br />\r\n			Writing good documentation is, first of all, good writing. I suggest you find books on writing,\r\n			study them, and practice. But even if you are a lousy writer or have poor command of the language\r\n			in which you must document, the Golden Rule is all you really need: ``Do unto others as\r\n			you would have them do unto you.&#39;&#39; Take time to really think about who will be reading your documentation,\r\n			what they need to get out of it, and how you can teach that to them. If you do that, you will be an above average documentation writer, and a good programmer.<br />\r\n			<br />\r\n			When it comes to actually documenting code itself, as opposed to producing documents that can\r\n			actually be read by non-programmers, the best programmers I&#39;ve ever known hold a universal sentiment:\r\n			write self-explanatory code and only document code in the places that you cannot make it\r\n			clear by writing the code itself. There are two good reasons for this. First, anyone who needs to\r\n			see code-level documentation will in most cases be able to and prefer to read the code anyway.\r\n			Admittedly, this seems easier to the experienced programmer than to the beginner. More importantly\r\n			however, is that the code and the documentation cannot be inconsistent if there is no documentation.\r\n			The source code can at worst be wrong and confusing. The documentation, if not written\r\n			perfectly, can lie, and that is a thousand times worse.<br />\r\n			<br />\r\n			This does not make it easier on the responsible programmer. How does one write self-explanatory\r\n			code? What does that even mean? It means:<br />\r\n			<br />\r\n			• Writing code knowing that someone will have to read it;<br />\r\n			• Applying the golden rule;<br />\r\n			• Choosing a solution that is straightforward, even if you could get by with another solution\r\n			faster;<br />\r\n			• Sacrificing small optimizations that obfuscate the code;<br />\r\n			• Thinking about the reader and spending some of your precious time to make it easier on her;\r\n			and<br />\r\n			• Not ever using a function name like ``foo&#39;&#39;,``bar&#39;&#39;, or ``doIt&#39;&#39;!\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222682065, 'theory', 1, 46, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:27:"17.  How to Document Wisely";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, '');
INSERT INTO `content` (`id`, `name`, `data`, `parent_content_ID`, `lessons_ID`, `timestamp`, `ctg_type`, `active`, `previous_content_ID`, `options`, `metadata`, `scorm_version`, `publish`, `identifier`) VALUES
(48, '18. How to Work with Poor Code', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Work with Poor Code</h1>\r\n			It is very common to have to work with poor quality code that someone else has written. Don&#39;t\r\n			think too poorly of them, however, until you have walked in their shoes. They may have been\r\n			asked very consciously to get something done quickly to meet schedule pressure. Regardless, in\r\n			order to work with unclear code you must understand it. To understand it takes learning time, and\r\n			that time will have to come out of some schedule, somewhere, and you must insist on it. To understand\r\n			it, you will have to read the source code. You will probably have to experiment with it.<br />\r\n			<br />\r\n			This is a good time to document, even if it is only for yourself, because the act of trying to document\r\n			the code will force you to consider angles you might not have considered, and the resulting\r\n			document may be useful. While you&#39;re doing this, consider what it would take to rewrite some or\r\n			all of the code. Would it actually save time to rewrite some of it? Could you trust it better if you\r\n			rewrote it? Be careful of arrogance here. If you rewrite it, it will be easier for you to deal with, but\r\n			will it really be easier for the next person who has to read it? If you rewrite it, what will the test\r\n			burden be? Will the need to re-test it outweigh any benefits that might be gained?<br />\r\n			<br />\r\n			In any estimate that you make for work against code you didn&#39;t write, the quality of that code\r\n			should affect your perception of the risk of problems and unk-unks.<br />\r\n			<br />\r\n			It is important to remember that abstraction and encapsulation, two of a programmer&#39;s best tools,are particularly applicable to lousy code. You may not be able to redesign a large block of code,\r\n			but if you can add a certain amount of abstraction to it you can obtain some of the benefits of a\r\n			good design without reworking the whole mess. In particular, you can try to wall off the parts that\r\n			are particularly bad so that they may be redesigned independently.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222682093, 'theory', 1, 47, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:30:"18. How to Work with Poor Code";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(49, '19. How to Use Source Code Control', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Use Source Code Control</h1>\r\n			Source code control systems let you manage projects effectively. They&#39;re very useful for one person\r\n			and essential for a group. They track all changes in different versions so that no code is ever\r\n			lost and meaning can be assigned to changes. One can create throw-away and debugging code\r\n			with confidence with a source code control system, since the code you modify is kept carefully\r\n			separate from committed, official code that will be shared with the team or released.<br />\r\n			<br />\r\n			I was late to appreciate the benefits of source code control systems but now I wouldn&#39;t live without\r\n			one even on a one-person project. Generally they are necessary when you have team working on\r\n			the same code base. However, they have another great advantage: they encourage thinking about\r\n			the code as a growing, organic system. Since each change is marked as a new revision with a new\r\n			name or number, one begins to think of the software as a visibly progressive series of improvements.\r\n			I think this is especially useful for beginners.<br />\r\n			<br />\r\n			A good technique for using a source code control system is to stay within a few days of being upto-\r\n			date at all time. Code that can&#39;t be finished in a few days is checked in, but in a way that it is inactive\r\n			and will not be called, or in a branch of its own, and therefore not create any problems for\r\n			anybody else. Committing a mistake that slows down your teammates is a serious error; it is often\r\n			taboo.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222682222, 'theory', 1, 48, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:34:"19. How to Use Source Code Control";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(50, '20. How to Unit Test', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Unit Test</h1>\r\n			Unit testing, the testing of an individual piece of coded functionality by the team that wrote it, is a\r\n			part of coding, not something different from it. Part of designing the code is designing how it will\r\n			be tested. You should write down a test plan, even if it is only one sentence. Sometimes the test\r\n			will be simple: ``Does the button look good?&#39;&#39; Sometimes it will be complex: ``Did this matching\r\n			algorithm return precisely the correct matches?&#39;&#39;<br />\r\n			<br />\r\n			Use assertion checking and test drivers whenever possible. This not only catches bugs early, but is\r\n			very useful later on and lets you eliminate mysteries that you would otherwise have to worry\r\n			about.<br />\r\n			<br />\r\n			The Extreme Programming developers are writing extensively on unit testing effectively; I can do\r\n			no better than to recommend their writings.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222682250, 'theory', 1, 49, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:20:"20. How to Unit Test";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(51, '21. Take Breaks when Stumped', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Take Breaks when Stumped</h1>\r\n			When stumped, take a break. I sometimes meditate for 15 minutes when stumped and the problem\r\n			magically unravels when I come back to it. A night&#39;s sleep sometimes does the same thing on a\r\n			larger scale. It&#39;s possible that temporarily switching to any other activity may work.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222682295, 'theory', 1, 50, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:28:"21. Take Breaks when Stumped";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(52, '22. How to Recognize When to Go Home', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Recognize When to Go Home</h1>\r\n			Computer programming is an activity that is also a culture. The unfortunate fact is that it is not a culture that values mental or physical health very much. For both cultural/historical reasons (the\r\n			need to work at night on unloaded computers, for example) and because of overwhelming timeto-\r\n			market pressure and the scarcity of programmers, computer programmers are traditionally overworked.\r\n			I don&#39;t think you can trust all the stories you hear, but I think 60 hours a week is common,\r\n			and 50 is pretty much a minimum. This means that often much more than that is required. This is\r\n			serious problem for a good programmer, who is responsible not only for themselves but their\r\n			teammates as well. You have to recognize when to go home, and sometimes when to suggest that\r\n			other people go home. There can&#39;t be any fixed rules for solving this problem, anymore than there\r\n			can be fixed rules for raising a child, for the same reason---every human being is different.<br />\r\n			<br />\r\n			Beyond 60 hours a week is an extraordinary effort for me, which I can apply for short periods of\r\n			time (about one week), and that is sometimes expected of me. I don&#39;t know if it is fair to expect 60\r\n			hours of work from a person; I don&#39;t even know if 40 is fair. I am sure, however, that it is stupid to\r\n			work so much that you are getting little out of that extra hour you work. For me personally, that&#39;s\r\n			any more than 60 hours a week. I personally think a programmer should exercise noblesse oblige\r\n			and shoulder a heavy burden. However, it is not a programmer&#39;s duty to be a patsy. The sad fact is\r\n			programmers are often asked to be patsies in order to put on a show for somebody, for example a\r\n			manager trying to impress an executive. Programmers often succumb to this because they are eager\r\n			to please and not very good at saying no. There are four defenses against this:<br />\r\n			<br />\r\n			• Communicate as much as possible with everyone in the company so that no one can mislead\r\n			the executives about what is going on,<br />\r\n			• Learn to estimate and schedule defensively and explicitly and give everyone visibility into\r\n			what the schedule is and where it stands,<br />\r\n			• Learn to say no, and say no as a team when necessary, and<br />\r\n			• Quit if you have to.<br />\r\n			<br />\r\n			Most programmers are good programmers, and good programmers want to get a lot done. To do\r\n			that, they have to manage their time effectively. There is a certain amount of mental inertia associated\r\n			with getting warmed-up to a problem and deeply involved in it. Many programmers find they\r\n			work best when they have long, uninterrupted blocks of time in which to get warmed-up and concentrate.\r\n			However, people must sleep and perform other duties. Each person needs to find a way to\r\n			satisfy both their human rhythm and their work rhythm. Each programmer needs to do whatever it\r\n			takes to procure efficient work periods, such as reserving certain days in which you will attend\r\n			only the most critical meetings.<br />\r\n			<br />\r\n			Since I have children, I try to spend evenings with them sometimes. The rhythm that works best\r\n			for me is to work a very long day, sleep in the office or near the office (I have a long commute\r\n			from home to work) then go home early enough the next day to spend time with my children before\r\n			they go to bed. I am not comfortable with this, but it is the best compromise I have been able\r\n			to work out. Go home if you have a contagious disease. You should go home if you are thinking\r\n			suicidal thoughts. You should take a break or go home if you think homicidal thoughts for more\r\n			than a few seconds. You should send someone home if they show serious mental malfunctioning\r\n			or signs of mental illness beyond mild depression. If you are tempted to be dishonest or deceptive\r\n			in a way that you normally are not due to fatigue, you should take a break. Don&#39;t use cocaine or\r\n			amphetamines to combat fatigue. Don&#39;t abuse caffeine.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222682309, 'theory', 1, 51, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:36:"22. How to Recognize When to Go Home";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(53, '23. How to Deal with Difficult People', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Deal with Difficult People</h1>\r\n			You will probably have to deal with difficult people. You may even be a difficult person yourself.\r\n			If you are the kind of person who has a lot of conflicts with coworkers and authority figures, you\r\n			should cherish the independence this implies, but work on your interpersonal skills without sacrificing\r\n			your intelligence or principles.<br />\r\n			<br />\r\n			This can be very disturbing to some programmers who have no experience in this sort of thing and\r\n			whose previous life experience has taught them patterns of behavior that are not useful in the\r\n			workplace. Difficult people are often inured to disagreement and they are less affected by social\r\n			pressure to compromise than others. The key is to respect them appropriately, which is more than\r\n			you will want to but not as much as they might want.<br />\r\n			<br />\r\n			Programmers have to work together as a team. When disagreement arises, it must be resolved\r\n			somehow, it cannot be ducked for long. Difficult people are often extremely intelligent and have\r\n			something very useful to say. It is critical that you listen and understand the difficult person without\r\n			prejudice caused by the person. A failure to communicate is often the basis of disagreement\r\n			but it can sometimes be removed with great patience. Try to keep this communication cool and\r\n			cordial, and don&#39;t accept any baits for greater conflict that may be offered. After a reasonable period\r\n			of trying to understand, make a decision.<br />\r\n			<br />\r\n			Don&#39;t let a bully force you to do something you don&#39;t agree with. If you are the leader, do what you\r\n			think is best. Don&#39;t make a decision for any personal reasons, and be prepared to explain the reasons\r\n			for your decision. If you are a teammate with a difficult person, don&#39;t let the leader&#39;s decision\r\n			have any personal impact. If it doesn&#39;t go your way, do it the other way whole-heartedly.<br />\r\n			<br />\r\n			Difficult people do change and improve. I&#39;ve seen it with my own eyes, but it is very rare. However,\r\n			everyone has transitory ups and downs.<br />\r\n			<br />\r\n			One of the challenges that every programmer but especially leaders face is keeping the difficult\r\n			person fully engaged. They are more prone to duck work and resist passively than others.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 3, 1222682322, 'theory', 1, 52, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:37:"23. How to Deal with Difficult People";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(54, 'Small self-assesment test', '', 0, 3, 1224024300, 'tests', 1, 53, 'b:0;', 'a:5:{s:5:"title";s:22:"Small programming test";s:7:"creator";s:16:"Professor eFront";s:9:"publisher";s:16:"Professor eFront";s:11:"contributor";s:16:"Professor eFront";s:4:"date";s:10:"2008/10/15";}', NULL, 1, ''),
(55, 'How to Know When to Apply Fancy Computer Science', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Know When to Apply Fancy Computer\r\n			Science</h1>\r\n			There is a body of knowledge about algorithms, data structures, mathematics, and other gee-whiz\r\n			stuff that most programmers know about but rarely use. In practice, this wonderful stuff is too\r\n			complicated and generally unnecessary. There is no point in improving an algorithm when most of\r\n			your time is spent making inefficient database calls, for instance. An unfortunate amount of programming\r\n			consists of getting systems to talk to each other and using very simple data structures to\r\n			build a nice user interface.<br />\r\n			<br />\r\n			When is high technology the appropriate technology? When should you crack a book to get something\r\n			other than a run-of-the-mill algorithm? It is sometimes useful to do this but it should be evaluated\r\n			carefully.<br />\r\n			<br />\r\n			The three most important considerations for the potential computer science technique are:<br />\r\n			<br />\r\n			• Is it well encapsulated so that the risk to other systems is low and the overall increase in complexity\r\n			and maintenance cost is low?<br />\r\n			<br />\r\n			• Is the benefit startling (for example, a factor of two in a mature system or a factor of ten in a\r\n			new system)?<br />\r\n			<br />\r\n			• Will you be able to test and evaluate it effectively?<br />\r\n			<br />\r\n			If a well-isolated algorithm that uses a slightly fancy algorithm can decrease hardware cost or increase\r\n			performance by a factor of two across an entire system, then it would be criminal not to\r\n			consider it. One of the keys to arguing for such an approach is to show that the risk is really quite\r\n			low, since the proposed technology has probably been well studied, the only issue is the risk of integration.\r\n			Here a programmer&#39;s experience and judgment can truly synergize with the fancy technology\r\n			to make integration easy.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222701030, 'theory', 1, 57, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:48:"How to Know When to Apply Fancy Computer Science";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(56, 'How to Talk to Non-Engineers', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Talk to Non-Engineers</h1>\r\n			Engineers and programmers in particular are generally recognized by popular culture as being different\r\n			from other people. This implies that other people are different from us. This is worth bearing\r\n			in mind when communicating with non-engineers; you should always understand the audience.<br />\r\n			<br />\r\n			Non-engineers are smart, but not as grounded in creating technical things as we are. We make\r\n			things. They sell things and handle things and count things and manage things, but they are not experts\r\n			on making things. They are not as good at working together on teams as engineers are (there\r\n			are no doubt exceptions.) Their social skills are generally as good as or better than engineers in non-team environments, but their work does not always demand that they practice the kind of intimate,\r\n			precise communication and careful subdivisions of tasks that we do.<br />\r\n			<br />\r\n			Non-engineers may be too eager to please and they may be intimidated by you. Just like us, they\r\n			may say ‘yes’ without really meaning it to please you or because they are a little scared of you,\r\n			and then not stand behind their words.<br />\r\n			<br />\r\n			Non-programmers can understand technical things but they do not have the thing that is so hard\r\n			even for us---technical judgment. They do understand how technology works, but they cannot understand\r\n			why a certain approach would take three months and another one three days. (After all,\r\n			programmers are anecdotally horrible at this kind of estimation as well.) This represents a great\r\n			opportunity to synergize with them.<br />\r\n			<br />\r\n			When talking to your team you will, without thinking, use a sort of shorthand, an abbreviated language\r\n			that is effective because you will have much shared experience about technology in general\r\n			and your product in particular. It takes some effort not to use this shorthand with those that don&#39;t\r\n			have that shared experience, especially when members of your own team are present. This vocabulary\r\n			create a wall between you and those that do not share it, and, even worse, wastes their time.<br />\r\n			<br />\r\n			With your team, the basic assumptions and goals do not need to be restated often, and most conversation\r\n			focuses on the details. With outsiders, it must be the other way around. They may not\r\n			understand things you take for granted. Since you take them for granted and don&#39;t repeat them, you\r\n			can leave a conversation with an outsider thinking that you understand each other when really\r\n			there is a large misunderstanding. You should assume that you will miscommunicate and watch\r\n			carefully to find this miscommunication. Try to get them to summarize or paraphrase what you are\r\n			saying to make sure they understand. If you have the opportunity to meet with them often, spend a\r\n			little bit of time asking if you you are communicating effectively, and how you can do it better. If\r\n			there is a problem in communication, seek to alter your own practices before becoming frustrated\r\n			with theirs.<br />\r\n			<br />\r\n			I love working with non-engineers. It provides great opportunities to learn and to teach. You can\r\n			often lead by example, in terms of the clarity of your communication. Engineers are trained to\r\n			bring order out of chaos, to bring clarity out of confusion, and non-engineers like this about us.\r\n			Because we have technical judgment and can usually understand business issues, we can often\r\n			find a simple solution to a problem.<br />\r\n			<br />\r\n			Often non-engineers propose solutions that they think will make it easier on us out of kindness and\r\n			a desire to do the right thing, when in fact a much better overall solution exists which can only be\r\n			seen by synergizing the outsiders view with your technical judgment. I personally like Extreme\r\n			Programming because it addresses this inefficiency; by marrying the estimation quickly to the\r\n			idea, it makes it easier to find the idea that is the best combination of cost and benefit.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222701139, 'theory', 1, 55, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:28:"How to Talk to Non-Engineers";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(57, 'How to Evaluate Interviewees', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Evaluate Interviewees</h1>\r\n			Evaluating potential employees is not given the energy it deserves. A bad hire, like a bad marriage,\r\n			is terrible. A significant portion of everyone&#39;s energy should be devoted to recruitment,\r\n			though this is rarely done.<br />\r\n			<br />\r\n			There are different interviewing styles. Some are torturous, designed to put the candidate under a\r\n			great deal of stress. This serves a very valuable purpose of possibly revealing character flaws and\r\n			weaknesses under stress. Candidates are no more honest with interviewers than they are with\r\n			themselves, and the human capacity for self-deception is astonishing.<br />\r\n			<br />\r\n			You should, at a minimum, give the candidate the equivalent of an oral examination on the technical\r\n			skills for two hours. With practice, you will be able to quickly cover what they know and\r\n			quickly retract from what they don&#39;t know to mark out the boundary. Interviewees will respect\r\n			this. I have several times heard interviewees say that the quality of the examination was one of\r\n			their motivations for choosing a company. Good people want to be hired for their skills, not where\r\n			they worked last or what school they went to or some other inessential characteristic.<br />\r\n			<br />\r\n			In doing this, you should also evaluate their ability to learn, which is far more important than what\r\n			they know. You should also watch for the whiff of brimstone that is given off by difficult people.\r\n			You may be able to recognize it by comparing notes after the interview, but in the heat of the interview\r\n			it is hard to recognize. How well people communicate and work with people is more important\r\n			than being up on the latest programming language.<br />\r\n			<br />\r\n			A reader has had good luck using a ‘take-home’ test for interviewees. This has the advantage that\r\n			can uncover the interviewee that can present themselves well but can&#39;t really code---and there are\r\n			many such people. I personally have not tried this technique, but it sounds sensible.<br />\r\n			<br />\r\n			Finally, interviewing is also a process of selling. You should be selling your company or project to\r\n			the candidate. However, you are talking to a programmer, so don&#39;t try to color the truth. Start off\r\n			with the bad stuff, then finish strong with the good stuff.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222700979, 'theory', 1, 58, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:28:"How to Evaluate Interviewees";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(58, 'How to Grow Professionally', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Grow Professionally</h1>\r\n			Assume responsibility in excess of your authority. Play the role that you desire. Express appreciation\r\n			for people&#39;s contribution to the success of the larger organization, as well as things as that\r\n			help you personally.<br />\r\n			<br />\r\n			If you want to become a team leader, instigate the formation of consensus. If you want to become\r\n			a manager, take responsibility for the schedule. You can usually do this comfortably while working\r\n			with a leader or a manager, since this frees them up to take greater responsibility. If that is too\r\n			much to try, do it a little at a time.<br />\r\n			<br />\r\n			Evaluate yourself. If you want to become a better programmer, ask someone you admire how you\r\n			can become like them. You can also ask your boss, who will know less but have a greater impact\r\n			on your career.<br />\r\n			<br />\r\n			Plan ways to learn new skills, both the trivial technical kind, like learning a new software system,\r\n			and the hard social kind, like writing well, by integrating them into your work.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222700901, 'theory', 1, 59, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:26:"How to Grow Professionally";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(59, 'How to Make a Buy vs. Build Decision', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Make a Buy vs. Build Decision</h1>\r\n			An entrepreneurial company or project that is trying to accomplish something with software has to\r\n			constantly make so-called buy vs. build decisions. This turn of phrase is unfortunate in two ways:<br />\r\n			<br />\r\n			it seems to ignore open-source and free software which is not necessarily bought. Even more importantly,\r\n			it should perhaps be called an obtain and integrate vs. build here and integrate decision\r\n			because the cost of integration must be considered. This requires a great combination of business,\r\n			management, and engineering savvy.<br />\r\n			<br />\r\n			• How well do your needs match those for which it was designed?<br />\r\n			• What portion of what you buy will you need?<br />\r\n			• What is the cost of evaluating the integration?<br />\r\n			• What is the cost of integration?<br />\r\n			• What is the cost of evaluating the integration?<br />\r\n			• Will buying increase or decrease long term maintenance costs?<br />\r\n			• Will building it put you in a business position you don&#39;t want to be in?<br />\r\n			<br />\r\n			You should think twice before building something that is big enough to serve as the basis for an\r\n			entire other business. Such ideas are often proposed by bright and optimistic people that will have\r\n			a lot to contribute to your team. If their idea is compelling, you may wish to change your business\r\n			plan; but do not invest in a solution bigger than your own project without conscious thought.<br />\r\n			<br />\r\n			After considering these questions, you should perhaps prepare two draft project plans, one for\r\n			building and one for buying. This will force you to consider the integration costs. You should also consider the long term maintenance costs of both solutions. To estimate the integration costs, you\r\n			will have to do a thorough evaluation of the software before you buy it. If you can&#39;t evaluate it,\r\n			you will assume an unreasonable risk in buying it and you should decide against buying that particular\r\n			product. If there are several buy decisions under consideration, some energy will have to be\r\n			spent evaluating each.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222700827, 'theory', 1, 61, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:36:"How to Make a Buy vs. Build Decision";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(60, 'How to Manage Software System Dependence', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Manage Software System Dependence</h1>\r\n			Modern software systems tend to depend on a large number of components that may not be directly\r\n			under your control. This increases productivity through synergy and reuse. However, each\r\n			component brings with it some problems:<br />\r\n			<br />\r\n			• How will you fix bugs in the component?<br />\r\n			<br />\r\n			• Does the component restrict you to particular hardware or software systems?<br />\r\n			<br />\r\n			• What will you do if the component fails completely?<br />\r\n			<br />\r\n			It is always best to encapsulate the component in some way so that it is isolated and so that it can\r\n			be swapped out. If the component proves to be completely unworkable, you may be able to get a\r\n			different one, but you may have to write your own. Encapsulation is not portability, but it makes\r\n			porting easier, which is almost as good.<br />\r\n			<br />\r\n			Having the source code for a component decreases the risk by a factor of four. With source code,\r\n			you can evaluate it easier, debug it easier, find workarounds easier, and make fixes easier. If you\r\n			make fixes, you should give them to the owner of the component and get the fixes incorporated\r\n			into an official release; otherwise you will uncomfortably have to maintain an unofficial version .\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222700632, 'theory', 1, 62, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:40:"How to Manage Software System Dependence";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(61, 'How to Decide if Software is Too Immature', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Decide if Software is Too Immature</h1>\r\n			Using software other people wrote is one of the most effective ways to quickly build a solid system.\r\n			It should not be discouraged, but the risks associated with it must be examined. One of the\r\n			biggest risks is the period of bugginess and near inoperability that is often associated with software\r\n			before it matures, through usage, into a usable product. Before you consider integrating with\r\n			a software system, whether created in house or by a third party, it is very important to consider if it\r\n			is really mature enough to be used. Here are ten questions you should ask yourself about it:<br />\r\n			<br />\r\n			1. Is it vapor? (Promises are very immature).<br />\r\n			<br />\r\n			2. Is there an accessible body of lore about the software?<br />\r\n			<br />\r\n			3. Are you the first user?<br />\r\n			<br />\r\n			4. Is there a strong incentive for continuation?<br />\r\n			<br />\r\n			5. Has it had a maintenance effort?<br />\r\n			<br />\r\n			6. Will it survive defection of the current maintainers?<br />\r\n			<br />\r\n			7. Is there a seasoned alternative at least half as good?<br />\r\n			<br />\r\n			8. Is it known to your tribe or company?<br />\r\n			<br />\r\n			9. Is it desirable to your tribe or company?<br />\r\n			<br />\r\n			10. Can you hire people to work on it even if it is bad?<br />\r\n			<br />\r\n			A little consideration of these criteria demonstrates the great value of well-established free software\r\n			and open-source software in reducing risk to the entrepreneur.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222700729, 'theory', 1, 60, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:41:"How to Decide if Software is Too Immature";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(62, 'How to Tradeoff Quality Against Development Time', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Tradeoff Quality Against Development\r\n			Time</h1>\r\n			Software development is always a compromise between what the project does and getting the\r\n			project done. But you may be asked to tradeoff quality to speed the deployment of a project in a\r\n			way that offends your engineering sensibilities or business sensibilities. For example, you may be\r\n			asked to do something that is a poor software engineering practice and that will lead to a lot of\r\n			maintenance problems.<br />\r\n			<br />\r\n			If this happens your first responsibility is to inform your team and to clearly explain the cost of the\r\n			decrease in quality. After all, your understanding of it should be much better than your boss&#39;s understanding.\r\n			Make it clear what is being lost and what is being gained, and at what cost the lost ground will be regained in the next cycle. In this, the visibility provided by a good project plan\r\n			should be helpful. If the quality tradeoff affects the quality assurance effort, point that out (both to\r\n			your boss and quality assurance people). If the quality tradeoff will lead to more bugs being reported\r\n			after the quality assurance period, point that out.<br />\r\n			<br />\r\n			If she still insists you should try to isolate the shoddiness into particular components that you can\r\n			plan to rewrite or improve in the next cycle. Explain this to your team so that they can plan for it.\r\n			NinjaProgrammer at Slashdot sent in this gem:<br />\r\n			<br />\r\n			Remember that a good design will be resillient against poor code implementations.<br />\r\n			If good interfaces and abstractions exist throughout the code, then the\r\n			eventual rewrites will be far more painless. If it is hard to write clear code that is\r\n			hard to fix, consider what is wrong with the core design that is causing this.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222700451, 'theory', 1, 63, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:48:"How to Tradeoff Quality Against Development Time";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(63, 'How to Disagree Honestly and Get Away with It', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Disagree Honestly and Get Away\r\n			with It</h1>\r\n			Disagreement is a great opportunity to make a good decision, but it should be handled delicately.\r\n			Hopefully you feel that you have expressed your thoughts adequately and been heard before the\r\n			decision is made. In that case there is nothing more to say, and you should decide whether you\r\n			will stand behind the decision even though you disagree with it. If you can support this decision\r\n			even though you disagree, say so. This shows how valuable you are because you are independent\r\n			and are not a yes-man, but respectful of the decision and a team player.<br />\r\n			<br />\r\n			Sometimes a decision that you disagree with will be made when the decision makers did not have\r\n			the full benefit of you opinion. You should then evaluate whether to raise the issue on the basis of\r\n			the benefit to the company or tribe. If it is a small mistake in your opinion, it may not be worth reconsidering.\r\n			If it is a large mistake in you opinion, then of course you must present an argument.<br />\r\n			<br />\r\n			Usually, this is not a problem. In some stressful circumstances and with some personality types\r\n			this can lead to things being taken personally. For instance, some very good programmers lack the\r\n			confidence needed to challenge a decision even when they have good reason to believe it is wrong.\r\n			In the worst of circumstances the decision maker is insecure and takes it as a personal challenge to\r\n			their authority. It is best to remember that in such circumstances people react with the reptilian\r\n			part of their brains. You should present your argument in private, and try to show how new knowledge\r\n			changes the basis on which the decision was made.<br />\r\n			<br />\r\n			Whether the decision is reversed or not, you must remember that you will never be able to say ‘I\r\n			told you so!’ since the alternate decision was never fully explored.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222700055, 'theory', 1, 64, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:45:"How to Disagree Honestly and Get Away with It";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(64, 'How to Communicate the Right Amount', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Communicate the Right Amount</h1>\r\n			Carefully consider the cost of a meeting; it costs its duration multiplied by the number of participants. Meetings are sometimes necessary, but smaller is usually better. The quality of communication\r\n			in small meetings is better, and less time overall is wasted. If any one person is bored at a\r\n			meeting, take this as a sign that the meeting should be smaller.<br />\r\n			<br />\r\n			Everything possible should be done to encourage informal communication. More useful work is\r\n			done during lunches with colleagues than during any other time. It is a shame that more companies\r\n			do not recognize nor support this fact.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222699559, 'theory', 1, 65, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:35:"How to Communicate the Right Amount";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(65, '12. How to Manage Consultants', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Manage Consultants</h1>\r\n			Use consultants, but don&#39;t rely on them. They are wonderful people and deserve a great deal of respect.\r\n			Since they get to see a lot of different projects, they often know more about specific technologies\r\n			and even programming techniques than you will. The best way to use them is as educators\r\n			in-house that can teach by example.<br />\r\n			<br />\r\n			However, they usually cannot become part of the team in the same sense that regular employees\r\n			are, if only because you may not have enough time to learn their strengths and weaknesses. Their\r\n			financial commitment is much lower. They can move more easily. They may have less to gain if\r\n			the company does well. Some will be good, some will be average, and some will be bad, but hopefully\r\n			your selection of consultants will not be as careful as your selection of employees, so you\r\n			will get more bad ones.<br />\r\n			<br />\r\n			If consultants are going to write code, you must review it carefully as you go along. You cannot\r\n			get to the end of the a project with the risk of a large block of code that has not been reviewed.\r\n			This is true of all team members, really, but you will usually have more knowledge of the team\r\n			members closer to you.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222699469, 'theory', 1, 66, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:29:"12. How to Manage Consultants";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(66, '11. How to Manage Third-Party Software Risks', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Manage Third-Party Software Risks</h1>\r\n			A project often depends on software produced by organizations that it does not control. There are\r\n			great risks associated with third party software that must be recognized by everyone involved.\r\n			Never, ever, rest any hopes on vapor. Vapor is any alleged software that has been promised but is\r\n			not yet available. This is the surest way to go out of business. It is unwise to be merely skeptical of\r\n			a software company&#39;s promise to release a certain product with a certain feature at a certain date; it\r\n			is far wiser to ignore it completely and forget you ever heard it. Never let it be written down in any\r\n			documents used by your company.<br />\r\n			<br />\r\n			If third-party software is not vapor, it is still risky, but at least it is a risk that can be tackled. If you\r\n			are considering using third-party software, you should devote energy early on to evaluating it.People might not like to hear that it will take two weeks or two months to evaluate each of three\r\n			products for suitability, but it has to be done as early as possible. The cost of integrating cannot be\r\n			accurately estimated without a proper evaluation.<br />\r\n			<br />\r\n			Understanding the suitability of existing third party software for a particular purpose is very tribal\r\n			knowledge. It is very subjective and generally resides in experts. You can save a lot of time if you\r\n			can find those experts. Often times a project will depend on a third-party software system so completely\r\n			that if the integration fails the project will fail. Express risks like that clearly in writing in\r\n			the schedule. Try to have a contingency plan, such as another system that can be used or the ability\r\n			to write the functionality yourself if the risk can&#39;t be removed early. Never let a schedule depend\r\n			on vapor.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222699347, 'theory', 1, 67, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:44:"11. How to Manage Third-Party Software Risks";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(67, '10. How to Manage Development Time', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Manage Development Time</h1>\r\n			To manage development time, maintain a concise and up-to-date project plan. A project plan is an\r\n			estimate, a schedule, a set of milestones for marking progress, and an assignment of your team or\r\n			your own time to each task on the estimate. It should also include other things you have to remember\r\n			to do, such as meeting with the quality assurance people, preparing documentation, or ordering\r\n			equipment. If you are on a team, the project plan should be a consensual agreement, both at the\r\n			start and as you go.<br />\r\n			<br />\r\n			The project plan exists to help make decisions, not to show how organized you are. If the project\r\n			plan is either too long or not up-to-date, it will be useless for making decisions. In reality, these\r\n			decisions are about individual persons. The plan and your judgment let you decide if you should\r\n			shift tasks from one person to another. The milestones mark your progress. If you use a fancy\r\n			project planning tool, do not be seduced into creating a Big Design Up Front (BDUF) for the\r\n			project, but use it maintain concision and up-to-dateness.<br />\r\n			<br />\r\n			If you miss a milestone, you should take immediate action such as informing your boss that the\r\n			scheduled completion of that project has slipped by that amount. The estimate and schedule could\r\n			never have been perfect to begin with; this creates the illusion that you might be able to make up\r\n			the days you missed in the latter part of the project. You might. But it is just as likely that you\r\n			have underestimated that part as that you have overestimated it. Therefore the scheduled completion\r\n			of the project has already slipped, whether you like it or not.<br />\r\n			<br />\r\n			Make sure your plan includes time for: internal team meetings, demos, documentation, scheduled\r\n			periodic activities, integration testing, dealing with outsiders, sickness, vacations, maintenance of\r\n			existing products, and maintenance of the development environment. The project plan can serve as a way to give outsiders or your boss a view into what you or your team is doing. For this reason it\r\n			should be short and up-to-date.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222699272, 'theory', 1, 69, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:34:"10. How to Manage Development Time";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(68, '8. How to Do Integration Testing', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Do Integration Testing</h1>\r\n			Integration testing is the testing of the integration of various components that have been unit\r\n			tested. Integration is expensive and it comes out in the testing. You must include time for this in\r\n			your estimates and your schedule.<br />\r\n			<br />\r\n			Ideally you should organize a project so that there is not a phase at the end where integration must\r\n			explicitly take place. It is far better to gradually integrate things as they are completed over the\r\n			course of the project. If it is unavoidable estimate it carefully.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222698651, 'theory', 1, 70, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:32:"8. How to Do Integration Testing";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, '');
INSERT INTO `content` (`id`, `name`, `data`, `parent_content_ID`, `lessons_ID`, `timestamp`, `ctg_type`, `active`, `previous_content_ID`, `options`, `metadata`, `scorm_version`, `publish`, `identifier`) VALUES
(69, '9. Communication Languages', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Communication Languages</h1>\r\n			There are some languages, that is, formally defined syntactic systems, that are not programming\r\n			languages but communication languages---they are designed specifically to facillitate communication through standardization. In 2003 the most important of these are UML, XML, and SQL. You\r\n			should have some familiarity with all of these so that you can communicate well and decide when\r\n			to use them.<br />\r\n			<br />\r\n			UML is a rich formal system for making drawings that describe designs. It&#39;s beauty lines in that is\r\n			both visual and formal, capable of conveying a great deal of information if both the author and the\r\n			audience know UML. You need to know about it because designs are sometimes communicated in\r\n			it. There are very helpful tools for making UML drawings that look very professional. In a lot of\r\n			cases UML is too formal, and I find myself using a simpler boxes and arrows style for design\r\n			drawings. But I&#39;m fairly sure UML is at least as good for you as studying Latin.<br />\r\n			<br />\r\n			XML is a standard for defining new standards. It is not a solution to data interchange problems,\r\n			though you sometimes see it presented as if it was. Rather, it is a welcome automation of the most\r\n			boring part of data interchange, namely, structuring the representation into a linear sequence and\r\n			parsing back into a structure. It provides some nice type- and correctness-checking, though again\r\n			only a fraction of what you are likely to need in practice.<br />\r\n			<br />\r\n			SQL is a very powerful and rich data query and manipulation language that is not quite a programming\r\n			language. It has many variations, typically quite product-dependent, which are less important\r\n			than the standardized core. SQL is the lingua franca of relational databases. You may or may not\r\n			work in any field that can benefit from an understanding of relational databases, but you should\r\n			have a basic understanding of them and they syntax and meaning of SQL.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222699001, 'theory', 1, 68, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:26:"9. Communication Languages";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(70, '7. Learn to Type', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Learn to Type</h1>\r\n			Learn to touch-type. This is an intermediate skill because writing code is so hard that the speed at\r\n			which you can type is irrelevant and can&#39;t put much of a dent in the time it takes to write code, no\r\n			matter how good you are. However, by the time you are an intermediate programmer you will\r\n			probably spend a lot of time writing natural language to your colleagues and others. This is a fun\r\n			test of your commitment; it takes dedicated time that is not much fun to learn something like that.\r\n			Legend has it that when Michael Tiemann2 was at MCC people would stand outside his door to\r\n			listen to the hum generated by his keystrokes which were so rapid as to be indistinguishable.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222698543, 'theory', 1, 71, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:16:"7. Learn to Type";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(71, '6. How to Learn New Skills', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Learn New Skills</h1>\r\n			Learning new skills, especially non-technical ones, is the greatest fun of all. Most companies\r\n			would have better morale if they understood how much this motivates programmers.<br />\r\n			<br />\r\n			Humans learn by doing. Book-reading and class-taking are useful. But could you have any respect\r\n			for a programmer who had never written a program? To learn any skill, you have to put yourself in\r\n			a forgiving position where you can exercise that skill. When learning a new programming language,\r\n			try to do a small project it in before you have to do a large project. When learning to manage\r\n			a software project, try to manage a small one first.<br />\r\n			<br />\r\n			A good mentor is no replacement for doing things yourself, but is a lot better than a book. What\r\n			can you offer a potential mentor in exchange for their knowledge? At a minimum, you should offer\r\n			to study hard so their time won&#39;t be wasted.<br />\r\n			<br />\r\n			Try to get your boss to let you have formal training, but understand that it often not much better\r\n			than the same amount of time spent simply playing with the new skill you want to learn. It is,\r\n			however, easier to ask for training than playtime in our imperfect world, even though a lot of formal\r\n			training is just sleeping through lectures waiting for the dinner party.<br />\r\n			<br />\r\n			If you lead people, understand how they learn and assist them by assigning them projects that are\r\n			the right size and that exercise skills they are interested in. Don&#39;t forget that the most important\r\n			skills for a programmer are not the technical ones. Give your people a chance to play and practice\r\n			courage, honesty, and communication.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222698399, 'theory', 1, 72, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:26:"6. How to Learn New Skills";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(72, '6. How to Learn New Skills', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Learn New Skills</h1>\r\n			Learning new skills, especially non-technical ones, is the greatest fun of all. Most companies\r\n			would have better morale if they understood how much this motivates programmers.<br />\r\n			<br />\r\n			Humans learn by doing. Book-reading and class-taking are useful. But could you have any respect\r\n			for a programmer who had never written a program? To learn any skill, you have to put yourself in\r\n			a forgiving position where you can exercise that skill. When learning a new programming language,\r\n			try to do a small project it in before you have to do a large project. When learning to manage\r\n			a software project, try to manage a small one first.<br />\r\n			<br />\r\n			A good mentor is no replacement for doing things yourself, but is a lot better than a book. What\r\n			can you offer a potential mentor in exchange for their knowledge? At a minimum, you should offer\r\n			to study hard so their time won&#39;t be wasted.<br />\r\n			<br />\r\n			Try to get your boss to let you have formal training, but understand that it often not much better\r\n			than the same amount of time spent simply playing with the new skill you want to learn. It is,\r\n			however, easier to ask for training than playtime in our imperfect world, even though a lot of formal\r\n			training is just sleeping through lectures waiting for the dinner party.<br />\r\n			<br />\r\n			If you lead people, understand how they learn and assist them by assigning them projects that are\r\n			the right size and that exercise skills they are interested in. Don&#39;t forget that the most important\r\n			skills for a programmer are not the technical ones. Give your people a chance to play and practice\r\n			courage, honesty, and communication.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222698397, 'theory', 1, 73, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:26:"6. How to Learn New Skills";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(73, '5. How to Balance Brevity and Abstraction', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Balance Brevity and Abstraction</h1>\r\n			Abstraction is key to programming. You should carefully choose how abstract you need to be. Beginning\r\n			programmers in their enthusiasm often create more abstraction than is really useful. One\r\n			sign of this is if you create classes that don&#39;t really contain any code and don&#39;t really do anything\r\n			except serve to abstract something. The attraction of this is understandable but the value of code\r\n			brevity must be measured against the value of abstraction. Occasionally, one sees a mistake made\r\n			by enthusiastic idealists: at the start of the project a lot of classes are defined that seem wonderfully\r\n			abstract and one may speculate that they will handle every eventuality that may arise. As the\r\n			project progresses and fatigue sets in, the code itself becomes messy. Function bodies become\r\n			longer than they should be. The empty classes are a burden to document that is ignored when under\r\n			pressure. The final result would have been better if the energy spent on abstraction had been\r\n			spent on keeping things short and simple. This is a form of speculative programming. I strongly\r\n			recommend the article ``Succinctness is Power&#39;&#39; by Paul Graham[PGSite].<br />\r\n			<br />\r\n			There is a certain dogma associated with useful techniques such as information hiding and object\r\n			oriented programming that are sometimes taken too far. These techniques let one code abstractly\r\n			and anticipate change. I personally think, however, that you should not produce much speculative\r\n			code. For example, it is an accepted style to hide an integer variable on an object behind mutators\r\n			and accessors, so that the variable itself is not exposed, only the little interface to it. This does allow\r\n			the implementation of that variable to be changed without affecting the calling code, and is\r\n			perhaps appropriate to a library writer who must publish a very stable API. But I don&#39;t think the\r\n			benefit of this outweighs the cost of the wordiness of it when my team owns the calling code and\r\n			hence can recode the caller as easily as the called. Four or five extra lines of code is a heavy price\r\n			to pay for this speculative benefit.<br />\r\n			<br />\r\n			Portability poses a similar problem. Should code be portable to a different computer, compiler,\r\n			software system or platform, or simply easily ported? I think a non-portable, shortand-\r\n			easily-ported piece of code is better than a long portable one. It is relatively easy and certainly\r\n			a good idea to confine non-portable code to designated areas, such as a class that makes database\r\n			queries that are specific to a given DBMS.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222697772, 'theory', 1, 74, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:41:"5. How to Balance Brevity and Abstraction";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(74, '4. How to Stress Test', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Stress Test</h1>\r\n			Stress testing is fun. At first it appears that the purpose of stress testing is to find out if the system\r\n			works under a load. In reality, it is common that the system does work under a load but fails to\r\n			work in some way when the load is heavy enough. I call this hitting the wall or bonking. There\r\n			may be some exceptions, but there is almost always a ‘wall’. The purpose of stress testing is to\r\n			figure out where the wall is, and then figure out how to move the wall further out.<br />\r\n			<br />\r\n			A plan for stress testing should be developed early in the project, because it often helps to clarify\r\n			exactly what is expected. Is two seconds for a web page request a miserable failure or a smashing\r\n			success? Is 500 concurrent users enough? That, of course, depends, but one must know the answer\r\n			when designing the system that answers the request. The stress test needs to model reality well\r\n			enough to be useful. It isn&#39;t really possible to simulate 500 erratic and unpredictable humans using\r\n			a system concurrently very easily, but one can at least create 500 simulations and try to model\r\n			some part of what they might do.<br />\r\n			<br />\r\n			In stress testing, start out with a light load and load the system along some dimension---such as input\r\n			rate or input size---until you hit the wall. If the wall is too close to satisfy your needs, figure\r\n			out which resource is the bottleneck (there is usually a dominant one.) Is it memory, processor, Input/\r\n			Output, network bandwidth, or data contention? Then figure out how you can move the wall.<br />\r\n			<br />\r\n			Note that moving the wall, that is, increasing the maximum load the system can handle, might not\r\n			help or might actually hurt the performance of a lightly loaded system. Usually performance under\r\n			heavy load is more important than performance under a light load.<br />\r\n			<br />\r\n			You may have to get visibility into several different dimensions to build up a mental model of it;\r\n			no single technique is sufficient. For instance, logging often gives a good idea of the wall-clock\r\n			time between two events in the system, but unless carefully constructed, doesn&#39;t give visibility into\r\n			memory utilization or even data structure size. Similarly, in a modern system, a number of computers\r\n			and many software systems may be cooperating. Particularly when you are hitting the wall\r\n			(that is, the performance is non-linear in the size of the input) these other software systems may be\r\n			a bottleneck. Visibility into these systems, even if only measuring the processor load on all participating\r\n			machines, can be very helpful.<br />\r\n			<br />\r\n			Knowing where the wall is is essential not only to moving the wall, but also to providing predictability\r\n			so that the business can be managed effectively.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222697575, 'theory', 1, 77, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:21:"4. How to Stress Test";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(75, '1. How to Stay Motivated', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Stay Motivated</h1>\r\n			It is a wonderful and surprising fact that programmers are highly motivated by the desire to create\r\n			artifacts that are beautiful, useful, or nifty. This desire is not unique to programmers nor universal\r\n			but it is so strong and common among programmers that it separates them from others in other\r\n			roles.<br />\r\n			<br />\r\n			This has practical and important consequences. If programmers are asked to do something that is\r\n			not beautiful, useful, or nifty, they will have low morale. There&#39;s a lot of money to be made doing\r\n			ugly, stupid, and boring stuff; but in the end, fun will make the most money for the company.<br />\r\n			<br />\r\n			Obviously, there are entire industries organized around motivational techniques some of which apply\r\n			here. The things that are specific to programming that I can identify are:<br />\r\n			<br />\r\n			• Use the best language for the job.<br />\r\n			• Look for opportunities to apply new techniques, languages, and technologies.<br />\r\n			• Try to either learn or teach something, however small, in each project.<br />\r\n			<br />\r\n			Finally, if possible, measure the impact of your work in terms of something that will be personally\r\n			motivating. For example, when fixing bugs, counting the number of bugs that I have fixed is not at\r\n			all motivational to me, because it is independent of the number that may still exist, and is also affects\r\n			the total value I&#39;m adding to my company&#39;s customers in only the smallest possible way. Relating\r\n			each bug to a happy customer, however, is personally motivating to me.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222692506, 'theory', 1, 0, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:24:"1. How to Stay Motivated";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(76, '2. How to be Widely Trusted', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to be Widely Trusted</h1>\r\n			To be trusted you must be trustworthy. You must also be visible. If know one knows about you, no\r\n			trust will be invested in you. With those close to you, such as your teammates, this should not be\r\n			an issue. You establish trust by being responsive and informative to those outside your department\r\n			or team. Occasionally someone will abuse this trust, and ask for unreasonable favors. Don&#39;t be\r\n			afraid of this, just explain what you would have to give up doing to perform the favor.<br />\r\n			<br />\r\n			Don&#39;t pretend to know something that you don&#39;t. With people that are not teammates, you may\r\n			have to make a clear distinction between ``not knowing right off the top of my head&#39;&#39; and ``not being\r\n			able to figure it out, ever.&#39;&#39;\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222697057, 'theory', 1, 75, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:27:"2. How to be Widely Trusted";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(77, '3. How to Tradeoff Time vs. Space', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Tradeoff Time vs. Space</h1>\r\n			You can be a good programmer without going to college, but you can&#39;t be a good intermediate\r\n			programmer without knowing basic computational complexity theory. You don&#39;t need to know&#39;``big O&#39;&#39; notation, but I personally think you should be able to understand the difference between\r\n			``constant-time&#39;&#39;,``n log n&#39;&#39; and ``n squared&#39;&#39;. You might be able to intuit how to tradeoff time\r\n			against space without this knowledge, but in its absence you will not have a firm basis for communicating\r\n			with your colleagues.<br />\r\n			<br />\r\n			In designing or understanding an algorithm, the amount of time it takes to run is sometimes a\r\n			function of the size of the input. When that is true, we can say an algorithm&#39;s worst/expected/\r\n			best-case running time is ``n log n&#39;&#39; if it is proportional to the size (represented by the variable\r\n			n) times the logarithm of the size. The notation and way of speaking can be also be applied to\r\n			the space taken up by a data structure.<br />\r\n			<br />\r\n			To me, computational complexity theory is beautiful and as profound as physics---and a little bit\r\n			goes a long way!<br />\r\n			<br />\r\n			Time (processor cycles) and space (memory) can be traded off against each other. Engineering is\r\n			about compromise, and this is a fine example. It is not always systematic. In general, however, one\r\n			can save space by encoding things more tightly, at the expense of more computation time when\r\n			you have to decode them. You can save time by caching, that is, spending space to store a local\r\n			copy of something, at the expense of having to maintain the consistency of the cache. You can\r\n			sometimes save time by maintaining more information in a data structure. This usually cost a\r\n			small amount of space but may complicate the algorithm.<br />\r\n			<br />\r\n			Improving the space/time tradeoff can often change one or the other dramatically. However, before\r\n			you work on this you should ask yourself if what you are improving is really the thing that\r\n			needs the most improvement. It&#39;s fun to work on an algorithm, but you can&#39;t let that blind you to\r\n			the cold hard fact that improving something that is not a problem will not make any noticeable difference\r\n			and will create a test burden.<br />\r\n			<br />\r\n			Memory on modern computers appears cheap, because unlike processor time, you can&#39;t see it being\r\n			used until you hit the wall; but then failure is catastrophic. There are also other hidden costs to\r\n			using memory, such as your effect on other programs that must be resident, and the time to allocate\r\n			and deallocate it. Consider this carefully before you trade away space to gain speed.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 4, 1222697392, 'theory', 1, 76, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:33:"3. How to Tradeoff Time vs. Space";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/29";}', NULL, 1, ''),
(78, 'A small programming test', '', 0, 4, 1227712919, 'tests', 1, 56, 'b:0;', 'a:5:{s:5:"title";s:24:"A small programming test";s:7:"creator";s:16:"Professor eFront";s:9:"publisher";s:16:"Professor eFront";s:11:"contributor";s:16:"Professor eFront";s:4:"date";s:10:"2008/11/26";}', NULL, 1, ''),
(79, 'How to Deal with Temporary Organizational Chaos', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Deal with Temporary Organizational\r\n			Chaos</h1>\r\n			There are often brief periods of great organizational chaos, such as layoffs, buyouts, ipos, firings,\r\n			new hirings, and so on. These are unsettling to everyone, but perhaps a little less unsettling to the\r\n			programmer whose personal self-esteem is founded in capacity rather than in position. Organizational\r\n			chaos is a great opportunity for programmers to exercise their magic power. I&#39;ve saved this\r\n			for last because it is a deep tribal secret. If you are not a programmer, please stop reading now.<br />\r\n			<br />\r\n			Engineers have the power to create and sustain.<br />\r\n			<br />\r\n			Non-engineers can order people around but, in a typical software company, can create and sustain\r\n			nothing without engineers, just as engineers typically cannot sell a product or manage a business\r\n			effectively. This power is proof against almost all of the problems associated with temporary organizational\r\n			mayhem. When you have it you should ignore the chaos completely and carry on as if\r\n			nothing is happening. You may, of course, get fired, but if that happens you can probably get a\r\n			new job because of the magic power. More commonly, some stressed-out person who does not\r\n			have the magic power will come into your cube and tell you to do something stupid. If you are really\r\n			sure that it is stupid, it is best to smile and nod until they go away and then carry on doing\r\n			what you know is best for the company.<br />\r\n			<br />\r\n			If you are a leader, tell your people to do the same thing and tell them to ignore what anybody else\r\n			tells them. This course of action is the best for you personally, and is the best for your company or\r\n			project.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222772113, 'theory', 1, 80, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:47:"How to Deal with Temporary Organizational Chaos";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(80, 'How to Deal with Managerial Myths', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Deal with Managerial Myths</h1>\r\n			The word myth sometimes means fiction. But it has a deeper connotation. It also means a story of\r\n			religious significance that explains the universe and mankind&#39;s relationship to it. Managers tend to\r\n			forget what they learned as programmers and believe in certain myths. It would be as rude and unsuccessful\r\n			to try to convince them these myths are false as to try to disillusion a devoutly religious\r\n			person of their beliefs. For that reason, you should recognize these beliefs as myths:<br />\r\n			<br />\r\n			• More documentation is always better. (They want it, but they don&#39;t want you to spend any time\r\n			on it.)<br />\r\n			• Programmers can be equated. (Programmers vary by an order of magnitude.)<br />\r\n			• Resources can be added to a late project to speed it. (The cost of communication with the new\r\n			persons is almost always more taxing than helpful.)<br />\r\n			• It is possible to estimate software development reliably. (It is not even theoretically possible.)\r\n			• Programmers&#39; productivity can be measured in terms of some simple metric, like lines of code.\r\n			(If succinctness is power, lines of code are bad, not good.)<br />\r\n			<br />\r\n			If you have an opportunity, you can try to explain these things, but don&#39;t feel bad if you have no\r\n			success and don&#39;t damage your reputation by confronting these myths belligerently. Each of these\r\n			myths reinforces the manager&#39;s idea that they have some actual control over what is going on. The\r\n			truth is that managers facilitate if they are good, and impede if they are bad.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222771914, 'theory', 1, 81, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:33:"How to Deal with Managerial Myths";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(81, 'How to Tell People Things They Do not Want to Hear', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Tell People Things They Don&#39;t Want\r\n			to Hear</h1>\r\n			You will often have to tell people things that will make them uncomfortable. Remember that you\r\n			are doing this for a reason. Even if nothing can be done about the problem, you are telling them as\r\n			early as possible so they will be well-informed.<br />\r\n			<br />\r\n			The best way to tell someone about a problem is to offer a solution at the same time. The second\r\n			best way is to appeal to them for help with the problem. If there is a danger that you won&#39;t be believed,\r\n			you should gather some support for your assertion.<br />\r\n			<br />\r\n			One of the most unpleasant and common things you will have to say is, ‘The schedule will have to\r\n			slip.’ The conscientious programmer hates to say this, but must say it as early as possible. There is\r\n			nothing worse than postponing action when a milestone slips, even if the only action is to inform\r\n			everyone. In doing this, it is better to do it as a team, at least in spirit, if not physically. You will\r\n			want your team&#39;s input on both where you stand and what can be done about it, and the team will\r\n			have to face the consequences with you.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222771683, 'theory', 1, 82, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:50:"How to Tell People Things They Do not Want to Hear";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(82, 'How to Communicate Well', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Communicate Well</h1>\r\n			To communicate well, you have to recognize how hard it is. It is a skill unto itself. It is made\r\n			harder by the fact that the persons with whom you have to communicate are flawed. They do not\r\n			work hard at understanding you. They speak poorly and write poorly. They are often overworked\r\n			or bored, and, at a minimum, somewhat focused on their own work rather than the larger issues\r\n			you may be addressing. One of the advantages of taking classes and practicing writing, public\r\n			speaking, and listening is that if you become good at it you can more readily see where problems\r\n			lie and how to correct them.<br />\r\n			<br />\r\n			The programmer is a social animal whose survival depends on communication with her team. The\r\n			advanced programmer is a social animal whose satisfaction depends on communication with people\r\n			outside her team.<br />\r\n			<br />\r\n			The programmer brings order out of chaos. One interesting way to do this is to initiate a proposal\r\n			of some kind outside the team. This can be done in a strawman or white-paper format or just verbally.\r\n			This leadership has the tremendous advantage of setting the terms of the debate. It also exposes\r\n			you to criticism, and worse, rejection and neglect. The advanced programmer must be prepared\r\n			to accept this, because she has a unique power and therefore a unique responsibility. Entrepreneurs\r\n			who are not programmers need programmers to provide leadership in some ways. Programmers\r\n			are the part of the bridge between ideas and reality that rests on reality.<br />\r\n			<br />\r\n			I haven&#39;t mastered communicating well, but what I&#39;m currently trying is what I think of as a fourpronged\r\n			approach: After I have my ideas in order and am fully prepared, I try to speak verbally,\r\n			hand people a white-paper (on real paper, as well as electronically) show them a demo, and then\r\n			patiently repeat this process. I think a lot of times we are not patient enough in this kind of difficult\r\n			communication. You should not be disheartened if your ideas are not immediately accepted. If\r\n			you have invested energy in there preparation, no one will think poorly of you for it.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222771517, 'theory', 1, 83, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:23:"How to Communicate Well";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(83, 'How to Grow a System', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Grow a System</h1>\r\n			The seed of a tree contains the idea of the adult but does not fully realize the form and potency of\r\n			the adult. The embryo grows. It becomes larger. It looks more like the adult and has more of the\r\n			uses. Eventually it bears fruit. Later, it dies and its body feeds other organisms.<br />\r\n			<br />\r\n			We have the luxury of treating software like that. A bridge is not like that; there is never a baby\r\n			bridge, but merely an unfinished bridge. Bridges are a lot simpler than software.<br />\r\n			<br />\r\n			It is good to think of software as growing, because it allows us to make useful progress before we\r\n			have a perfect mental image. We can get feedback from users and use that to correct the growth.\r\n			Pruning off weak limbs is healthful.<br />\r\n			<br />\r\n			The programmer must design a finished system that can be delivered and used. But the advanced\r\n			programmer must do more. You must design a growth path that ends in the finished system. It is\r\n			your job to take a germ of an idea and build a path that takes it as smoothly as possible into a useful\r\n			artifact.<br />\r\n			<br />\r\n			To do this, you must visualize the end result and communicate it in a way that the engineering\r\n			team can get excited about. But you must also communicate to them a path that goes from wherever\r\n			they are now to where they want to be with no large leaps. The tree must stay alive the whole\r\n			time; it cannot be dead at one point and resurrected later.<br />\r\n			<br />\r\n			This approach is captured in spiral development. Milestones that are never too far apart are used to\r\n			mark progress along the path. In the ultra-competitive environment of business, it is best if the\r\n			milestones can be released and make money as early as possible, even if they are far away from a\r\n			well-designed endpoint. One of the programmer&#39;s jobs is to balance the immediate payoff against\r\n			future payoff by wisely choosing a growth path expressed in milestones.<br />\r\n			<br />\r\n			The advanced programmer has the triple responsibility of growing software, teams, and persons.\r\n			<br />\r\n			<br />\r\n			A reader, Rob Hafernik, sent in this comment on this section that I can do no better than to quote\r\n			in full:<br />\r\n			<br />\r\n			I think you under-emphasize the importance here. It&#39;s not just systems, but algorithms,\r\n			user interfaces, data models, and so on. It&#39;s absolutely vital as you work\r\n			on a large system to have measurable progress toward intermediate goals. Nothing\r\n			is as bad as the special horror of getting down to the end and discovering\r\n			that the whole thing just isn&#39;t going to work (look at the recent debacle of the\r\n			Voter News System). I would even go further and state it as a law of nature: no\r\n			large, complex system can be implemented from scratch, it can only be evolved\r\n			from a simple system to a complex system in a series of intentional steps.<br />\r\n			<br />\r\n			To which one can only reply Fiat lux!\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222771318, 'theory', 1, 84, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:20:"How to Grow a System";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(84, 'How to Gather Support for a Project', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Gather Support for a Project</h1>\r\n			To gather support for a project, create and communicate a vision that demonstrates real value to\r\n			the organization as a whole. Attempt to let others share in your vision creation. This gives them a\r\n			reason to support you and gives you the benefit of their ideas. Individually recruit key supporters\r\n			for your project. Wherever possible, show, don&#39;t tell. If possible, construct a prototype or a\r\n			mockup to demonstrate your ideas. A prototype is always powerful but in software it is far superior\r\n			to any written description.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222771178, 'theory', 1, 86, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:35:"How to Gather Support for a Project";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(85, 'How to Divide Problems', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Divide Problems</h1>\r\n			It&#39;s fun to take a software project and divide it up into tasks that will be performed by individuals.\r\n			This should be done early. Sometimes managers like to think that an estimate can be made without\r\n			consideration of the individuals that will perform the work. This is impossible since the productivity\r\n			of individuals varies so widely. Who has particular knowledge about a component also constantly\r\n			changes and can have an order of magnitude effect on performance.<br />\r\n			<br />\r\n			Just as a composer considers the timbre of the instrument that will play a part or the coach of an\r\n			athletic team considers the strengths of each player, the experienced team leader will not usually\r\n			be able to separate the division of the project into tasks from the team members to which they will\r\n			be assigned. This is part of the reason that a high-performing team should not be broken up.<br />\r\n			<br />\r\n			There is a certain danger in this given that people will become bored as they build upon their\r\n			strengths and never improve their weaknesses or learn new skills. However, specialization is a\r\n			very useful productivity tool when not overused.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222770997, 'theory', 1, 88, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:22:"How to Divide Problems";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(86, 'How to Handle Boring Tasks', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Handle Boring Tasks</h1>\r\n			Sometimes it is not possible to avoid boring tasks that are critical to the success of the company or\r\n			the project. These tasks can really hurt the morale of those that have to do them. The best technique\r\n			for dealing with this is to invoke or promote Larry Wall&#39;s programmer&#39;s virtue of Laziness.\r\n			Try to find some way to get the computer to do the task for you or to help your teammates do this.\r\n			Working for a week on a program to do a task that will take a week to do by hand has the great advantage\r\n			of being more educational and sometimes more repeatable.<br />\r\n			<br />\r\n			If all else fails, apologize to those who have to do the boring task, but under no circumstances allow\r\n			them to do it alone. At a minimum assign a team of two to do the work and promote healthy\r\n			teamwork to get the task done.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222771134, 'theory', 1, 85, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:26:"How to Handle Boring Tasks";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(87, 'How to Choose What to Work On', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Choose What to Work On</h1>\r\n			You balance your personal needs against the needs of the team in choosing what aspect of a\r\n			project to work on. You should do what you are best at, but try to find a way to stretch yourself\r\n			not by taking on more work but by exercising a new skill. Leadership and communication skills\r\n			are more important than technical skills. If you are very strong, take on the hardest or riskiest task,\r\n			and do it as early as possible in the project to decrease risk.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222770835, 'theory', 1, 89, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:29:"How to Choose What to Work On";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(88, 'How to Get the Most From Your Teammates', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Get the Most From Your Teammates</h1>\r\n			To get the most from your teammates, develop a good team spirit and try to keep every individual\r\n			both personally challenged and personally engaged.<br />\r\n			<br />\r\n			To develop team spirit, corny stuff like logoized clothing and parties are good, but not as good as\r\n			personal respect. If everyone respects everyone else, nobody will want to let anybody down. Team\r\n			spirit is created when people make sacrifices for the team and think in terms of the good of the\r\n			team before their own personal good. As a leader, you can&#39;t ask for more than you give yourself in\r\n			this respect.<br />\r\n			<br />\r\n			One of the keys to team leadership is to facilitate consensus so that everyone has buy in. This occasionally\r\n			means allowing your teammates to be wrong. That is, if it does not harm the project too\r\n			much, you must let some of your team do things their own way, based on consensus, even if you\r\n			believe with great confidence it is the wrong thing to do. When this happens, don&#39;t agree, simply\r\n			disagree openly and accept the consensus. Don&#39;t sound hurt, or like you&#39;re being forced into it,\r\n			simply state that you disagree but think the consensus of the team is more important. This will often\r\n			cause them to backtrack. Don&#39;t insist that they go through with their initial plan if they do\r\n			backtrack.<br />\r\n			<br />\r\n			If there is an individual who will not consent after you have discussed the issues from all appropriate\r\n			sides, simply assert that you have to make a decision and that is what your decision is. If there\r\n			is a way to judge if your decision will be wrong or if it is later shown to be wrong, switch as\r\n			quickly as you can and recognize the persons who were right.<br />\r\n			<br />\r\n			Ask your team, both as a group and individually, what they think would create team spirit and\r\n			make for an effective team.<br />\r\n			<br />\r\n			Praise frequently rather than lavishly. Especially praise those who disagree with you when they\r\n			are praiseworthy. Praise in public and criticize in private; with one exception: sometimes growth\r\n			or the correction of a fault can&#39;t be praised without drawing embarrassing attention to the original\r\n			fault, so that growth should be praised in private.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222770938, 'theory', 1, 87, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:39:"How to Get the Most From Your Teammates";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(89, 'How to Develop Talent', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Develop Talent</h1>\r\n			Nietschze exaggerated when he said[Stronger]:<br />\r\n			<br />\r\n			What does not destroy me, makes me stronger.<br />\r\n			<br />\r\n			Your greatest responsibility is to your team. You should know each of them well. You should\r\n			challenge your team, but not overburden them. You should usually talk to them about the way\r\n			they are being stretched. If they buy in to it, they will be well motivated. On each project, or every\r\n			other project, try to stretch them in both a way that they suggest and a way that you think will be\r\n			good for them. Stretch them not by giving them more work, but by giving them a new skill or better\r\n			yet a new role to play on the team.<br />\r\n			<br />\r\n			You should allow people (including yourself) to fail occasionally and should plan for some failure\r\n			in your schedule. If there is never any failure, there can be no sense of adventure. If there are not\r\n			occasional failures, you are not taking enough risks. When someone fails, you should be as gentle\r\n			as you can with them while not treating them as though they had succeeded.<br />\r\n			<br />\r\n			Try to get each team member to buy in and be well motivated. Ask each of them explicitly what\r\n			they need to be well-motivated if they are not. You may have to leave them dissatisfied, but you\r\n			should know what everybody desires.<br />\r\n			<br />\r\n			You can&#39;t give up on someone who is intentionally not carrying their share of the load because of\r\n			low morale or dissatisfaction and just let them be slack. You must try to get them well-motivated\r\n			and productive. As long as you have the patience, keep this up. When your patience is exhausted,\r\n			fire them. You cannot allow someone who is intentionally working below their level to remain on\r\n			the team, since it is not fair to the team.<br />\r\n			<br />\r\n			Make it clear to the strong members of your team that you think they are strong by saying so in\r\n			public. Praise should be public and criticism private.<br />\r\n			<br />\r\n			The strong members of the team will naturally have more difficult tasks than the weak members of\r\n			the team. This is perfectly natural and nobody will be bothered by it as long as everyone works\r\n			hard.<br />\r\n			<br />\r\n			It is an odd fact that is not reflected in salaries that a good programmer is more productive than 10\r\n			bad programmers. This creates a strange situation. It will often be true that you could move faster\r\n			if your weak programmers would just get out of the way. If you did this you would in fact make\r\n			more progress in the short term. However, your tribe would lose some important benefits, namely\r\n			the training of the weaker members, the spreading of tribal knowledge, and the ability to recover\r\n			from the loss of the strong members. The strong must be gentle in this regard and consider the issue\r\n			from all angles.<br />\r\n			<br />\r\n			You can often give the stronger team members challenging, but carefully delineated, tasks.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222770773, 'theory', 1, 90, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:21:"How to Develop Talent";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, '');
INSERT INTO `content` (`id`, `name`, `data`, `parent_content_ID`, `lessons_ID`, `timestamp`, `ctg_type`, `active`, `previous_content_ID`, `options`, `metadata`, `scorm_version`, `publish`, `identifier`) VALUES
(90, 'How to Get a Promotion', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Get a Promotion</h1>\r\n			To be promoted to a role, act out that role first.<br />\r\n			<br />\r\n			To get promoted to a title, find out what is expected of that title and do that.<br />\r\n			<br />\r\n			To get a pay raise, negotiate armed with information.<br />\r\n			<br />\r\n			If you feel like you are past due for a promotion, talk to your boss about it. Ask them explicitly\r\n			what you need to do to get promoted, and try to do it. This sounds trite, but often times your perception\r\n			of what you need to do will differ considerably from your boss&#39;s. Also this will pin your\r\n			boss down in some ways.<br />\r\n			<br />\r\n			Most programmers probably have an exaggerated sense of their relative abilities in some ways-\r\n			--after all, we can&#39;t all be in the top 10%! However, I have seem some people who were seriously\r\n			unappreciated. One cannot expect everyone&#39;s evaluation to perfectly match reality at all times, but\r\n			I think people are generally moderately fair, with one caveat: you cannot be appreciated without\r\n			visibility into your work. Sometimes, do to happenstance or personal habits, someone will not be\r\n			noticed much. Working from home a lot or being geographically separated from your team and\r\n			boss makes this especially difficult.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222770679, 'theory', 1, 91, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:22:"How to Get a Promotion";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(91, 'How to Understand the User', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Understand the User</h1>\r\n			It is your duty to understand the user, and to help your boss understand the user. Because the user\r\n			is not as intimately involved in the creation of your product as you are, they behave a little differently:<br />\r\n			<br />\r\n			• The user generally makes short pronouncements.<br />\r\n			• The user has their own job; they will mainly think of small improvements in your product, not\r\n			big improvements.<br />\r\n			• The user can&#39;t have a vision that represents the complete body of your product users.<br />\r\n			<br />\r\n			It is your duty to give them what they really want, not what they say they want. It is however, better\r\n			to propose it to them and get them to agree that your proposal is what they really want before\r\n			you begin, but they may not have the vision to do this. Your confidence in your own ideas about\r\n			this should vary. You must guard against both arrogance and false modesty in terms of knowing\r\n			what the customer really wants. Programmers are trained to design and create. Market researchers\r\n			are trained to figure out what people want. These two kinds of people, or two modes of thought in\r\n			the same person, working harmoniously together give the best chance of formulating the correct\r\n			vision.<br />\r\n			<br />\r\n			The more time you spend with users the better you will be able to understand what will really be\r\n			successful. You should try to test your ideas against them as much as you can. You should eat and\r\n			drink with them if you can.<br />\r\n			<br />\r\n			Guy Kawasaki[Rules] has emphasized the importance of watching what your users do in addition\r\n			to listening to them.<br />\r\n			<br />\r\n			I believe contractors and consultants often have tremendous problems getting their clients to clarify\r\n			in their own minds what they really want. If you intend to be a consultant, I suggest you choose your clients based on their clear-headedness as well as their pocketbooks.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222769911, 'theory', 1, 92, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:26:"How to Understand the User";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(92, 'How to Fight Schedule Pressure', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Fight Schedule Pressure</h1>\r\n			Time-to-market pressure is the pressure to deliver a good product quickly. It is good because it reflects\r\n			a financial reality, and is healthy up to a point. Schedule pressure is the pressure to deliver\r\n			something faster than it can be delivered and it is wasteful, unhealthy, and all too common.<br />\r\n			<br />\r\n			Schedule pressure exists for several reasons. The people who task programmers do not fully appreciate\r\n			what a strong work ethic we have and how much fun it is to be a programmer. Perhaps\r\n			because they project their own behavior onto us, they believe that asking for it sooner will make\r\n			us work harder to get it there sooner. This is probably actually true, but the effect is very small,\r\n			and the damage is very great. Additionally, they have no visibility into what it really takes to produce\r\n			software. Not being able to see it, and not be able to create it themselves, the only thing they\r\n			can do is see time-to-market pressure and fuss at programmers about it.<br />\r\n			<br />\r\n			The key to fighting schedule pressure is simply to turn it into time-to-market pressure. The way to\r\n			do this to give visibility into the relationship between the available labor and the product. Producing\r\n			an honest, detailed, and most of all, understandable estimate of all the labor involved is the\r\n			best way to do this. It has the added advantage of allowing good management decisions to be\r\n			made about possible functionality tradeoffs.<br />\r\n			<br />\r\n			The key insight that the estimate must make plain is that labor is an almost incompressible fluid.\r\n			You can&#39;t pack more into a span of time anymore than you can pack more water into a container\r\n			over and above that container&#39;s volume. In a sense, a programmer should never say ‘no’, but rather\r\n			to say ‘What will you give up to get that thing you want?’ The effect of producing clear estimates\r\n			will be to increase the respect for programmers. This is how other professionals behave. Programmers&#39;\r\n			hard work will be visible. Setting an unrealistic schedule will also be painfully obvious to\r\n			everyone. Programmers cannot be hoodwinked. It is disrespectful and demoralizing to ask them to\r\n			do something unrealistic. Extreme Programming amplifies this and builds a process around it; I\r\n			hope that every reader will be lucky enough to use it.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222769805, 'theory', 1, 93, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:30:"How to Fight Schedule Pressure";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(93, 'Choosing Languages', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>Choosing Languages</h1>\r\n			The solitary programmer that loves her work (a hacker) can choose the best language for the task.\r\n			Most working programmers have very little control of the language they will use. Generally, this\r\n			issue is dictated by pointy-haired bosses who are making a political decision, rather than a technological\r\n			decision, and lack the courage to promote an unconventional tool even when they know,\r\n			often with firsthand knowledge, that the less accepted tool is best. In other cases the very real benefit\r\n			of unity among the team, and to some extent with a larger community, precludes choice on the\r\n			part of the individual. Often managers are driven by the need to be able to hire programmers with\r\n			experience in a given language. No doubt they are serving what they perceive to be the best interests\r\n			of the project or company, and must be respected for that. However, I personally believe this\r\n			the most wasteful and erroneous common practice you are likely to encounter.<br />\r\n			<br />\r\n			But of course, things are never one-dimensional. Even if a core language is mandated and beyond\r\n			your control, it is often the case that tools and other programs can and should be written in a different\r\n			language. If a language is to be embedded (and you should always consider it!) the choice\r\n			of language will depend a lot on the culture of the users. One should take advantage of this to\r\n			serve your company or project by using the best language for the job, and in so doing make work\r\n			more interesting.<br />\r\n			<br />\r\n			Programming languages should really be called notations in that learning one is not at all as difficult\r\n			as learning a natural language. To beginners and to some outsiders ``learning a new language&#39;&#39;\r\n			seems a daunting task; but after you have three under your belt it&#39;s really just a question of becoming\r\n			familiar with the available libraries. One tends to think of a large system that has components\r\n			in three or four languages as a messy hodgepodge; but I argue that such a system is in many cases\r\n			stronger than a one-language system in several ways:<br />\r\n			<br />\r\n			• There is necessarily loose coupling between the components that are written in different notations\r\n			(though maybe not clean interfaces),<br />\r\n			• You can evolve to a new language/platform easily by rewriting each component individually,<br />\r\n			• Its possible that some of the modules are actually up-to-date.<br />\r\n			<br />\r\n			Some of these effects may only be psychological; but psychology matters. In the end the costs of\r\n			language tyranny outweigh any advantage that it provides.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222769173, 'theory', 1, 95, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:18:"Choosing Languages";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(94, 'How to Tell the Hard From the Impossible', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Tell the Hard From the Impossible</h1>\r\n			It is our job to do the hard and discern the impossible. From the point of view of most working\r\n			programmers, something is impossible if either it cannot be grown from a simple system or it cannot\r\n			be estimated. By this definition what is called research is impossible. A large volume of mere\r\n			work is hard, but not necessarily impossible.<br />\r\n			<br />\r\n			The distinction is not facetious because you may very well be asked to do what is practically impossible,\r\n			either from a scientific point of view or a software engineering point of view. It then becomes\r\n			your job to help the entrepreneur find a reasonable solution which is merely hard and gets\r\n			most of what they wanted. A solution is merely hard when it can be confidently scheduled and the\r\n			risks are understood.<br />\r\n			<br />\r\n			It is impossible to satisfy a vague requirement, such as ‘Build a system that will compute the most\r\n			attractive hair style and color for any person.’ If the requirement can be made more crisp, it will\r\n			often become merely hard, such as ‘Build a system to compute an attractive hair style and color\r\n			for a person, allow them to preview it and make changes, and have the customer satisfaction based\r\n			on the original styling be so great that we make a lot of money.’ If there is not crisp definition of\r\n			success, you will not succeed.\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222767595, 'theory', 1, 0, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:40:"How to Tell the Hard From the Impossible";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, ''),
(95, 'How to Utilize Embedded Languages', '<table border="0" cellspacing="2" cellpadding="2" width="98%" align="center">\r\n	<tbody>\r\n		<tr>\r\n			<td align="justify">\r\n			<h1>How to Utilize Embedded Languages</h1>\r\n			Embedding a programming language into a system has an almost erotic fascination to a programmer.\r\n			It is one of the most creative acts that can be performed. It makes the system tremendously\r\n			powerful. It allows you to exercise your most creative and Promethean skills. It makes the system\r\n			into your friend.<br />\r\n			<br />\r\n			The best text editors in the world all have embedded languages. This can be used to the extent that\r\n			the intended audience can master the language. Of course, use of the language can be made optional,\r\n			as it is in text editors, so that initiates can use it and no one else has to.<br />\r\n			<br />\r\n			I and many other programmers have fallen into the trap of creating special purpose embedded languages.\r\n			I fell into it twice. There already exist many languages designed specifically to be embedded\r\n			languages. You should think twice before creating a new one.<br />\r\n			<br />\r\n			The real question to ask oneself before embedding a language is: Does this work with or against\r\n			the culture of my audience? If you intended audience is exclusively non-programmers, how will it\r\n			help? If your intended audience is exclusively programmers, would they prefer an applications\r\n			programmers interface (API)? And what language will it be? Programmers don&#39;t want to learn a\r\n			new language that is narrowly used; but if it meshes with their culture they will not have to spend\r\n			much time learning it. It is a joy to create a new language. But we should not let that blind us to\r\n			the needs of the user. Unless you have some truly original needs and ideas, why not use an existing\r\n			language so that you can leverage the familiarity users already have with it?\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n', 0, 5, 1222767684, 'theory', 1, 94, 'a:3:{s:18:"hide_complete_unit";s:1:"0";s:15:"hide_navigation";s:1:"0";s:7:"indexed";s:1:"0";}', 'a:5:{s:5:"title";s:33:"How to Utilize Embedded Languages";s:7:"creator";s:15:"George Goudelis";s:9:"publisher";s:15:"George Goudelis";s:11:"contributor";s:15:"George Goudelis";s:4:"date";s:10:"2008/09/30";}', NULL, 1, '');

-- --------------------------------------------------------

--
-- Table structure for table `courses`
--

CREATE TABLE IF NOT EXISTS `courses` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  `archive` int(10) unsigned DEFAULT '0',
  `created` int(10) unsigned DEFAULT NULL,
  `start_date` int(10) unsigned DEFAULT NULL,
  `end_date` int(10) unsigned DEFAULT NULL,
  `options` text,
  `metadata` text,
  `description` text,
  `info` text,
  `price` float DEFAULT '0',
  `show_catalog` tinyint(1) NOT NULL DEFAULT '1',
  `publish` tinyint(1) DEFAULT '1',
  `directions_ID` mediumint(8) unsigned DEFAULT NULL,
  `languages_NAME` varchar(50) NOT NULL,
  `reset` tinyint(1) NOT NULL DEFAULT '0',
  `certificate_expiration` int(10) unsigned DEFAULT NULL,
  `max_users` int(10) unsigned DEFAULT NULL,
  `rules` text,
  `instance_source` mediumint(8) unsigned DEFAULT '0',
  `supervisor_LOGIN` varchar(100) DEFAULT NULL,
  `depends_on` mediumint(8) unsigned DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `instance_source` (`instance_source`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

--
-- Dumping data for table `courses`
--

INSERT INTO `courses` (`id`, `name`, `active`, `archive`, `created`, `start_date`, `end_date`, `options`, `metadata`, `description`, `info`, `price`, `show_catalog`, `publish`, `directions_ID`, `languages_NAME`, `reset`, `certificate_expiration`, `max_users`, `rules`, `instance_source`, `supervisor_LOGIN`, `depends_on`) VALUES
(1, 'How to be a programmer', 1, 0, 1426217780, 0, 0, 'a:12:{s:9:"recurring";i:0;s:18:"recurring_duration";i:0;s:13:"auto_complete";i:1;s:16:"auto_certificate";i:0;s:11:"certificate";s:0:"";s:18:"certificate_tpl_id";i:0;s:22:"certificate_tpl_id_rtf";i:0;s:25:"certificate_export_method";s:3:"xml";s:8:"duration";i:0;s:14:"training_hours";s:0:"";s:10:"start_date";s:0:"";s:8:"end_date";s:0:"";}', 'a:7:{s:5:"title";s:22:"How to be a programmer";s:7:"creator";s:24:"Administrator S. (admin)";s:9:"publisher";s:24:"Administrator S. (admin)";s:11:"contributor";s:24:"Administrator S. (admin)";s:4:"date";s:10:"2015/03/13";s:8:"language";N;s:4:"type";s:6:"course";}', '', 'a:0:{}', 0, 1, 1, 2, 'english', 0, 0, 0, 'a:0:{}', 0, '', 0);

-- --------------------------------------------------------

--
-- Table structure for table `courses_to_groups`
--

CREATE TABLE IF NOT EXISTS `courses_to_groups` (
  `courses_ID` mediumint(8) unsigned NOT NULL,
  `user_type` varchar(50) DEFAULT 'student',
  `groups_ID` mediumint(8) unsigned NOT NULL,
  PRIMARY KEY (`courses_ID`,`groups_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `directions`
--

CREATE TABLE IF NOT EXISTS `directions` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  `parent_direction_ID` mediumint(8) unsigned DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3 ;

--
-- Dumping data for table `directions`
--

INSERT INTO `directions` (`id`, `name`, `active`, `parent_direction_ID`) VALUES
(1, 'Ancient Civilizations', 1, 0),
(2, 'Programming', 1, 0);

-- --------------------------------------------------------

--
-- Table structure for table `done_questions`
--

CREATE TABLE IF NOT EXISTS `done_questions` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `done_tests_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `questions_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `answer` text,
  `score` float DEFAULT '0',
  `timestamp` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `done_tests`
--

CREATE TABLE IF NOT EXISTS `done_tests` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `users_LOGIN` varchar(100) NOT NULL,
  `tests_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `timestamp` int(10) unsigned NOT NULL,
  `score` float DEFAULT '0',
  `comments` text,
  `duration` mediumint(10) unsigned NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `events`
--

CREATE TABLE IF NOT EXISTS `events` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `users_LOGIN` varchar(100) NOT NULL,
  `users_name` varchar(255) NOT NULL,
  `users_surname` varchar(255) NOT NULL,
  `timestamp` int(10) NOT NULL,
  `type` int(11) NOT NULL,
  `lessons_ID` varchar(255) DEFAULT NULL,
  `lessons_name` varchar(255) DEFAULT NULL,
  `entity_ID` varchar(255) DEFAULT NULL,
  `entity_name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `users_LOGIN` (`users_LOGIN`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=140 ;

--
-- Dumping data for table `events`
--

INSERT INTO `events` (`id`, `users_LOGIN`, `users_name`, `users_surname`, `timestamp`, `type`, `lessons_ID`, `lessons_name`, `entity_ID`, `entity_name`) VALUES
(1, 'admin', 'System', 'Administrator', 1426217774, 1, NULL, NULL, NULL, 'admin'),
(2, 'professor', 'Default', 'Professor', 1426217774, 1, NULL, NULL, NULL, 'professor'),
(3, 'student', 'Default', 'Student', 1426217774, 1, NULL, NULL, NULL, 'student'),
(4, 'professor', 'Default', 'Professor', 1426217776, 26, '1', 'Greedy algorithms', NULL, NULL),
(5, 'student', 'Default', 'Student', 1426217776, 25, '1', 'Greedy algorithms', NULL, NULL),
(6, 'professor', 'Default', 'Professor', 1426217780, 26, '2', 'Maya civilization', NULL, NULL),
(7, 'student', 'Default', 'Student', 1426217780, 25, '2', 'Maya civilization', NULL, NULL),
(8, 'student', 'Default', 'Student', 1426217795, 50, '1', 'How to be a programmer', NULL, NULL),
(9, 'professor', 'Default', 'Professor', 1426217795, 51, '1', 'How to be a programmer', NULL, NULL),
(10, 'admin', 'System', 'Administrator', 1426220401, 2, NULL, NULL, NULL, NULL),
(11, 'admin', 'System', 'Administrator', 1426220458, 2, NULL, NULL, NULL, NULL),
(12, 'student', 'Default', 'Student', 1426220490, 2, NULL, NULL, NULL, NULL),
(13, 'professor', 'Default', 'Professor', 1426220879, 2, NULL, NULL, NULL, NULL),
(14, 'admin', 'System', 'Administrator', 1426220965, 2, NULL, NULL, NULL, NULL),
(15, 'student', 'Default', 'Student', 1426221174, 2, NULL, NULL, NULL, NULL),
(16, 'student', 'Default', 'Student', 1426221184, 27, '2', 'Maya civilization', NULL, NULL),
(17, 'student', 'Default', 'Student', 1426221320, 2, NULL, NULL, NULL, NULL),
(18, 'professor', 'Default', 'Professor', 1426221459, 2, NULL, NULL, NULL, NULL),
(19, 'student', 'Default', 'Student', 1426221509, 2, NULL, NULL, NULL, NULL),
(20, 'admin', 'System', 'Administrator', 1426221553, 2, NULL, NULL, NULL, NULL),
(21, 'professor', 'Default', 'Professor', 1426221611, 2, NULL, NULL, NULL, NULL),
(22, 'student', 'Default', 'Student', 1426221666, 2, NULL, NULL, NULL, NULL),
(23, 'student', 'Default', 'Student', 1426221667, 27, '2', 'Maya civilization', NULL, NULL),
(24, 'student', 'Default', 'Student', 1426221696, 103, '2', 'Maya civilization', '29', 'The Maya Civilization'),
(25, 'student', 'Default', 'Student', 1426221697, 103, '2', 'Maya civilization', '29', 'The Maya Civilization'),
(26, 'student', 'Default', 'Student', 1426221700, 103, '2', 'Maya civilization', '26', 'Geographical Position'),
(27, 'student', 'Default', 'Student', 1426221702, 103, '2', 'Maya civilization', '28', 'Preclassic'),
(28, 'student', 'Default', 'Student', 1426221707, 103, '2', 'Maya civilization', '25', 'Classic'),
(29, 'student', 'Default', 'Student', 1426221708, 103, '2', 'Maya civilization', '21', 'Postclassic'),
(30, 'student', 'Default', 'Student', 1426221711, 103, '2', 'Maya civilization', '22', 'Colonial Period'),
(31, 'student', 'Default', 'Student', 1426221713, 103, '2', 'Maya civilization', '23', 'Political Structures'),
(32, 'student', 'Default', 'Student', 1426221716, 103, '2', 'Maya civilization', '24', 'Art'),
(33, 'student', 'Default', 'Student', 1426221719, 103, '2', 'Maya civilization', '19', 'Writing'),
(34, 'student', 'Default', 'Student', 1426221723, 103, '2', 'Maya civilization', '20', 'Architecture'),
(35, 'student', 'Default', 'Student', 1426221726, 103, '2', 'Maya civilization', '17', 'Astronomy'),
(36, 'student', 'Default', 'Student', 1426221730, 103, '2', 'Maya civilization', '18', 'Mathematics'),
(37, 'student', 'Default', 'Student', 1426221734, 103, '2', 'Maya civilization', '16', 'Religion'),
(38, 'student', 'Default', 'Student', 1426221741, 76, '2', 'Maya civilization', '2', 'Maya History Test'),
(39, 'student', 'Default', 'Student', 1426221750, 77, '2', 'Maya civilization', '2', 'Maya History Test'),
(40, 'admin', 'System', 'Administrator', 1426221772, 2, NULL, NULL, NULL, NULL),
(41, 'professor', 'Default', 'Professor', 1426221793, 2, NULL, NULL, NULL, NULL),
(42, 'student', 'Default', 'Student', 1426222158, 2, NULL, NULL, NULL, NULL),
(43, 'student2', 'alert(1)', 'alert(2)', 1426222343, 1, NULL, NULL, NULL, 'student2'),
(44, 'student2', 'alert(1)', 'alert(2)', 1426222343, 5, NULL, NULL, NULL, NULL),
(45, 'admin', 'System', 'Administrator', 1426222377, 2, NULL, NULL, NULL, NULL),
(46, 'student2', 'alert(1)', 'alert(2)', 1426222407, 151, '0', NULL, '1', NULL),
(47, 'student2', 'alert(1)', 'alert(2)', 1426222430, 2, NULL, NULL, NULL, NULL),
(48, 'student2', 'alert(1)', 'alert(2)', 1426222440, 151, '0', NULL, '2', NULL),
(49, 'student2', 'alert(1)', 'alert(2)', 1426222500, 151, '0', NULL, '3', NULL),
(50, 'student2', 'a', 'a', 1426222539, 151, '0', NULL, '4', NULL),
(51, 'student2', 'a', '"><img src=x onerror=prompt(1);>', 1426222602, 151, '0', NULL, '5', NULL),
(52, 'student2', 'a', 'aaa', 1426222611, 151, '0', NULL, '6', NULL),
(53, 'professor', 'Default', 'Professor', 1426222767, 2, NULL, NULL, NULL, NULL),
(54, 'student', 'Default', 'Student', 1426223420, 2, NULL, NULL, NULL, NULL),
(55, 'student', 'Default', 'Student', 1426223444, 27, '2', 'Maya civilization', NULL, NULL),
(56, 'professor', 'Default', 'Professor', 1426223723, 2, NULL, NULL, NULL, NULL),
(57, 'admin', 'System', 'Administrator', 1426223786, 2, NULL, NULL, NULL, NULL),
(58, 'admin', 'System', 'Administrator', 1426261388, 2, NULL, NULL, NULL, NULL),
(59, 'admin', 'System', 'Administrator', 1426321915, 2, NULL, NULL, NULL, NULL),
(60, 'admin', 'System', 'Administrator', 1426386673, 2, NULL, NULL, NULL, NULL),
(61, 'admin', 'System', 'Administrator', 1426398824, 2, NULL, NULL, NULL, NULL),
(62, 'admin', 'System', 'Administrator', 1426401211, 2, NULL, NULL, NULL, NULL),
(63, 'admin', 'System', 'Administrator', 1426436724, 2, NULL, NULL, NULL, NULL),
(64, 'admin', 'System', 'Administrator', 1426442885, 2, NULL, NULL, NULL, NULL),
(65, 'professor', 'Default', 'Professor', 1426442915, 2, NULL, NULL, NULL, NULL),
(66, 'student', 'Default', 'Student', 1426442935, 2, NULL, NULL, NULL, NULL),
(67, 'student2', 'a', 'aaa', 1426442943, 2, NULL, NULL, NULL, NULL),
(68, 'professor', 'Default', 'Professor', 1426447020, 2, NULL, NULL, NULL, NULL),
(69, 'student', 'Default', 'Student', 1426447068, 2, NULL, NULL, NULL, NULL),
(70, 'admin', 'System', 'Administrator', 1426447095, 2, NULL, NULL, NULL, NULL),
(71, 'student', 'Default', 'Student', 1426447332, 2, NULL, NULL, NULL, NULL),
(72, 'professor', 'Default', 'Professor', 1426447408, 2, NULL, NULL, NULL, NULL),
(73, 'admin', 'System', 'Administrator', 1426447467, 2, NULL, NULL, NULL, NULL),
(74, 'admin', 'System', 'Administrator', 1426475095, 2, NULL, NULL, NULL, NULL),
(75, 'admin', 'System', 'Administrator', 1426476677, 2, NULL, NULL, NULL, NULL),
(76, 'admin', 'System', 'Administrator', 1426487323, 2, NULL, NULL, NULL, NULL),
(77, 'admin', 'System', 'Administrator', 1426496232, 2, NULL, NULL, NULL, NULL),
(78, 'admin', 'System', 'Administrator', 1426496376, 2, NULL, NULL, NULL, NULL),
(79, 'student', 'Default', 'Student', 1426528559, 2, NULL, NULL, NULL, NULL),
(80, 'professor', 'Default', 'Professor', 1426528578, 2, NULL, NULL, NULL, NULL),
(81, 'admin', 'System', 'Administrator', 1426528602, 2, NULL, NULL, NULL, NULL),
(82, 'admin', 'System', 'Administrator', 1426528685, 2, NULL, NULL, NULL, NULL),
(83, 'admin', 'System', 'Administrator', 1461075813, 2, NULL, NULL, NULL, NULL),
(84, 'admin', 'System', 'Administrator', 1461075971, 2, NULL, NULL, NULL, NULL),
(85, 'admin', 'System', 'Administrator', 1461075972, 2, NULL, NULL, NULL, NULL),
(86, 'admin', 'System', 'Administrator', 1461075972, 2, NULL, NULL, NULL, NULL),
(87, 'admin', 'System', 'Administrator', 1461075972, 2, NULL, NULL, NULL, NULL),
(88, 'admin', 'System', 'Administrator', 1461075973, 2, NULL, NULL, NULL, NULL),
(89, 'admin', 'System', 'Administrator', 1461075974, 2, NULL, NULL, NULL, NULL),
(90, 'admin', 'System', 'Administrator', 1461075974, 2, NULL, NULL, NULL, NULL),
(91, 'admin', 'System', 'Administrator', 1461075975, 2, NULL, NULL, NULL, NULL),
(92, 'admin', 'System', 'Administrator', 1461075975, 2, NULL, NULL, NULL, NULL),
(93, 'admin', 'System', 'Administrator', 1461075976, 2, NULL, NULL, NULL, NULL),
(94, 'admin', 'System', 'Administrator', 1461075976, 2, NULL, NULL, NULL, NULL),
(95, 'admin', 'System', 'Administrator', 1461075977, 2, NULL, NULL, NULL, NULL),
(96, 'admin', 'System', 'Administrator', 1461075978, 2, NULL, NULL, NULL, NULL),
(97, 'admin', 'System', 'Administrator', 1461075979, 2, NULL, NULL, NULL, NULL),
(98, 'admin', 'System', 'Administrator', 1461075979, 2, NULL, NULL, NULL, NULL),
(99, 'admin', 'System', 'Administrator', 1461075979, 2, NULL, NULL, NULL, NULL),
(100, 'admin', 'System', 'Administrator', 1461075980, 2, NULL, NULL, NULL, NULL),
(101, 'admin', 'System', 'Administrator', 1461075980, 2, NULL, NULL, NULL, NULL),
(102, 'admin', 'System', 'Administrator', 1461075981, 2, NULL, NULL, NULL, NULL),
(103, 'admin', 'System', 'Administrator', 1461075982, 2, NULL, NULL, NULL, NULL),
(104, 'admin', 'System', 'Administrator', 1461075983, 2, NULL, NULL, NULL, NULL),
(105, 'admin', 'System', 'Administrator', 1461075984, 2, NULL, NULL, NULL, NULL),
(106, 'admin', 'System', 'Administrator', 1461075985, 2, NULL, NULL, NULL, NULL),
(107, 'admin', 'System', 'Administrator', 1461075985, 2, NULL, NULL, NULL, NULL),
(108, 'admin', 'System', 'Administrator', 1461075986, 2, NULL, NULL, NULL, NULL),
(109, 'admin', 'System', 'Administrator', 1461075986, 2, NULL, NULL, NULL, NULL),
(110, 'admin', 'System', 'Administrator', 1461075987, 2, NULL, NULL, NULL, NULL),
(111, 'admin', 'System', 'Administrator', 1461075988, 2, NULL, NULL, NULL, NULL),
(112, 'admin', 'System', 'Administrator', 1461075988, 2, NULL, NULL, NULL, NULL),
(113, 'admin', 'System', 'Administrator', 1461075988, 2, NULL, NULL, NULL, NULL),
(114, 'admin', 'System', 'Administrator', 1461075989, 2, NULL, NULL, NULL, NULL),
(115, 'admin', 'System', 'Administrator', 1461075989, 2, NULL, NULL, NULL, NULL),
(116, 'admin', 'System', 'Administrator', 1461075990, 2, NULL, NULL, NULL, NULL),
(117, 'admin', 'System', 'Administrator', 1461075991, 2, NULL, NULL, NULL, NULL),
(118, 'admin', 'System', 'Administrator', 1461075993, 2, NULL, NULL, NULL, NULL),
(119, 'admin', 'System', 'Administrator', 1461075994, 2, NULL, NULL, NULL, NULL),
(120, 'admin', 'System', 'Administrator', 1461075995, 2, NULL, NULL, NULL, NULL),
(121, 'admin', 'System', 'Administrator', 1461075995, 2, NULL, NULL, NULL, NULL),
(122, 'admin', 'System', 'Administrator', 1461075996, 2, NULL, NULL, NULL, NULL),
(123, 'admin', 'System', 'Administrator', 1461075997, 2, NULL, NULL, NULL, NULL),
(124, 'admin', 'System', 'Administrator', 1461075998, 2, NULL, NULL, NULL, NULL),
(125, 'admin', 'System', 'Administrator', 1461075999, 2, NULL, NULL, NULL, NULL),
(126, 'admin', 'System', 'Administrator', 1461075999, 2, NULL, NULL, NULL, NULL),
(127, 'admin', 'System', 'Administrator', 1461076000, 2, NULL, NULL, NULL, NULL),
(128, 'admin', 'System', 'Administrator', 1461076000, 2, NULL, NULL, NULL, NULL),
(129, 'admin', 'System', 'Administrator', 1461076001, 2, NULL, NULL, NULL, NULL),
(130, 'admin', 'System', 'Administrator', 1461076001, 2, NULL, NULL, NULL, NULL),
(131, 'admin', 'System', 'Administrator', 1461076002, 2, NULL, NULL, NULL, NULL),
(132, 'admin', 'System', 'Administrator', 1461076002, 2, NULL, NULL, NULL, NULL),
(133, 'admin', 'System', 'Administrator', 1461076003, 2, NULL, NULL, NULL, NULL),
(134, 'admin', 'System', 'Administrator', 1461076004, 2, NULL, NULL, NULL, NULL),
(135, 'admin', 'System', 'Administrator', 1461076004, 2, NULL, NULL, NULL, NULL),
(136, 'admin', 'System', 'Administrator', 1461076006, 2, NULL, NULL, NULL, NULL),
(137, 'admin', 'System', 'Administrator', 1461076006, 2, NULL, NULL, NULL, NULL),
(138, 'admin', 'System', 'Administrator', 1461076006, 2, NULL, NULL, NULL, NULL),
(139, 'admin', 'System', 'Administrator', 1461076007, 2, NULL, NULL, NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `event_notifications`
--

CREATE TABLE IF NOT EXISTS `event_notifications` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `event_type` int(11) NOT NULL,
  `after_time` int(10) NOT NULL DEFAULT '0',
  `send_conditions` text,
  `send_recipients` int(1) DEFAULT '1',
  `subject` varchar(255) NOT NULL,
  `message` text,
  `active` tinyint(1) DEFAULT '1',
  `html_message` tinyint(1) DEFAULT '0',
  `send_immediately` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=5 ;

--
-- Dumping data for table `event_notifications`
--

INSERT INTO `event_notifications` (`id`, `event_type`, `after_time`, `send_conditions`, `send_recipients`, `subject`, `message`, `active`, `html_message`, `send_immediately`) VALUES
(1, 4, 0, 'a:0:{}', 1, 'Recover your password', 'Dear user ###users_name###,<br><br>This is an automated email sent from ###host_name### because you asked to recover your password. Please click the confirmation link below:.<br><br>###host_name###/index.php?ctg=reset_pwd&login=###users_login###&id=###md5(###users_login###)###<br><br>Alternatively, you may copy the link and paste it in your browser&#039;s address field.<br>Clicking on the link will confirm that your email address is valid so a new password can be sent to you. <br>For further information you may contact the system administrator through the following URL: ###host_name###/index.php?ctg=contact <br><br>With kind regards<br>---<br>The administration group<br>###site_name###<br>###site_motto###<br>This is an automated email sent from the address: ###host_name### on ###date###<br><br>', 1, 0, 1),
(2, 7, 0, 'a:0:{}', 1, 'Recover your password', 'Dear user ###users_name###,<br><br>This is an automated email sent from ###host_name### with your new account password. <br>Your new password is: <br><br>###new_password###<br>\n                              <br>For further information you may contact the system administrator through the following URL: ###host_name###/index.php?ctg=contact <br><br>With kind regards<br>---<br>The administration group<br>###site_name###<br>###site_motto###<br>This is an automated email sent from the address: ###host_name### on ###date###', 1, 0, 1),
(3, 6, 0, 'a:0:{}', 1, 'Account activation email', 'Dear user ###users_name###,<br><br>Welcome to our eLearning platform.! <br>Please, follow link below to activate your account:<br>###host_name###/index.php?account=###users_login###&key=###timestamp###<br><br><br>This is an automated email sent from the address: ###host_name### on ###date###<br>For further information you may contact the system administrator through the following URL: ###host_name###/index.php?ctg=contact <br><br>With kind regards<br>---<br>The administration group<br>###site_name###<br>###site_motto###<br>', 1, 0, 1),
(4, 5, 0, 'a:0:{}', 1, 'Registration email', 'Dear user ###users_name###,<br><br>Welcome to our eLearning platform. <br>Your account was successfully created with the following personal information:<br><br>Login: ###users_login###<br>First name: ###users_name###<br>Surname: ###users_surname###<br>Email address: ###users_email###<br>Language: ###users_language###<br>Comments: ###users_comments###<br><br>For further information you may contact the system administrator through the following URL: ###host_name###/index.php?ctg=contact <br><br>With kind regards<br>---<br>The administration group<br>###site_name###<br>###site_motto###<br>', 1, 0, 1);

-- --------------------------------------------------------

--
-- Table structure for table `files`
--

CREATE TABLE IF NOT EXISTS `files` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `path` text NOT NULL,
  `users_LOGIN` varchar(100) NOT NULL,
  `timestamp` int(10) unsigned NOT NULL,
  `description` text,
  `groups_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `access` smallint(3) unsigned NOT NULL DEFAULT '755',
  `shared` mediumint(8) unsigned DEFAULT '0',
  `metadata` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=7 ;

--
-- Dumping data for table `files`
--

INSERT INTO `files` (`id`, `path`, `users_LOGIN`, `timestamp`, `description`, `groups_ID`, `access`, `shared`, `metadata`) VALUES
(6, 'www/themes/default/images/avatars/system_avatars/unknown_small.png', 'student2', 1426222611, NULL, 0, 755, 0, 'a:6:{s:5:"title";s:17:"unknown_small.png";s:7:"creator";s:34:"a "><img src=x onerror=prompt(1);>";s:9:"publisher";s:34:"a "><img src=x onerror=prompt(1);>";s:11:"contributor";s:34:"a "><img src=x onerror=prompt(1);>";s:4:"date";s:10:"2015/03/13";s:4:"type";s:4:"file";}');

-- --------------------------------------------------------

--
-- Table structure for table `f_configuration`
--

CREATE TABLE IF NOT EXISTS `f_configuration` (
  `name` varchar(100) NOT NULL,
  `value` varchar(150) NOT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `f_folders`
--

CREATE TABLE IF NOT EXISTS `f_folders` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  `users_LOGIN` varchar(100) NOT NULL,
  `parent_id` mediumint(8) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`,`users_LOGIN`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=14 ;

--
-- Dumping data for table `f_folders`
--

INSERT INTO `f_folders` (`id`, `name`, `users_LOGIN`, `parent_id`) VALUES
(1, 'Incoming', 'admin', 0),
(2, 'Sent', 'admin', 0),
(3, 'Drafts', 'admin', 0),
(4, 'Incoming', 'professor', 0),
(5, 'Sent', 'professor', 0),
(6, 'Drafts', 'professor', 0),
(7, 'Incoming', 'student', 0),
(8, 'Sent', 'student', 0),
(9, 'Drafts', 'student', 0),
(10, 'test', 'student', 0),
(11, 'Incoming', 'student2', 0),
(12, 'Sent', 'student2', 0),
(13, 'Drafts', 'student2', 0);

-- --------------------------------------------------------

--
-- Table structure for table `f_forums`
--

CREATE TABLE IF NOT EXISTS `f_forums` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `lessons_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `parent_id` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `status` tinyint(1) NOT NULL DEFAULT '1',
  `users_LOGIN` varchar(100) NOT NULL,
  `comments` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=6 ;

--
-- Dumping data for table `f_forums`
--

INSERT INTO `f_forums` (`id`, `title`, `lessons_ID`, `parent_id`, `status`, `users_LOGIN`, `comments`) VALUES
(1, 'Greedy algorithms', 1, 0, 1, '', ''),
(2, 'Maya civilization', 2, 0, 1, '', ''),
(3, 'How to be a programmer - Beginner', 3, 0, 1, '', ''),
(4, 'How to be a programmer - Intermediate', 4, 0, 1, '', ''),
(5, 'How to be a programmer - Advanced', 5, 0, 1, '', '');

-- --------------------------------------------------------

--
-- Table structure for table `f_messages`
--

CREATE TABLE IF NOT EXISTS `f_messages` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `f_topics_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `title` varchar(255) NOT NULL,
  `body` text NOT NULL,
  `timestamp` int(10) unsigned NOT NULL,
  `users_LOGIN` varchar(100) NOT NULL,
  `replyto` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `rank` tinyint(4) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `f_personal_messages`
--

CREATE TABLE IF NOT EXISTS `f_personal_messages` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `users_LOGIN` varchar(100) NOT NULL,
  `recipient` text,
  `sender` varchar(100) NOT NULL,
  `timestamp` int(10) unsigned NOT NULL,
  `attachments` text,
  `title` varchar(255) NOT NULL,
  `body` text NOT NULL,
  `bcc` tinyint(1) NOT NULL DEFAULT '0',
  `f_folders_ID` mediumint(8) unsigned NOT NULL DEFAULT '1',
  `viewed` tinyint(1) NOT NULL DEFAULT '0',
  `priority` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `f_poll`
--

CREATE TABLE IF NOT EXISTS `f_poll` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `question` text NOT NULL,
  `options` text NOT NULL,
  `timestamp_created` int(10) unsigned NOT NULL,
  `users_LOGIN` varchar(100) NOT NULL,
  `f_forums_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `timestamp_start` int(10) unsigned NOT NULL,
  `timestamp_end` int(10) unsigned NOT NULL,
  `views` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `sticky` tinyint(1) NOT NULL DEFAULT '0',
  `comments` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `f_topics`
--

CREATE TABLE IF NOT EXISTS `f_topics` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `f_forums_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `timestamp` int(10) unsigned NOT NULL,
  `title` varchar(255) NOT NULL,
  `users_LOGIN` varchar(100) NOT NULL,
  `views` mediumint(8) unsigned DEFAULT '0',
  `viewed_by` text,
  `status` tinyint(1) NOT NULL DEFAULT '1',
  `sticky` tinyint(1) DEFAULT '0',
  `comments` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `f_users_to_polls`
--

CREATE TABLE IF NOT EXISTS `f_users_to_polls` (
  `f_poll_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `users_LOGIN` varchar(100) NOT NULL,
  `vote` tinyint(4) unsigned NOT NULL DEFAULT '0',
  `timestamp` int(10) unsigned NOT NULL,
  PRIMARY KEY (`f_poll_ID`,`users_LOGIN`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `glossary`
--

CREATE TABLE IF NOT EXISTS `glossary` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `lessons_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `info` text,
  `type` varchar(20) NOT NULL DEFAULT 'general',
  `active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=112 ;

--
-- Dumping data for table `glossary`
--

INSERT INTO `glossary` (`id`, `name`, `lessons_ID`, `info`, `type`, `active`) VALUES
(1, 'Maya', 2, 'A Central America Civilization', 'general', 1),
(2, 'Unesco', 2, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(3, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(4, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(5, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(6, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(7, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(8, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(9, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(10, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(11, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(12, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(13, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(14, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(15, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(16, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(17, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(18, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(19, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(20, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(21, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(22, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(23, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(24, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(25, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(26, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(27, 'bonking', 3, 'This term has several meanings, derived from ‘to hit’, but is particularly used by athletes to describe running out of blood<br />sugar or some other basic resource that manifests as a sudden, rather than gradual, degradation of performance or spirit. I<br />have been told it has an additional, and very different meaning, throughout some of the British Commonwealth.', 'general', 1),
(28, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(29, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(30, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(31, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(32, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(33, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(34, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(35, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(36, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(37, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(38, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(39, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(40, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(41, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(42, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(43, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(44, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(45, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(46, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(47, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(48, 'bonking', 3, 'This term has several meanings, derived from ‘to hit’, but is particularly used by athletes to describe running out of blood<br />sugar or some other basic resource that manifests as a sudden, rather than gradual, degradation of performance or spirit. I<br />have been told it has an additional, and very different meaning, throughout some of the British Commonwealth.', 'general', 1),
(49, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(50, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(51, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(52, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(53, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(54, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(55, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(56, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(57, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(58, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(59, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(60, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(61, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(62, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(63, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(64, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(65, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(66, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(67, 'Maya', 3, 'A Central America Civilization', 'general', 1),
(68, 'Unesco', 3, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(69, 'bonking', 3, 'This term has several meanings, derived from ‘to hit’, but is particularly used by athletes to describe running out of blood<br />sugar or some other basic resource that manifests as a sudden, rather than gradual, degradation of performance or spirit. I<br />have been told it has an additional, and very different meaning, throughout some of the British Commonwealth.', 'general', 1),
(70, 'Maya', 4, 'A Central America Civilization', 'general', 1),
(71, 'Unesco', 4, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(72, 'Maya', 4, 'A Central America Civilization', 'general', 1),
(73, 'Unesco', 4, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(74, 'Maya', 4, 'A Central America Civilization', 'general', 1),
(75, 'Unesco', 4, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(76, 'Maya', 4, 'A Central America Civilization', 'general', 1),
(77, 'Unesco', 4, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(78, 'Maya', 4, 'A Central America Civilization', 'general', 1),
(79, 'Unesco', 4, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(80, 'Maya', 4, 'A Central America Civilization', 'general', 1),
(81, 'Unesco', 4, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(82, 'Maya', 4, 'A Central America Civilization', 'general', 1),
(83, 'Unesco', 4, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(84, 'Maya', 4, 'A Central America Civilization', 'general', 1),
(85, 'Unesco', 4, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(86, 'Maya', 4, 'A Central America Civilization', 'general', 1),
(87, 'Unesco', 4, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(88, 'Maya', 4, 'A Central America Civilization', 'general', 1),
(89, 'Unesco', 4, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(90, 'bonking', 4, 'This term has several meanings, derived from ‘to hit’, but is particularly used by athletes to describe running out of blood<br />sugar or some other basic resource that manifests as a sudden, rather than gradual, degradation of performance or spirit. I<br />have been told it has an additional, and very different meaning, throughout some of the British Commonwealth.', 'general', 1),
(91, 'bonking', 5, 'This term has several meanings, derived from ‘to hit’, but is particularly used by athletes to describe running out of blood<br />sugar or some other basic resource that manifests as a sudden, rather than gradual, degradation of performance or spirit. I<br />have been told it has an additional, and very different meaning, throughout some of the British Commonwealth.', 'general', 1),
(92, 'Unesco', 5, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(93, 'Maya', 5, 'A Central America Civilization', 'general', 1),
(94, 'Unesco', 5, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(95, 'Maya', 5, 'A Central America Civilization', 'general', 1),
(96, 'Unesco', 5, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(97, 'Maya', 5, 'A Central America Civilization', 'general', 1),
(98, 'Unesco', 5, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(99, 'Maya', 5, 'A Central America Civilization', 'general', 1),
(100, 'Unesco', 5, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(101, 'Maya', 5, 'A Central America Civilization', 'general', 1),
(102, 'Maya', 5, 'A Central America Civilization', 'general', 1),
(103, 'Unesco', 5, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(104, 'Maya', 5, 'A Central America Civilization', 'general', 1),
(105, 'Unesco', 5, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(106, 'Maya', 5, 'A Central America Civilization', 'general', 1),
(107, 'Unesco', 5, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(108, 'Maya', 5, 'A Central America Civilization', 'general', 1),
(109, 'Unesco', 5, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1),
(110, 'Maya', 5, 'A Central America Civilization', 'general', 1),
(111, 'Unesco', 5, 'UNESCO functions as a laboratory of ideas and a standard-setter to forge universal agreements on emerging ethical issues. The Organization also serves as a clearinghouse – for the dissemination and sharing of information and knowledge – while helping Member States to build their human and institutional capacities in diverse fields. In short, UNESCO promotes international co-operation among its 192 Member States and six Associate Members in the fields of education, science, culture and communication.', 'general', 1);

-- --------------------------------------------------------

--
-- Table structure for table `groups`
--

CREATE TABLE IF NOT EXISTS `groups` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  `description` text,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  `dynamic` tinyint(1) NOT NULL DEFAULT '0',
  `created` int(10) unsigned DEFAULT NULL,
  `user_types_ID` varchar(50) DEFAULT '0',
  `languages_NAME` varchar(50) DEFAULT NULL,
  `users_active` tinyint(1) DEFAULT '0',
  `assign_profile_to_new` tinyint(1) DEFAULT '0',
  `unique_key` varchar(255) DEFAULT '',
  `is_default` tinyint(1) DEFAULT '0',
  `key_max_usage` mediumint(8) unsigned DEFAULT '0',
  `key_current_usage` mediumint(8) unsigned DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `languages`
--

CREATE TABLE IF NOT EXISTS `languages` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  `translation` varchar(50) DEFAULT NULL,
  `rtl` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=45 ;

--
-- Dumping data for table `languages`
--

INSERT INTO `languages` (`id`, `name`, `active`, `translation`, `rtl`) VALUES
(1, 'albanian', 1, 'Shqipe', 0),
(2, 'arabic', 1, 'العربية', 0),
(3, 'brazilian', 1, 'Brasileira', 0),
(4, 'bulgarian', 1, 'Български', 0),
(5, 'catalan', 1, 'Català', 0),
(6, 'chinese_simplified', 1, '中国简化', 0),
(7, 'chinese_traditional', 1, '中國傳統', 0),
(8, 'croatian', 1, 'Hrvatski', 0),
(9, 'czech', 1, 'Česky', 0),
(10, 'danish', 1, 'Dansk', 0),
(11, 'dutch', 1, 'Nederlands', 0),
(12, 'english', 1, 'English', 0),
(13, 'filipino', 1, 'Filipino', 0),
(14, 'finnish', 1, 'Suomi', 0),
(15, 'french', 1, 'Français', 0),
(16, 'galician', 1, 'Galego', 0),
(17, 'georgian', 1, 'ქართული', 0),
(18, 'german', 1, 'Deutsch', 0),
(19, 'greek', 1, 'Eλληνικά', 0),
(20, 'hebrew', 1, 'עברית', 0),
(21, 'hindi', 0, 'हिन्दी', 0),
(22, 'hungarian', 0, 'Magyar', 0),
(23, 'indonesian', 0, 'Indonesia', 0),
(24, 'italian', 0, 'Italiano', 0),
(25, 'japanese', 0, '日本語', 0),
(26, 'korean', 0, '한국어', 0),
(27, 'latin_american', 0, 'Latinoamérica', 0),
(28, 'latvian', 0, 'Latviešu', 0),
(29, 'lithuanian', 0, 'Lietuviškai', 0),
(30, 'norwegian', 0, 'Norsk', 0),
(31, 'persian', 0, 'فارسی', 0),
(32, 'polish', 0, 'Polski', 0),
(33, 'portuguese', 0, 'Português', 0),
(34, 'romanian', 0, 'Română', 0),
(35, 'russian', 0, 'Pусский', 0),
(36, 'serbian', 0, 'Српски', 0),
(37, 'slovak', 0, 'Slovenčina', 0),
(38, 'slovenian', 0, 'Slovenski', 0),
(39, 'spanish', 0, 'Español', 0),
(40, 'swedish', 0, 'Svenska', 0),
(41, 'thai', 0, 'ไทย', 0),
(42, 'turkish', 0, 'Türkçe', 0),
(43, 'ukrainian', 0, 'Українське', 0),
(44, 'vietnamese', 0, 'Việt', 0);

-- --------------------------------------------------------

--
-- Table structure for table `lessons`
--

CREATE TABLE IF NOT EXISTS `lessons` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  `directions_ID` mediumint(8) unsigned DEFAULT '0',
  `info` text,
  `price` float DEFAULT '0',
  `active` tinyint(1) NOT NULL DEFAULT '1',
  `show_catalog` tinyint(1) NOT NULL DEFAULT '1',
  `duration` int(10) DEFAULT '0',
  `options` text,
  `languages_NAME` varchar(50) NOT NULL,
  `metadata` text,
  `course_only` tinyint(1) DEFAULT '0',
  `certificate` text,
  `from_timestamp` int(10) unsigned DEFAULT NULL,
  `to_timestamp` int(10) unsigned DEFAULT NULL,
  `shift` tinyint(1) DEFAULT '0',
  `publish` tinyint(1) DEFAULT '1',
  `share_folder` int(10) DEFAULT '0',
  `created` int(10) unsigned DEFAULT NULL,
  `max_users` int(10) unsigned DEFAULT NULL,
  `archive` int(10) unsigned DEFAULT '0',
  `instance_source` mediumint(8) unsigned DEFAULT '0',
  `originating_course` mediumint(8) unsigned DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=6 ;

--
-- Dumping data for table `lessons`
--

INSERT INTO `lessons` (`id`, `name`, `directions_ID`, `info`, `price`, `active`, `show_catalog`, `duration`, `options`, `languages_NAME`, `metadata`, `course_only`, `certificate`, `from_timestamp`, `to_timestamp`, `shift`, `publish`, `share_folder`, `created`, `max_users`, `archive`, `instance_source`, `originating_course`) VALUES
(1, 'Greedy algorithms', 2, 'a:4:{s:19:"general_description";s:254:"This lesson is an introduction to a family of hard problems. These problems need an enormous amount of computational power if we seek for the best available solution. Alternatively, we can use heuristics that offer good (but often not optimal) solutions.";s:10:"objectives";s:59:"To get to know and experiment with several known algorithms";s:10:"assessment";s:29:"A simple three questions test";s:9:"resources";s:52:"This lesson uses extensive java based demonstrations";}', 0, 1, 1, 0, 'a:44:{s:6:"theory";i:1;s:8:"examples";i:1;s:8:"projects";i:1;s:5:"tests";i:1;s:6:"survey";i:1;s:5:"rules";i:1;s:5:"forum";i:1;s:8:"comments";i:1;s:6:"online";i:1;s:4:"chat";i:1;s:5:"scorm";i:1;s:15:"dynamic_periods";i:0;s:15:"digital_library";i:1;s:8:"calendar";i:1;s:11:"new_content";i:1;s:8:"glossary";i:1;s:8:"tracking";i:1;s:13:"auto_complete";i:0;s:4:"news";i:1;s:7:"reports";i:1;s:12:"content_tree";i:1;s:11:"lesson_info";i:1;s:11:"bookmarking";i:1;s:14:"content_report";i:0;s:12:"start_resume";i:1;s:15:"show_percentage";i:1;s:14:"show_right_bar";i:1;s:13:"show_left_bar";i:0;s:19:"show_student_cpanel";i:1;s:9:"recurring";i:0;s:18:"recurring_duration";i:0;s:18:"show_content_tools";i:1;s:14:"show_dashboard";i:1;s:17:"default_positions";s:894:"a:3:{s:5:"first";a:3:{i:0;s:18:"moduleControlPanel";i:1;s:17:"moduleContentTree";i:2;s:18:"moduleProjectsList";}s:6:"second";a:11:{i:0;s:11:"modulequote";i:1;s:14:"moduleNewsList";i:2;s:26:"modulePersonalMessagesList";i:3;s:15:"moduleForumList";i:4;s:14:"moduleComments";i:5;s:14:"moduleCalendar";i:6;s:20:"moduleDigitalLibrary";i:7;s:16:"modulequickmails";i:8;s:9:"modulerss";i:9;s:15:"modulethumbnail";i:10;s:10:"modulewiki";}s:10:"visibility";a:14:{s:18:"moduleControlPanel";s:1:"1";s:17:"moduleContentTree";s:1:"1";s:18:"moduleProjectsList";s:1:"1";s:11:"modulequote";s:1:"1";s:14:"moduleNewsList";s:1:"1";s:26:"modulePersonalMessagesList";s:1:"1";s:15:"moduleForumList";s:1:"1";s:14:"moduleComments";s:1:"1";s:14:"moduleCalendar";s:1:"1";s:20:"moduleDigitalLibrary";s:1:"1";s:16:"modulequickmails";s:1:"1";s:9:"modulerss";s:1:"1";s:15:"modulethumbnail";s:1:"1";s:10:"modulewiki";s:1:"1";}}";s:18:"module_quick_mails";i:0;s:12:"module_quote";i:0;s:14:"module_youtube";i:0;s:11:"module_wiki";i:0;s:16:"module_thumbnail";i:0;s:25:"module_questions_from_csv";i:0;s:10:"module_rss";i:0;s:13:"print_content";i:1;s:19:"show_horizontal_bar";i:1;s:8:"feedback";i:1;}', 'english', 'a:4:{s:8:"language";s:7:"English";s:5:"title";s:17:"Greedy algorithms";s:7:"creator";s:20:"Athanasios papagelis";s:7:"subject";s:10:"Algorithms";}', 0, '', 0, 0, 0, 1, 0, 1426217774, 0, 0, 0, 0),
(2, 'Maya civilization', 1, 'a:3:{s:10:"objectives";s:49:"To get to know a few basic information about Maya";s:19:"general_description";s:51:"This is an introductory lesson to Maya civilization";s:10:"assessment";s:18:"A small final test";}', 0, 1, 1, 0, 'a:38:{s:6:"theory";i:1;s:8:"examples";i:1;s:8:"projects";i:1;s:5:"tests";i:1;s:6:"survey";i:1;s:5:"rules";i:1;s:5:"forum";i:1;s:8:"comments";i:1;s:4:"news";i:1;s:6:"online";i:1;s:4:"chat";i:1;s:5:"scorm";i:1;s:15:"dynamic_periods";i:0;s:15:"digital_library";i:1;s:8:"calendar";i:1;s:11:"new_content";i:1;s:8:"glossary";i:1;s:7:"reports";i:1;s:8:"tracking";i:1;s:13:"auto_complete";i:1;s:12:"content_tree";i:1;s:11:"lesson_info";i:1;s:11:"bookmarking";i:1;s:14:"content_report";i:0;s:13:"print_content";i:1;s:12:"start_resume";i:1;s:15:"show_percentage";i:1;s:14:"show_right_bar";i:1;s:13:"show_left_bar";i:0;s:19:"show_student_cpanel";i:1;s:9:"recurring";i:0;s:18:"recurring_duration";i:0;s:18:"show_content_tools";i:1;s:14:"show_dashboard";i:1;s:19:"show_horizontal_bar";i:1;s:17:"default_positions";s:0:"";s:8:"feedback";i:1;s:20:"module_fuze_meetings";i:0;}', 'english', 'a:1:{s:5:"title";s:17:"Maya Civilization";}', 0, '', 0, 0, 0, 1, 0, 1426217776, 0, 0, 0, 0),
(3, 'How to be a programmer - Beginner', 2, 'a:2:{s:19:"general_description";s:52:"This lesson includes introductory programming topics";s:9:"resources";s:45:"Based on the short tutorial of Robert L. Read";}', 0, 1, 1, 0, 'a:42:{s:6:"theory";i:1;s:8:"examples";i:1;s:8:"projects";i:1;s:5:"tests";i:1;s:6:"survey";i:1;s:5:"rules";i:1;s:5:"forum";i:1;s:8:"comments";i:1;s:6:"online";i:1;s:4:"chat";i:1;s:5:"scorm";i:1;s:15:"dynamic_periods";i:0;s:15:"digital_library";i:1;s:8:"calendar";i:1;s:11:"new_content";i:1;s:8:"glossary";i:0;s:8:"tracking";i:1;s:13:"auto_complete";i:1;s:12:"content_tree";i:1;s:17:"default_positions";s:794:"a:3:{s:5:"first";a:6:{i:0;s:15:"modulebillboard";i:1;s:23:"moduleIconLessonOptions";i:2;s:17:"moduleContentTree";i:3;s:18:"moduleProjectsList";i:4;s:20:"moduleDigitalLibrary";i:5;s:14:"moduleComments";}s:6:"second";a:6:{i:0;s:14:"moduleNewsList";i:1;s:26:"modulePersonalMessagesList";i:2;s:15:"moduleForumList";i:3;s:14:"moduleCalendar";i:4;s:9:"modulefaq";i:5;s:11:"modulelinks";}s:10:"visibility";a:12:{s:15:"modulebillboard";s:1:"1";s:23:"moduleIconLessonOptions";s:1:"1";s:17:"moduleContentTree";s:1:"0";s:18:"moduleProjectsList";s:1:"0";s:20:"moduleDigitalLibrary";s:1:"1";s:14:"moduleComments";s:1:"1";s:14:"moduleNewsList";s:1:"1";s:26:"modulePersonalMessagesList";s:1:"1";s:15:"moduleForumList";s:1:"1";s:14:"moduleCalendar";s:1:"1";s:9:"modulefaq";s:1:"1";s:11:"modulelinks";s:1:"1";}}";s:16:"module_billboard";i:1;s:10:"module_faq";i:1;s:12:"module_links";i:1;s:10:"module_rss";i:0;s:4:"news";i:1;s:7:"reports";i:1;s:11:"lesson_info";i:1;s:11:"bookmarking";i:1;s:14:"content_report";i:0;s:13:"print_content";i:1;s:12:"start_resume";i:1;s:15:"show_percentage";i:1;s:14:"show_right_bar";i:1;s:13:"show_left_bar";i:0;s:19:"show_student_cpanel";i:1;s:9:"recurring";i:0;s:18:"recurring_duration";i:0;s:18:"show_content_tools";i:1;s:14:"show_dashboard";i:1;s:19:"show_horizontal_bar";i:1;s:8:"feedback";i:1;s:15:"module_workbook";i:0;}', 'english', 'a:6:{s:5:"title";s:22:"How to be a Programmer";s:7:"creator";s:19:"Thanasis Papaggelis";s:9:"publisher";s:19:"Thanasis Papaggelis";s:11:"contributor";s:19:"Thanasis Papaggelis";s:4:"date";s:10:"2008/09/29";s:8:"language";s:16:"Ελληνικά";}', 1, '', 0, 0, 0, 1, 0, 1426217780, 0, 0, 0, 0),
(4, 'How to be a programmer - Intermediate', 2, 'a:2:{s:10:"other_info";s:45:"Based on the short tutorial of Robert L. Read";s:19:"general_description";s:93:"This lesson includes intermediate programming topics for the programmer that gains experience";}', 0, 1, 1, 0, 'a:37:{s:6:"theory";i:1;s:8:"examples";i:1;s:8:"projects";i:1;s:5:"tests";i:1;s:6:"survey";i:1;s:5:"rules";i:1;s:5:"forum";i:1;s:8:"comments";i:1;s:6:"online";i:1;s:4:"chat";i:1;s:5:"scorm";i:1;s:15:"dynamic_periods";i:0;s:15:"digital_library";i:1;s:8:"calendar";i:1;s:11:"new_content";i:1;s:8:"glossary";i:1;s:8:"tracking";i:1;s:13:"auto_complete";i:1;s:12:"content_tree";i:1;s:11:"lesson_info";i:1;s:11:"bookmarking";i:1;s:14:"content_report";i:0;s:12:"start_resume";i:1;s:17:"default_positions";s:0:"";s:4:"news";i:1;s:7:"reports";i:1;s:13:"print_content";i:1;s:15:"show_percentage";i:1;s:14:"show_right_bar";i:1;s:13:"show_left_bar";i:0;s:19:"show_student_cpanel";i:1;s:9:"recurring";i:0;s:18:"recurring_duration";i:0;s:18:"show_content_tools";i:1;s:14:"show_dashboard";i:1;s:19:"show_horizontal_bar";i:1;s:8:"feedback";i:1;}', 'english', 'a:6:{s:5:"title";s:37:"How to be a Programmer - Intermediate";s:7:"creator";s:19:"Thanasis Papaggelis";s:9:"publisher";s:19:"Thanasis Papaggelis";s:11:"contributor";s:19:"Thanasis Papaggelis";s:4:"date";s:10:"2008/09/29";s:8:"language";s:16:"Ελληνικά";}', 1, '', 0, 0, 0, 1, 0, 1426217787, 0, 0, 0, 0),
(5, 'How to be a programmer - Advanced', 2, 'a:2:{s:19:"general_description";s:115:"This lesson includes advanced programming topics for experienced programmer or project manager of software projects";s:10:"other_info";s:45:"Based on the short tutorial of Robert L. Read";}', 0, 1, 1, 0, 'a:38:{s:6:"theory";i:1;s:8:"examples";i:1;s:8:"projects";i:1;s:5:"tests";i:1;s:6:"survey";i:1;s:5:"rules";i:1;s:5:"forum";i:1;s:8:"comments";i:1;s:6:"online";i:1;s:4:"chat";i:1;s:5:"scorm";i:1;s:15:"dynamic_periods";i:0;s:15:"digital_library";i:1;s:8:"calendar";i:1;s:11:"new_content";i:1;s:8:"glossary";i:1;s:8:"tracking";i:1;s:13:"auto_complete";i:1;s:12:"content_tree";i:1;s:11:"lesson_info";i:1;s:11:"bookmarking";i:1;s:14:"content_report";i:0;s:12:"start_resume";i:1;s:17:"default_positions";s:0:"";s:10:"module_rss";i:1;s:4:"news";i:1;s:7:"reports";i:1;s:13:"print_content";i:1;s:15:"show_percentage";i:1;s:14:"show_right_bar";i:1;s:13:"show_left_bar";i:0;s:19:"show_student_cpanel";i:1;s:9:"recurring";i:0;s:18:"recurring_duration";i:0;s:18:"show_content_tools";i:1;s:14:"show_dashboard";i:1;s:19:"show_horizontal_bar";i:1;s:8:"feedback";i:1;}', 'english', 'a:6:{s:5:"title";s:33:"How to be a Programmer - Advanced";s:7:"creator";s:19:"Thanasis Papaggelis";s:9:"publisher";s:19:"Thanasis Papaggelis";s:11:"contributor";s:19:"Thanasis Papaggelis";s:4:"date";s:10:"2008/09/29";s:8:"language";s:16:"Ελληνικά";}', 1, '', 0, 0, 0, 1, 0, 1426217791, 0, 0, 0, 0);

-- --------------------------------------------------------

--
-- Table structure for table `lessons_timeline_topics`
--

CREATE TABLE IF NOT EXISTS `lessons_timeline_topics` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `lessons_ID` mediumint(8) unsigned NOT NULL,
  `title` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `lessons_timeline_topics_data`
--

CREATE TABLE IF NOT EXISTS `lessons_timeline_topics_data` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `topics_ID` mediumint(8) unsigned NOT NULL,
  `users_LOGIN` varchar(100) NOT NULL,
  `data` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `lessons_to_courses`
--

CREATE TABLE IF NOT EXISTS `lessons_to_courses` (
  `courses_ID` mediumint(8) unsigned NOT NULL,
  `lessons_ID` mediumint(8) unsigned NOT NULL,
  `previous_lessons_ID` mediumint(8) unsigned DEFAULT '0',
  `start_date` int(10) unsigned DEFAULT NULL,
  `end_date` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`lessons_ID`,`courses_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `lessons_to_courses`
--

INSERT INTO `lessons_to_courses` (`courses_ID`, `lessons_ID`, `previous_lessons_ID`, `start_date`, `end_date`) VALUES
(1, 3, 0, NULL, NULL),
(1, 4, 3, NULL, NULL),
(1, 5, 4, NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `lessons_to_groups`
--

CREATE TABLE IF NOT EXISTS `lessons_to_groups` (
  `lessons_ID` mediumint(8) unsigned NOT NULL,
  `user_type` varchar(50) DEFAULT 'student',
  `groups_ID` mediumint(8) unsigned NOT NULL,
  PRIMARY KEY (`lessons_ID`,`groups_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `lesson_conditions`
--

CREATE TABLE IF NOT EXISTS `lesson_conditions` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `lessons_ID` mediumint(8) unsigned NOT NULL,
  `type` varchar(255) NOT NULL,
  `options` text,
  `relation` varchar(255) NOT NULL DEFAULT 'and',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=6 ;

--
-- Dumping data for table `lesson_conditions`
--

INSERT INTO `lesson_conditions` (`id`, `lessons_ID`, `type`, `options`, `relation`) VALUES
(1, 1, 'all_units', '', 'and'),
(2, 2, 'specific_test', 'a:2:{i:0;s:2:"30";i:1;s:2:"60";}', 'and'),
(3, 3, 'percentage_units', 'a:1:{i:0;s:2:"50";}', 'and'),
(4, 4, 'percentage_units', 'a:1:{i:0;s:2:"50";}', 'and'),
(5, 5, 'percentage_units', 'a:1:{i:0;s:2:"50";}', 'and');

-- --------------------------------------------------------

--
-- Table structure for table `logs`
--

CREATE TABLE IF NOT EXISTS `logs` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `users_LOGIN` varchar(100) NOT NULL,
  `timestamp` int(10) unsigned NOT NULL,
  `action` varchar(255) NOT NULL,
  `comments` varchar(32) NOT NULL DEFAULT '0',
  `session_ip` char(8) NOT NULL DEFAULT '0',
  `lessons_ID` mediumint(8) unsigned DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `timestamp` (`timestamp`),
  KEY `users_LOGIN` (`users_LOGIN`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=238 ;

--
-- Dumping data for table `logs`
--

INSERT INTO `logs` (`id`, `users_LOGIN`, `timestamp`, `action`, `comments`, `session_ip`, `lessons_ID`) VALUES
(1, 'admin', 1426220401, 'login', '44cnmueeou7rfj4sfihn9tjn67', 'c0a80290', 0),
(2, 'admin', 1426220448, 'logout', '0', 'c0a80290', 0),
(3, 'admin', 1426220458, 'login', '6u6kdkl5rrs2uc392qpb7fabs3', 'c0a80290', 0),
(4, 'admin', 1426220484, 'logout', '0', 'c0a80290', 0),
(5, 'student', 1426220490, 'login', 'qb7u5ub0ucomfv96qmnnjg0ee1', 'c0a80290', 0),
(6, 'student', 1426220872, 'logout', '0', 'c0a80290', 0),
(7, 'professor', 1426220879, 'login', 'aur102gqdujrm53guh7ufvl7j7', 'c0a80290', 0),
(8, 'professor', 1426220961, 'logout', '0', 'c0a80290', 0),
(9, 'admin', 1426220965, 'login', 'fc3hrmi95k2diqkp1jtqsgcl97', 'c0a80290', 0),
(10, 'admin', 1426221168, 'logout', '0', 'c0a80290', 0),
(11, 'student', 1426221174, 'login', '9qckp26qnbko03um7kt6b2gc66', 'c0a80290', 0),
(12, 'student', 1426221221, 'logout', '0', 'c0a80290', 0),
(13, 'student', 1426221320, 'login', '2oblbve8ndp5sfk4ha45092vc3', 'c0a80290', 0),
(14, 'professor', 1426221459, 'login', 'rt2sra2gmh59h1j6rfddc28ta0', 'c0a80290', 0),
(15, 'professor', 1426221503, 'logout', '0', 'c0a80290', 0),
(16, 'student', 1426221509, 'logout', '0', 'c0a80290', 0),
(17, 'student', 1426221509, 'login', 'e78242pnlnb530m9orbhocjgs6', 'c0a80290', 0),
(18, 'student', 1426221553, 'logout', '0', 'c0a80290', 0),
(19, 'admin', 1426221553, 'login', 'e78242pnlnb530m9orbhocjgs6', 'c0a80290', 0),
(20, 'admin', 1426221611, 'logout', '0', 'c0a80290', 0),
(21, 'professor', 1426221611, 'login', 'e78242pnlnb530m9orbhocjgs6', 'c0a80290', 0),
(22, 'professor', 1426221661, 'logout', '0', 'c0a80290', 0),
(23, 'student', 1426221666, 'login', '38ulsmq0p5enjm7njss6td0ng1', 'c0a80290', 0),
(24, 'student', 1426221769, 'logout', '0', 'c0a80290', 0),
(25, 'admin', 1426221772, 'login', 'dluvnsh5ju4c7nraevbj7vusc5', 'c0a80290', 0),
(26, 'admin', 1426221793, 'logout', '0', 'c0a80290', 0),
(27, 'professor', 1426221793, 'login', 'dluvnsh5ju4c7nraevbj7vusc5', 'c0a80290', 0),
(28, 'professor', 1426222158, 'logout', '0', 'c0a80290', 0),
(29, 'student', 1426222158, 'login', 'dluvnsh5ju4c7nraevbj7vusc5', 'c0a80290', 0),
(30, 'student', 1426222343, 'logout', '0', 'c0a80290', 0),
(31, 'student2', 1426222343, 'login', 'dluvnsh5ju4c7nraevbj7vusc5', 'c0a80290', 0),
(32, 'student2', 1426222372, 'logout', '0', 'c0a80290', 0),
(33, 'admin', 1426222377, 'login', 'qpph60ie4mps815ks4m2s496m5', 'c0a80290', 0),
(34, 'admin', 1426222422, 'logout', '0', 'c0a80290', 0),
(35, 'student2', 1426222429, 'login', 'asp1khgdp089a0tf5j6son4ac4', 'c0a80290', 0),
(36, 'student2', 1426222748, 'logout', '0', 'c0a80290', 0),
(37, 'professor', 1426222767, 'login', '55absovccvnob3blv9bddt5mr6', 'c0a80290', 0),
(38, 'professor', 1426222779, 'logout', '0', 'c0a80290', 0),
(39, 'admin', 1426222779, 'login', '55absovccvnob3blv9bddt5mr6', 'c0a80290', 0),
(40, 'admin', 1426222784, 'logout', '0', 'c0a80290', 0),
(41, 'professor', 1426222784, 'login', '55absovccvnob3blv9bddt5mr6', 'c0a80290', 0),
(42, 'professor', 1426222787, 'logout', '0', 'c0a80290', 0),
(43, 'admin', 1426222787, 'login', '55absovccvnob3blv9bddt5mr6', 'c0a80290', 0),
(44, 'admin', 1426222788, 'logout', '0', 'c0a80290', 0),
(45, 'professor', 1426222788, 'login', '55absovccvnob3blv9bddt5mr6', 'c0a80290', 0),
(46, 'professor', 1426222790, 'logout', '0', 'c0a80290', 0),
(47, 'student', 1426222790, 'login', '55absovccvnob3blv9bddt5mr6', 'c0a80290', 0),
(48, 'student', 1426222791, 'logout', '0', 'c0a80290', 0),
(49, 'admin', 1426222791, 'login', '55absovccvnob3blv9bddt5mr6', 'c0a80290', 0),
(50, 'admin', 1426223083, 'logout', '0', 'c0a80290', 0),
(51, 'student', 1426223083, 'login', '55absovccvnob3blv9bddt5mr6', 'c0a80290', 0),
(52, 'student', 1426223129, 'logout', '0', 'c0a80290', 0),
(53, 'professor', 1426223129, 'login', '55absovccvnob3blv9bddt5mr6', 'c0a80290', 0),
(54, 'professor', 1426223360, 'logout', '0', 'c0a80290', 0),
(55, 'student', 1426223420, 'login', 'h1k3msb5ueof17kral9745m776', 'c0a80290', 0),
(56, 'student', 1426223506, 'logout', '0', 'c0a80290', 0),
(57, 'professor', 1426223723, 'login', 'qv3poab979ps6dqrclohhl4sk2', 'c0a80290', 0),
(58, 'professor', 1426223781, 'logout', '0', 'c0a80290', 0),
(59, 'admin', 1426223786, 'login', '552sva2rlouenk0n17jmj7d1d4', 'c0a80290', 0),
(60, 'admin', 1426261344, 'logout', '0', 'c0a80290', 0),
(61, 'admin', 1426261388, 'login', 'g7vi2ag84pvuqci3ln360k4lv0', 'c0a80290', 0),
(62, 'admin', 1426321905, 'logout', '0', 'c0a80290', 0),
(63, 'admin', 1426321915, 'login', 'rgp8v06igrud90kagmh97hvu46', 'c0a80290', 0),
(64, 'admin', 1426386647, 'logout', '0', 'c0a80290', 0),
(65, 'admin', 1426386673, 'login', 'hoqtlt22v18mv77npfrft7tqq6', 'c0a80290', 0),
(66, 'admin', 1426387965, 'logout', '0', 'c0a80290', 0),
(67, 'admin', 1426398824, 'login', 'n18qqlpo19fknap5ggoftpfvn0', 'c0a80290', 0),
(68, 'admin', 1426431979, 'logout', '0', 'c0a80290', 0),
(69, 'admin', 1426436724, 'login', 'r77qgjcblmliana5hfskg2ck81', 'c0a80290', 0),
(70, 'admin', 1426436793, 'logout', '0', 'c0a80290', 0),
(71, 'professor', 1426436793, 'login', 'r77qgjcblmliana5hfskg2ck81', 'c0a80290', 0),
(72, 'professor', 1426436795, 'logout', '0', 'c0a80290', 0),
(73, 'student', 1426436795, 'login', 'r77qgjcblmliana5hfskg2ck81', 'c0a80290', 0),
(74, 'student', 1426436848, 'logout', '0', 'c0a80290', 0),
(75, 'admin', 1426442885, 'login', '2809bp10vb3r0mmhu9mqmbg736', 'c0a80290', 0),
(76, 'admin', 1426442905, 'logout', '0', 'c0a80290', 0),
(77, 'professor', 1426442915, 'login', '0ddp6rmp1cko2vu7p4ea3t0fn3', 'c0a80290', 0),
(78, 'professor', 1426442918, 'logout', '0', 'c0a80290', 0),
(79, 'student', 1426442935, 'login', 'rsikdc3d5urlno5usm5t9h9kt4', 'c0a80290', 0),
(80, 'student', 1426442937, 'logout', '0', 'c0a80290', 0),
(81, 'student2', 1426442943, 'login', 'ga36j5aed0a59athvjllv4ad96', 'c0a80290', 0),
(82, 'student2', 1426442946, 'logout', '0', 'c0a80290', 0),
(83, 'professor', 1426447020, 'login', 'be7eqoji3dr8t5s4sf0f0oigb0', 'c0a80290', 0),
(84, 'professor', 1426447068, 'logout', '0', 'c0a80290', 0),
(85, 'student', 1426447068, 'login', 'be7eqoji3dr8t5s4sf0f0oigb0', 'c0a80290', 0),
(86, 'student', 1426447091, 'logout', '0', 'c0a80290', 0),
(87, 'admin', 1426447095, 'login', 'v7bi9jggaaa38qg5s711s0qpc7', 'c0a80290', 0),
(88, 'admin', 1426447326, 'logout', '0', 'c0a80290', 0),
(89, 'student', 1426447332, 'login', 'ms7139aa9dpkn1urfgop7oadr1', 'c0a80290', 0),
(90, 'student', 1426447403, 'logout', '0', 'c0a80290', 0),
(91, 'professor', 1426447408, 'login', 'gevs91eds01rvj4i19s2pd5ni5', 'c0a80290', 0),
(92, 'professor', 1426447462, 'logout', '0', 'c0a80290', 0),
(93, 'admin', 1426447466, 'login', 'bo3rd7pu0tmrkascqfr9eg1632', 'c0a80290', 0),
(94, 'admin', 1426448040, 'logout', '0', 'c0a80290', 0),
(95, 'admin', 1426475095, 'login', 'g8mr6mj6g93teqhtqv6cd7gia0', 'c0a80290', 0),
(96, 'admin', 1426476677, 'logout', '0', 'c0a80290', 0),
(97, 'admin', 1426476677, 'login', '3ut9bcgfsahdvk6lg45h3to092', 'c0a80290', 0),
(98, 'admin', 1426476793, 'logout', '0', 'c0a80290', 0),
(99, 'admin', 1426487323, 'login', '1ks3nko8jif3e0gc2jllo8apc3', 'c0a80290', 0),
(100, 'admin', 1426487332, 'logout', '0', 'c0a80290', 0),
(101, 'admin', 1426496232, 'login', '7du558vtbekgl84ft2b06n9bc4', 'c0a80290', 0),
(102, 'admin', 1426496357, 'logout', '0', 'c0a80290', 0),
(103, 'admin', 1426496376, 'login', '9l7fjdenqrl3o4fmu4spm2i3a0', 'c0a80290', 0),
(104, 'admin', 1426496406, 'logout', '0', 'c0a80290', 0),
(105, 'student', 1426528559, 'login', '5fvnc4jsdj9048p5mmqcloefs1', 'c0a80290', 0),
(106, 'student', 1426528566, 'logout', '0', 'c0a80290', 0),
(107, 'professor', 1426528578, 'login', '1aiamsuj4voluiirm7uoqbs3i3', 'c0a80290', 0),
(108, 'professor', 1426528587, 'logout', '0', 'c0a80290', 0),
(109, 'admin', 1426528587, 'login', '1aiamsuj4voluiirm7uoqbs3i3', 'c0a80290', 0),
(110, 'admin', 1426528589, 'logout', '0', 'c0a80290', 0),
(111, 'student', 1426528589, 'login', '1aiamsuj4voluiirm7uoqbs3i3', 'c0a80290', 0),
(112, 'student', 1426528593, 'logout', '0', 'c0a80290', 0),
(113, 'admin', 1426528602, 'login', 'tf8q0p8cdttt24qkrg5slgj2j3', 'c0a80290', 0),
(114, 'admin', 1426528605, 'logout', '0', 'c0a80290', 0),
(115, 'professor', 1426528605, 'login', 'tf8q0p8cdttt24qkrg5slgj2j3', 'c0a80290', 0),
(116, 'professor', 1426528606, 'logout', '0', 'c0a80290', 0),
(117, 'student', 1426528606, 'login', 'tf8q0p8cdttt24qkrg5slgj2j3', 'c0a80290', 0),
(118, 'student', 1426528615, 'logout', '0', 'c0a80290', 0),
(119, 'admin', 1426528615, 'login', 'tf8q0p8cdttt24qkrg5slgj2j3', 'c0a80290', 0),
(120, 'admin', 1426528648, 'logout', '0', 'c0a80290', 0),
(121, 'professor', 1426528648, 'login', 'tf8q0p8cdttt24qkrg5slgj2j3', 'c0a80290', 0),
(122, 'professor', 1426528679, 'logout', '0', 'c0a80290', 0),
(123, 'admin', 1426528685, 'login', '7i7inetbrfmt7kce2d03f7su06', 'c0a80290', 0),
(124, 'admin', 1426537131, 'logout', '0', 'c0a80290', 0),
(125, 'admin', 1461075813, 'login', '7v8ve48qe3ln1rs6061neaq6m4', 'c0a83801', 0),
(126, 'admin', 1461075814, 'logout', '0', 'c0a83801', 0),
(127, 'admin', 1461075971, 'login', 'b3nr1e45lvju8246m5j2o19iq4', 'c0a83801', 0),
(128, 'admin', 1461075971, 'logout', '0', 'c0a83801', 0),
(129, 'admin', 1461075972, 'login', 'febp2m2rm52kss8g2logo8ajg6', 'c0a83801', 0),
(130, 'admin', 1461075972, 'logout', '0', 'c0a83801', 0),
(131, 'admin', 1461075972, 'login', '9oa8g7pu3m88jhb4rdpnhmqqd2', 'c0a83801', 0),
(132, 'admin', 1461075972, 'logout', '0', 'c0a83801', 0),
(133, 'admin', 1461075972, 'login', 'la91j48phmn7g0bu3ngmf57f10', 'c0a83801', 0),
(134, 'admin', 1461075973, 'logout', '0', 'c0a83801', 0),
(135, 'admin', 1461075973, 'login', '3tjm7b5jteup7pknt1k19llm01', 'c0a83801', 0),
(136, 'admin', 1461075974, 'logout', '0', 'c0a83801', 0),
(137, 'admin', 1461075974, 'login', 'p4rtn7cc3532riv6v7muv2p0r0', 'c0a83801', 0),
(138, 'admin', 1461075974, 'logout', '0', 'c0a83801', 0),
(139, 'admin', 1461075974, 'login', 'pdu2n5ol9ee8acq479veq6l1r3', 'c0a83801', 0),
(140, 'admin', 1461075975, 'logout', '0', 'c0a83801', 0),
(141, 'admin', 1461075975, 'login', '4efrqvsgnk6majm4uqnlremqp7', 'c0a83801', 0),
(142, 'admin', 1461075975, 'logout', '0', 'c0a83801', 0),
(143, 'admin', 1461075975, 'login', '1anjjmphqrfqee6s9pp1g34457', 'c0a83801', 0),
(144, 'admin', 1461075976, 'logout', '0', 'c0a83801', 0),
(145, 'admin', 1461075976, 'login', 'esrllse95gasjab61mmlvog7q7', 'c0a83801', 0),
(146, 'admin', 1461075976, 'logout', '0', 'c0a83801', 0),
(147, 'admin', 1461075976, 'login', 'bnd8e71d6mb5i5sfjsvm6uv527', 'c0a83801', 0),
(148, 'admin', 1461075977, 'logout', '0', 'c0a83801', 0),
(149, 'admin', 1461075977, 'login', 'joupuiops718dj1uqumhhci7n4', 'c0a83801', 0),
(150, 'admin', 1461075978, 'logout', '0', 'c0a83801', 0),
(151, 'admin', 1461075978, 'login', '4tg9bkhbmhac1ksceu69m58nl5', 'c0a83801', 0),
(152, 'admin', 1461075978, 'logout', '0', 'c0a83801', 0),
(153, 'admin', 1461075979, 'login', 'jfe2673tqq5cmr9ie9fvkkro60', 'c0a83801', 0),
(154, 'admin', 1461075979, 'logout', '0', 'c0a83801', 0),
(155, 'admin', 1461075979, 'login', 'maiuj2d5lko2pugcl5srbqbnn1', 'c0a83801', 0),
(156, 'admin', 1461075979, 'logout', '0', 'c0a83801', 0),
(157, 'admin', 1461075979, 'login', 'gf52arcfkbd31kljmk7nlrjfu7', 'c0a83801', 0),
(158, 'admin', 1461075980, 'logout', '0', 'c0a83801', 0),
(159, 'admin', 1461075980, 'login', '7p6cstl3gel413ufoptc4abd47', 'c0a83801', 0),
(160, 'admin', 1461075980, 'logout', '0', 'c0a83801', 0),
(161, 'admin', 1461075980, 'login', 'sicotmi4np5tifmkcf8t2oinl2', 'c0a83801', 0),
(162, 'admin', 1461075981, 'logout', '0', 'c0a83801', 0),
(163, 'admin', 1461075981, 'login', '8ilabf035obl1b72raicr5d571', 'c0a83801', 0),
(164, 'admin', 1461075982, 'logout', '0', 'c0a83801', 0),
(165, 'admin', 1461075982, 'login', 'o7297t5ig602ca1ouvdmhoib25', 'c0a83801', 0),
(166, 'admin', 1461075983, 'logout', '0', 'c0a83801', 0),
(167, 'admin', 1461075983, 'login', '52mpn9bd0rgg51pskccc888hd2', 'c0a83801', 0),
(168, 'admin', 1461075984, 'logout', '0', 'c0a83801', 0),
(169, 'admin', 1461075984, 'login', 'lkqodrsk2oj50vf3h6c6vcs5s6', 'c0a83801', 0),
(170, 'admin', 1461075985, 'logout', '0', 'c0a83801', 0),
(171, 'admin', 1461075985, 'login', '8ol1n570v68rsncc9i37m2d7a5', 'c0a83801', 0),
(172, 'admin', 1461075985, 'logout', '0', 'c0a83801', 0),
(173, 'admin', 1461075985, 'login', '5fmpdqn18sjg27c9dmqgrpa882', 'c0a83801', 0),
(174, 'admin', 1461075986, 'logout', '0', 'c0a83801', 0),
(175, 'admin', 1461075986, 'login', 'amfpgb1uhu3krstbh364d79id5', 'c0a83801', 0),
(176, 'admin', 1461075986, 'logout', '0', 'c0a83801', 0),
(177, 'admin', 1461075986, 'login', 'n6nb8a6j42h2q6nctt51h78s27', 'c0a83801', 0),
(178, 'admin', 1461075987, 'logout', '0', 'c0a83801', 0),
(179, 'admin', 1461075987, 'login', 'ngrj90gcgdsrkobl0c79o2ung5', 'c0a83801', 0),
(180, 'admin', 1461075988, 'logout', '0', 'c0a83801', 0),
(181, 'admin', 1461075988, 'login', '946a09auhs2g0q5o61hv6aicc6', 'c0a83801', 0),
(182, 'admin', 1461075988, 'logout', '0', 'c0a83801', 0),
(183, 'admin', 1461075988, 'login', 'n9ceb6r7g7mr5fitg9vfdseqk6', 'c0a83801', 0),
(184, 'admin', 1461075988, 'logout', '0', 'c0a83801', 0),
(185, 'admin', 1461075988, 'login', 'lc8keb3aebqurikprci3iol687', 'c0a83801', 0),
(186, 'admin', 1461075989, 'logout', '0', 'c0a83801', 0),
(187, 'admin', 1461075989, 'login', 'v55f2mlnfvri7u91lfisknbri5', 'c0a83801', 0),
(188, 'admin', 1461075989, 'logout', '0', 'c0a83801', 0),
(189, 'admin', 1461075989, 'login', 'qro8eh76hd3vcp4hvod9rg82k5', 'c0a83801', 0),
(190, 'admin', 1461075990, 'logout', '0', 'c0a83801', 0),
(191, 'admin', 1461075990, 'login', 'oca50kmiops0idg4lbbetie960', 'c0a83801', 0),
(192, 'admin', 1461075991, 'logout', '0', 'c0a83801', 0),
(193, 'admin', 1461075991, 'login', '4ov25rs0u55mlbf017l1n3uqs4', 'c0a83801', 0),
(194, 'admin', 1461075992, 'logout', '0', 'c0a83801', 0),
(195, 'admin', 1461075992, 'login', '7flsrr9dvc7cp00cdi7sbqok54', 'c0a83801', 0),
(196, 'admin', 1461075994, 'logout', '0', 'c0a83801', 0),
(197, 'admin', 1461075994, 'login', 'l2r683lo56uert857oh3ujhti2', 'c0a83801', 0),
(198, 'admin', 1461075995, 'logout', '0', 'c0a83801', 0),
(199, 'admin', 1461075995, 'login', '8320jp2j0aa580353r4t5t1ch0', 'c0a83801', 0),
(200, 'admin', 1461075995, 'logout', '0', 'c0a83801', 0),
(201, 'admin', 1461075995, 'login', '32en1mr2t98f3nmohrcj7r7ou7', 'c0a83801', 0),
(202, 'admin', 1461075996, 'logout', '0', 'c0a83801', 0),
(203, 'admin', 1461075996, 'login', 'l5ftuk3ve5h8teqflrdf1lmde2', 'c0a83801', 0),
(204, 'admin', 1461075997, 'logout', '0', 'c0a83801', 0),
(205, 'admin', 1461075997, 'login', 'bgab5rgr4oe29bflo4chjqshj2', 'c0a83801', 0),
(206, 'admin', 1461075998, 'logout', '0', 'c0a83801', 0),
(207, 'admin', 1461075998, 'login', 'jqu2j24ejvdd5vuv2d8igodg35', 'c0a83801', 0),
(208, 'admin', 1461075998, 'logout', '0', 'c0a83801', 0),
(209, 'admin', 1461075998, 'login', '4p8f44u3e1rh33pbbavuss3m14', 'c0a83801', 0),
(210, 'admin', 1461075999, 'logout', '0', 'c0a83801', 0),
(211, 'admin', 1461075999, 'login', '1r97d6r3b21jvo24kn4kjoqi51', 'c0a83801', 0),
(212, 'admin', 1461076000, 'logout', '0', 'c0a83801', 0),
(213, 'admin', 1461076000, 'login', 't5c8r63g65lr6rt6f5drr4svk0', 'c0a83801', 0),
(214, 'admin', 1461076000, 'logout', '0', 'c0a83801', 0),
(215, 'admin', 1461076000, 'login', '2q0tppgvaijkudh5241s76g5b2', 'c0a83801', 0),
(216, 'admin', 1461076001, 'logout', '0', 'c0a83801', 0),
(217, 'admin', 1461076001, 'login', '7hlfdmgcgrs8c67uhb94nd6aa3', 'c0a83801', 0),
(218, 'admin', 1461076001, 'logout', '0', 'c0a83801', 0),
(219, 'admin', 1461076001, 'login', 'ha3jm72486kd48hji75ja4tlf6', 'c0a83801', 0),
(220, 'admin', 1461076002, 'logout', '0', 'c0a83801', 0),
(221, 'admin', 1461076002, 'login', '8np6ug1fg6sholhdbqnc94mln6', 'c0a83801', 0),
(222, 'admin', 1461076002, 'logout', '0', 'c0a83801', 0),
(223, 'admin', 1461076002, 'login', '810haimctr8h3b6ksdbl88fc07', 'c0a83801', 0),
(224, 'admin', 1461076003, 'logout', '0', 'c0a83801', 0),
(225, 'admin', 1461076003, 'login', 'tf1kangc38fcec1f08ef1t0ij7', 'c0a83801', 0),
(226, 'admin', 1461076003, 'logout', '0', 'c0a83801', 0),
(227, 'admin', 1461076004, 'login', '3bluaeq7shb6asn198al25hmk1', 'c0a83801', 0),
(228, 'admin', 1461076004, 'logout', '0', 'c0a83801', 0),
(229, 'admin', 1461076004, 'login', 'i6sckr0eubcq3tapv5s2k86i46', 'c0a83801', 0),
(230, 'admin', 1461076005, 'logout', '0', 'c0a83801', 0),
(231, 'admin', 1461076005, 'login', 'b0ub1mbjbm6pkq462e21g7lb13', 'c0a83801', 0),
(232, 'admin', 1461076006, 'logout', '0', 'c0a83801', 0),
(233, 'admin', 1461076006, 'login', 'hdsip5744cn5v642shtiqslvo2', 'c0a83801', 0),
(234, 'admin', 1461076006, 'logout', '0', 'c0a83801', 0),
(235, 'admin', 1461076006, 'login', '69pl7gj9bo3afekv8d2k2rils5', 'c0a83801', 0),
(236, 'admin', 1461076007, 'logout', '0', 'c0a83801', 0),
(237, 'admin', 1461076007, 'login', 'h9tlla1qf108c4j930tu7isjb0', 'c0a83801', 0);

-- --------------------------------------------------------

--
-- Table structure for table `modules`
--

CREATE TABLE IF NOT EXISTS `modules` (
  `className` varchar(150) NOT NULL,
  `db_file` varchar(255) DEFAULT NULL,
  `name` varchar(150) NOT NULL,
  `active` tinyint(1) NOT NULL,
  `title` varchar(150) NOT NULL,
  `author` varchar(100) DEFAULT NULL,
  `version` varchar(10) DEFAULT NULL,
  `description` text,
  `position` varchar(150) NOT NULL,
  `menu` varchar(255) DEFAULT NULL,
  `mandatory` varchar(255) DEFAULT NULL,
  `permissions` varchar(32) NOT NULL DEFAULT 'administrator',
  PRIMARY KEY (`className`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `modules`
--

INSERT INTO `modules` (`className`, `db_file`, `name`, `active`, `title`, `author`, `version`, `description`, `position`, `menu`, `mandatory`, `permissions`) VALUES
('module_administrator_tools', '', 'module_administrator_tools', 0, 'Administrator tools', 'Periklis Venakis', '1.4', 'This module is a collection of administrator tools', 'module_administrator_tools', NULL, NULL, 'administrator'),
('module_bbb', '', 'module_bbb', 0, 'BigBlueButton conference tool', 'Panagiotis Athanasopoulos', '1.2', '\n		This module is used to connect eFront with BigBlueButton for lesson conferencing using the included API.\n	', 'module_bbb', NULL, NULL, 'administrator,professor,student'),
('module_billboard', '', 'module_billboard', 0, 'Billboard', 'Nick Baltas', '1.3', '\n		This module is used to create and display a billboard for eFront lessons.\n	', 'module_billboard', NULL, NULL, 'professor,student'),
('module_blogs', '', 'module_blogs', 0, 'Blogs', 'Michael Makrigiannakis', '1.1', 'This module is used to place blogs functionality in eFront lessons', 'module_blogs', NULL, NULL, 'student,professor,administrator'),
('module_chat', '', 'module_chat', 1, 'Chat Module ', 'Christos Xanthos', '1.0', 'eFront integrated Chat Bar', 'module_chat', NULL, NULL, 'administrator,professor,student'),
('module_crossword', '', 'module_crossword', 0, 'Crossword', 'skippybosco', '1.2', 'Create Crossword Puzzles from Empty Space Questions', 'module_crossword', NULL, NULL, 'student,professor,administrator'),
('module_faq', '', 'module_faq', 0, 'Frequently Asked Questions', 'Nick Baltas', '1.5', '\n		This module is used to create and display FAQ lists for eFront lessons.\n	', 'module_faq', NULL, NULL, 'professor,student'),
('module_flashcards', '', 'module_flashcards', 0, 'Flashcards', 'Michael Makrigiannakis', '1.0', 'This module is used to place flashcards in eFront questions', 'module_flashcards', NULL, NULL, 'student,professor,administrator'),
('module_gift_aiken', '', 'module_gift_aiken', 0, 'GIFT/AIKEN Questions Import', 'Nick Baltas', '1.2', '\n		This module is used to create questions from GIFT/AIKEN formats\n	', 'module_gift_aiken', NULL, NULL, 'professor'),
('module_gradebook', '', 'module_gradebook', 0, 'GradeBook', 'Andreas Makridakis', '1.0', 'A module for handling the grades in each lesson', 'module_gradebook', NULL, NULL, 'student,professor,administrator'),
('module_journal', '', 'module_journal', 0, 'Journal', 'Andreas Makridakis', '1.0', 'A common Journal per student/professor', 'module_journal', NULL, NULL, 'student,professor,administrator'),
('module_links', '', 'module_links', 0, 'Links', 'Panagiotis Antonellis', '1.4', '\n		This module is used to create and display a list of useful links\n	', 'module_links', NULL, NULL, 'professor,student'),
('module_quick_mails', '', 'module_quick_mails', 0, 'Quick emails', 'Michael Makrigiannakis', '1.1', '\n		This module is used to send emails directly to professors students etc\n	', 'module_quick_mails', NULL, NULL, 'student,professor'),
('module_quote', '', 'module_quote', 0, 'Quote of the day', 'Panagiotis Antonellis', '1.1', '\n		This module is used to display the quote of the day\n	', 'module_quote', NULL, NULL, 'professor,student'),
('module_rss', '', 'module_rss', 1, 'RSS', 'Periklis Venakis', '1.7', 'An RSS module for eFront', 'module_rss', NULL, NULL, 'administrator,professor,student'),
('module_workbook', '', 'module_workbook', 0, 'WorkBook', 'Andreas Makridakis', '1.1', 'Through Workbook module professors are trying to get students to pay attention to certain lesson items', 'module_workbook', NULL, NULL, 'student,professor'),
('module_youtube', '', 'module_youtube', 0, 'YouTube', 'Nick Baltas', '1.2', '\n		This module is used to connect eFront with YouTube\n	', 'module_youtube', NULL, NULL, 'professor,student');

-- --------------------------------------------------------

--
-- Table structure for table `module_BBB`
--

CREATE TABLE IF NOT EXISTS `module_BBB` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `timestamp` int(11) NOT NULL,
  `lessons_ID` int(11) NOT NULL,
  `confKey` varchar(255) NOT NULL,
  `durationHours` int(1) NOT NULL,
  `durationMinutes` int(2) DEFAULT NULL,
  `confType` tinyint(1) DEFAULT '0',
  `maxParts` int(3) DEFAULT '20',
  `maxMics` int(3) DEFAULT '20',
  `lobby` tinyint(1) DEFAULT '0',
  `status` int(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_BBB_users_to_meeting`
--

CREATE TABLE IF NOT EXISTS `module_BBB_users_to_meeting` (
  `users_LOGIN` varchar(255) NOT NULL,
  `meeting_ID` int(11) NOT NULL,
  KEY `users_LOGIN` (`users_LOGIN`,`meeting_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `module_billboard`
--

CREATE TABLE IF NOT EXISTS `module_billboard` (
  `lessons_ID` int(11) NOT NULL,
  `data` longtext,
  PRIMARY KEY (`lessons_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `module_blogs`
--

CREATE TABLE IF NOT EXISTS `module_blogs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `lessons_ID` int(11) NOT NULL DEFAULT '0',
  `users_LOGIN` varchar(255) NOT NULL,
  `description` text,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  `registered` tinyint(1) NOT NULL DEFAULT '1',
  `timestamp` varchar(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_blogs_articles`
--

CREATE TABLE IF NOT EXISTS `module_blogs_articles` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `blogs_ID` int(11) NOT NULL DEFAULT '0',
  `users_LOGIN` varchar(255) NOT NULL,
  `timestamp` varchar(10) NOT NULL,
  `data` text,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_blogs_comments`
--

CREATE TABLE IF NOT EXISTS `module_blogs_comments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `blogs_articles_ID` int(11) NOT NULL DEFAULT '0',
  `users_LOGIN` varchar(255) NOT NULL,
  `timestamp` varchar(10) NOT NULL,
  `data` text,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_blogs_users`
--

CREATE TABLE IF NOT EXISTS `module_blogs_users` (
  `blogs_ID` int(11) NOT NULL DEFAULT '0',
  `users_LOGIN` varchar(255) NOT NULL,
  PRIMARY KEY (`users_LOGIN`,`blogs_ID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `module_chat`
--

CREATE TABLE IF NOT EXISTS `module_chat` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `from_user` varchar(255) NOT NULL DEFAULT '',
  `to_user` varchar(255) NOT NULL DEFAULT '',
  `message` text NOT NULL,
  `sent` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `isLesson` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_chat_config`
--

CREATE TABLE IF NOT EXISTS `module_chat_config` (
  `status` int(11) NOT NULL DEFAULT '1',
  `chatHeartbeatTime` int(11) NOT NULL DEFAULT '1500',
  `refresh_rate` int(11) NOT NULL DEFAULT '60000'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `module_chat_config`
--

INSERT INTO `module_chat_config` (`status`, `chatHeartbeatTime`, `refresh_rate`) VALUES
(1, 2000, 30000);

-- --------------------------------------------------------

--
-- Table structure for table `module_chat_users`
--

CREATE TABLE IF NOT EXISTS `module_chat_users` (
  `username` varchar(100) NOT NULL,
  `timestamp_` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `module_chat_users`
--

INSERT INTO `module_chat_users` (`username`, `timestamp_`) VALUES
('admin', '2015-03-15 06:33:31'),
('professor', '2015-03-15 16:26:33'),
('student', '2015-03-15 16:26:35'),
('student2', '2015-03-15 18:09:03');

-- --------------------------------------------------------

--
-- Table structure for table `module_crossword_users`
--

CREATE TABLE IF NOT EXISTS `module_crossword_users` (
  `users_LOGIN` varchar(100) NOT NULL,
  `content_ID` mediumint(11) NOT NULL,
  `crosslists_ID` mediumint(11) NOT NULL,
  `success` mediumint(11) NOT NULL DEFAULT '0',
  `points` varchar(50) NOT NULL,
  `totallength` varchar(50) NOT NULL,
  `wordtime` varchar(50) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `module_crossword_words`
--

CREATE TABLE IF NOT EXISTS `module_crossword_words` (
  `content_ID` int(10) unsigned NOT NULL,
  `crosslists` text,
  `options` text
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `module_faq`
--

CREATE TABLE IF NOT EXISTS `module_faq` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `lessons_ID` int(11) NOT NULL,
  `unit_ID` int(11) DEFAULT NULL,
  `question` text NOT NULL,
  `answer` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_flashcards_decks`
--

CREATE TABLE IF NOT EXISTS `module_flashcards_decks` (
  `content_ID` int(10) unsigned NOT NULL,
  `cards` text,
  `options` text
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `module_flashcards_users_to_cards`
--

CREATE TABLE IF NOT EXISTS `module_flashcards_users_to_cards` (
  `users_LOGIN` varchar(100) NOT NULL,
  `content_ID` mediumint(11) NOT NULL,
  `cards_ID` mediumint(11) NOT NULL,
  `success` mediumint(11) NOT NULL DEFAULT '0'
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `module_gradebook_grades`
--

CREATE TABLE IF NOT EXISTS `module_gradebook_grades` (
  `gid` int(11) NOT NULL AUTO_INCREMENT,
  `oid` int(11) NOT NULL,
  `grade` int(3) NOT NULL,
  `users_LOGIN` varchar(255) NOT NULL,
  PRIMARY KEY (`gid`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_gradebook_objects`
--

CREATE TABLE IF NOT EXISTS `module_gradebook_objects` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `weight` int(2) NOT NULL,
  `refers_to_type` varchar(50) NOT NULL,
  `refers_to_id` int(11) NOT NULL,
  `lessons_ID` int(11) NOT NULL,
  `creator` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_gradebook_ranges`
--

CREATE TABLE IF NOT EXISTS `module_gradebook_ranges` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `range_from` int(3) NOT NULL,
  `range_to` int(3) NOT NULL,
  `grade` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_gradebook_users`
--

CREATE TABLE IF NOT EXISTS `module_gradebook_users` (
  `uid` int(11) NOT NULL AUTO_INCREMENT,
  `users_LOGIN` varchar(255) NOT NULL,
  `lessons_ID` int(11) NOT NULL,
  `score` float NOT NULL,
  `grade` varchar(50) NOT NULL,
  `publish` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`uid`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_journal_entries`
--

CREATE TABLE IF NOT EXISTS `module_journal_entries` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `entry_body` text NOT NULL,
  `entry_date` datetime NOT NULL,
  `lessons_ID` int(11) NOT NULL,
  `users_LOGIN` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_journal_rules`
--

CREATE TABLE IF NOT EXISTS `module_journal_rules` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_journal_settings`
--

CREATE TABLE IF NOT EXISTS `module_journal_settings` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  `value` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3 ;

--
-- Dumping data for table `module_journal_settings`
--

INSERT INTO `module_journal_settings` (`id`, `name`, `value`) VALUES
(1, 'export', 1),
(2, 'preview', 1);

-- --------------------------------------------------------

--
-- Table structure for table `module_links`
--

CREATE TABLE IF NOT EXISTS `module_links` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `lessons_ID` int(11) NOT NULL,
  `display` varchar(500) NOT NULL,
  `link` varchar(500) NOT NULL,
  `description` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_quote`
--

CREATE TABLE IF NOT EXISTS `module_quote` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `lessons_ID` int(11) NOT NULL,
  `quote` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_rss_feeds`
--

CREATE TABLE IF NOT EXISTS `module_rss_feeds` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `url` text NOT NULL,
  `active` int(11) NOT NULL DEFAULT '1',
  `only_summary` int(11) DEFAULT '0',
  `lessons_ID` int(11) DEFAULT '-1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=2 ;

--
-- Dumping data for table `module_rss_feeds`
--

INSERT INTO `module_rss_feeds` (`id`, `title`, `url`, `active`, `only_summary`, `lessons_ID`) VALUES
(1, 'eFront news', 'http://www.efrontlearning.net/product/efront-news?format=feed&type=rss&install=1', 1, 0, -1);

-- --------------------------------------------------------

--
-- Table structure for table `module_rss_provider`
--

CREATE TABLE IF NOT EXISTS `module_rss_provider` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `mode` varchar(255) DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL,
  `active` int(11) NOT NULL DEFAULT '1',
  `lessons_ID` int(11) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_workbook_answers`
--

CREATE TABLE IF NOT EXISTS `module_workbook_answers` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `item_id` int(11) NOT NULL,
  `html_solved` text,
  `users_LOGIN` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_workbook_autosave`
--

CREATE TABLE IF NOT EXISTS `module_workbook_autosave` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `item_id` int(11) NOT NULL,
  `autosave_text` longtext NOT NULL,
  `users_LOGIN` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_workbook_items`
--

CREATE TABLE IF NOT EXISTS `module_workbook_items` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `item_title` varchar(255) DEFAULT NULL,
  `item_text` text,
  `item_question` int(11) NOT NULL,
  `question_text` longtext,
  `check_answer` tinyint(1) NOT NULL,
  `lessons_ID` int(11) NOT NULL,
  `unique_ID` varchar(50) NOT NULL,
  `position` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_workbook_progress`
--

CREATE TABLE IF NOT EXISTS `module_workbook_progress` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `lessons_ID` int(11) NOT NULL,
  `users_LOGIN` varchar(255) NOT NULL,
  `progress` float(5,2) NOT NULL,
  `non_optional` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_workbook_publish`
--

CREATE TABLE IF NOT EXISTS `module_workbook_publish` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `lessons_ID` int(11) NOT NULL,
  `publish` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_workbook_settings`
--

CREATE TABLE IF NOT EXISTS `module_workbook_settings` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `lessons_ID` int(11) NOT NULL,
  `lesson_name` varchar(255) NOT NULL,
  `allow_print` tinyint(1) NOT NULL DEFAULT '1',
  `allow_export` tinyint(1) NOT NULL DEFAULT '1',
  `edit_answers` tinyint(1) NOT NULL DEFAULT '1',
  `unit_to_complete` int(11) NOT NULL DEFAULT '-1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `module_youtube`
--

CREATE TABLE IF NOT EXISTS `module_youtube` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `lessons_ID` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `link` varchar(255) NOT NULL,
  `description` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `news`
--

CREATE TABLE IF NOT EXISTS `news` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `data` text,
  `timestamp` int(10) unsigned DEFAULT '0',
  `expire` int(10) unsigned DEFAULT '0',
  `lessons_ID` mediumint(8) unsigned DEFAULT NULL,
  `users_LOGIN` varchar(100) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `notifications`
--

CREATE TABLE IF NOT EXISTS `notifications` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `timestamp` int(10) NOT NULL,
  `send_interval` varchar(10) NOT NULL DEFAULT '0',
  `send_conditions` text,
  `id_type_entity` varchar(255) DEFAULT NULL,
  `recipient` varchar(100) DEFAULT NULL,
  `subject` varchar(255) NOT NULL,
  `message` text,
  `active` tinyint(1) DEFAULT '1',
  `html_message` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `recipient` (`recipient`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `periods`
--

CREATE TABLE IF NOT EXISTS `periods` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(150) NOT NULL,
  `from_timestamp` int(10) unsigned NOT NULL,
  `to_timestamp` int(10) unsigned NOT NULL,
  `lessons_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `profile_comments`
--

CREATE TABLE IF NOT EXISTS `profile_comments` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `users_LOGIN` varchar(100) NOT NULL,
  `authors_LOGIN` varchar(100) NOT NULL,
  `timestamp` int(10) unsigned NOT NULL,
  `data` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `projects`
--

CREATE TABLE IF NOT EXISTS `projects` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(150) DEFAULT NULL,
  `data` text,
  `deadline` int(10) unsigned DEFAULT NULL,
  `creator_LOGIN` varchar(100) NOT NULL,
  `lessons_ID` mediumint(8) unsigned DEFAULT NULL,
  `auto_assign` tinyint(1) NOT NULL DEFAULT '0',
  `metadata` text,
  PRIMARY KEY (`id`),
  KEY `creator_LOGIN` (`creator_LOGIN`),
  KEY `deadline` (`deadline`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `questions`
--

CREATE TABLE IF NOT EXISTS `questions` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `text` text NOT NULL,
  `type` varchar(255) NOT NULL,
  `content_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `lessons_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `difficulty` varchar(255) NOT NULL,
  `options` text,
  `answer` text,
  `explanation` text,
  `answers_explanation` text,
  `estimate` int(10) unsigned DEFAULT NULL,
  `settings` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=25 ;

--
-- Dumping data for table `questions`
--

INSERT INTO `questions` (`id`, `text`, `type`, `content_ID`, `lessons_ID`, `difficulty`, `options`, `answer`, `explanation`, `answers_explanation`, `estimate`, `settings`) VALUES
(1, 'A heuristic solution is ...\r\n', 'multiple_one', 12, 1, 'medium', 'a:3:{i:0;s:39:"The best possible solution to a problem";i:1;s:30:"A random solution to a problem";i:2;s:42:"A feasible solution to a difficult problem";}', 'a:1:{i:0;s:1:"2";}', 'A heuristic solution is good solution to a problem taking into account that the exausting examination of the problem&#39;s space is not feasible.', NULL, NULL, NULL),
(2, 'Why we have to use greedy algorithms?', 'multiple_one', 12, 1, 'medium', 'a:4:{i:0;s:51:"Because a solution to the problem is not computable";i:1;s:68:"Because there are many solutions and we need to pick up the best one";i:2;s:54:"Because it is very expensive to find the best solution";i:3;s:26:"Because it is more elegant";}', 'a:1:{i:0;s:1:"2";}', '', 'a:4:{i:0;s:0:"";i:1;s:0:"";i:2;s:0:"";i:3;s:0:"";}', NULL, NULL),
(3, '<strong><font face="trebuchet ms,geneva" size="2">The traveling salesman problem can be efficiently and optimally solved</font></strong>\r\n', 'multiple_one', 12, 1, 'medium', 'a:2:{i:0;s:7:"Correct";i:1;s:5:"False";}', 'a:1:{i:0;s:1:"1";}', '', NULL, NULL, NULL),
(4, '<p><strong><span style="font-size: 13px;">The Maya calendar(s) were based on a year length of ...</span></strong></p>', 'multiple_one', 29, 2, 'medium', 'a:4:{i:0;s:8:"350 days";i:1;s:8:"360 days";i:2;s:8:"365 days";i:3;s:8:"370 days";}', 'a:1:{i:0;s:1:"2";}', '', 'a:4:{i:0;s:0:"";i:1;s:0:"";i:2;s:0:"";i:3;s:0:"";}', NULL, NULL),
(5, '&quot;The Maya have developed a complete writing system&quot;. This sentense is...\r\n', 'multiple_one', 29, 2, 'medium', 'a:2:{i:0;s:7:"Correct";i:1;s:5:"Wrong";}', 'a:1:{i:0;s:1:"0";}', 'The Maya writing system (often called hieroglyphs from a superficial resemblance to the Ancient Egyptian writing) was a combination of phonetic symbols and logograms. It is most often classified as a logographic or (more properly) a logosyllabic writing system, in which syllabic signs play a significant role. It is the only writing system of the Pre-Columbian New World which is known to completely represent the spoken language of its community. In total, the script has more than a thousand different glyphs, although a few are variations of the same sign or meaning, and many appear only rarely or are confined to particular localities. At any one time, no more than around 500 glyphs were in use, some 200 of which (including variations) had a phonetic or syllabic interpretation.', NULL, NULL, NULL),
(6, '<p><span style="font-size: 13px;"><strong>The political structure of Mayas was based on ...</strong></span></p>', 'multiple_one', 29, 2, 'medium', 'a:2:{i:0;s:23:"Small, divided kingdoms";i:1;s:36:"One big kingdom with a central ruler";}', 'a:1:{i:0;s:1:"0";}', '<p>A typical Classic Maya polity was a small hierarchical state (ajawil, ajawlel, or ajawlil) headed by a hereditary ruler known as an ajaw (later k’uhul ajaw). Such kingdoms were usually no more than a capital city with its neighborhood and several lesser towns, although there were greater kingdoms, which controlled larger territories and extended patronage over smaller polities.</p>', 'a:2:{i:0;s:0:"";i:1;s:0:"";}', NULL, NULL),
(7, '<p><strong><span style="font-size: 13px;">When was the the first “Maya” settlements were established? </span></strong></p>', 'multiple_one', 29, 2, 'medium', 'a:3:{i:0;s:14:"Around 2800 BC";i:1;s:14:"Around 1800 BC";i:2;s:13:"Around 800 BC";}', 'a:1:{i:0;s:1:"1";}', '<p>While the Maya area was initially inhabited around the 10th millennium BC, the first clearly “Maya” settlements were established in approximately 1800 BC in Soconusco region of the Pacific Coast. This point in time, known as the Early Preclassic, was characterized by sedentary communities and the introduction of pottery and fired clay figurines.</p>', 'a:3:{i:0;s:0:"";i:1;s:0:"";i:2;s:0:"";}', NULL, NULL),
(8, '<p><span style="font-size: 13px;"><strong>The geographic position of Maya civilization was ...</strong></span></p>', 'multiple_one', 29, 2, 'medium', 'a:3:{i:0;s:13:"North America";i:1;s:15:"Central America";i:2;s:13:"South America";}', 'a:1:{i:0;s:1:"1";}', '<p>The geographic extent of the Maya civilization, known as the Maya area, extended throughout the northern Central American region, including the present-day nations of Guatemala, Belize, El Salvador, western Honduras , and the southern Mexican states of Chiapas, Tabasco, and the Yucatán Peninsula states of Quintana Roo, Campeche and Yucatán.</p>', 'a:3:{i:0;s:0:"";i:1;s:0:"";i:2;s:0:"";}', NULL, NULL),
(9, '<p><span style="font-size: 13px;">The Maya people disappeared ....</span></p>', 'multiple_one', 29, 2, 'medium', 'a:3:{i:0;s:31:"With the Classic period decline";i:1;s:43:"When spanish arrived and colonized America ";i:2;s:23:"Never, they still exist";}', 'a:1:{i:0;s:1:"2";}', '<p>The Maya peoples never disappeared, neither at the time of the Classic period decline nor with the arrival of the Spanish conquistadores and the subsequent Spanish colonization of the Americas. Today, the Maya and their descendants form sizable populations throughout the Maya area and maintain a distinctive set of traditions and beliefs that are the result of the merger of pre-Columbian and post-Conquest ideologies (and structured by the almost total adoption of Roman Catholicism)</p>', 'a:3:{i:0;s:0:"";i:1;s:0:"";i:2;s:0:"";}', NULL, NULL),
(10, '<span class="Apple-style-span" style="font-size: small">Programming can be tought directly through good programming books</span>', 'multiple_one', 31, 3, 'low', 'a:2:{i:0;s:4:"True";i:1;s:5:"False";}', 'a:1:{i:0;s:1:"1";}', '', NULL, NULL, NULL),
(11, '<span class="Apple-style-span" style="font-size: small">Select all options that can delay the executation of a program</span>\r\n', 'multiple_many', 36, 3, 'medium', 'a:4:{i:0;s:17:"Unoptimized loops";i:1;s:21:"Too much Input-Output";i:2;s:7:"Logging";i:3;s:11:"Slow memory";}', 'a:2:{i:0;s:1:"1";i:1;s:1:"1";}', '', NULL, NULL, NULL),
(12, '<span class="Apple-style-span" style="font-size: small">The most efficient way to debug is... (select those that apply)</span>\r\n', 'multiple_many', 32, 3, 'medium', 'a:4:{i:0;s:29:"By dividing the problem space";i:1;s:14:"By using a log";i:2;s:19:"By using a profiler";i:3;s:27:"By using garbage collection";}', 'a:2:{i:0;s:1:"1";i:1;s:1:"1";}', '', NULL, NULL, NULL),
(13, '<span class="Apple-style-span" style="font-size: small">What is the best way to deal with poor programming code</span>\r\n', 'multiple_one', 31, 3, 'medium', 'a:3:{i:0;s:10:"Rewrite it";i:1;s:8:"Debug it";i:2;s:9:"Bundle it";}', 'a:1:{i:0;s:1:"2";}', 'Bundling poor code with good coding practices so you limit its effect to the rest of the system is usually most efficient than trying to debug it or rewrite it', NULL, NULL, NULL),
(14, 'Which of the following are source control systems\r\n', 'multiple_many', 31, 3, 'medium', 'a:5:{i:0;s:3:"SVN";i:1;s:3:"CVS";i:2;s:3:"ERP";i:3;s:3:"HCD";i:4;s:3:"NGI";}', 'a:2:{i:0;s:1:"1";i:1;s:1:"1";}', 'SVN= Subversioning<br />CVS= Concurrent Versioning System', NULL, NULL, NULL),
(15, '<span class="Apple-style-span" style="font-size: small">The most efficient way to debug is... (select those that apply)</span>', 'multiple_many', 59, 4, 'medium', 'a:4:{i:0;s:29:"By dividing the problem space";i:1;s:14:"By using a log";i:2;s:19:"By using a profiler";i:3;s:27:"By using garbage collection";}', 'a:2:{i:0;s:1:"1";i:1;s:1:"1";}', '', NULL, NULL, NULL),
(16, '<span class="Apple-style-span" style="font-size: small">Select all options that can delay the executation of a program</span>', 'multiple_many', 59, 4, 'medium', 'a:4:{i:0;s:17:"Unoptimized loops";i:1;s:21:"Too much Input-Output";i:2;s:7:"Logging";i:3;s:11:"Slow memory";}', 'a:2:{i:0;s:1:"1";i:1;s:1:"1";}', '', NULL, NULL, NULL),
(17, 'To deal with performance problems you should...', 'multiple_one', 56, 4, 'medium', 'a:4:{i:0;s:37:"Find the few bottlenecks and fix them";i:1;s:63:"Fix as many as possible issues with varying degrees of benefits";i:2;s:28:"Buy more hardware and memory";i:3;s:29:"Build the system from scratch";}', 'a:1:{i:0;s:1:"0";}', '', NULL, NULL, NULL),
(18, '<span class="Apple-style-span" style="font-size: small">Programming can be tought directly through good programming books</span>', 'multiple_one', 59, 4, 'low', 'a:2:{i:0;s:4:"True";i:1;s:5:"False";}', 'a:1:{i:0;s:1:"1";}', '', NULL, NULL, NULL),
(19, '<span class="Apple-style-span" style="font-size: small">Programming can be tought directly through good programming books</span>', 'multiple_one', 78, 4, 'low', 'a:2:{i:0;s:4:"True";i:1;s:5:"False";}', 'a:1:{i:0;s:1:"1";}', '', NULL, NULL, NULL),
(20, 'Which of the following are source control systems\r\n', 'multiple_many', 78, 4, 'medium', 'a:5:{i:0;s:3:"SVN";i:1;s:3:"CVS";i:2;s:3:"ERP";i:3;s:3:"HCD";i:4;s:3:"NGI";}', 'a:2:{i:0;s:1:"1";i:1;s:1:"1";}', '', NULL, NULL, NULL),
(21, '<span class="Apple-style-span" style="font-size: small">Select all options that can delay the executation of a program</span>', 'multiple_many', 78, 4, 'medium', 'a:4:{i:0;s:17:"Unoptimized loops";i:1;s:21:"Too much Input-Output";i:2;s:7:"Logging";i:3;s:11:"Slow memory";}', 'a:2:{i:0;s:1:"1";i:1;s:1:"1";}', '', NULL, NULL, NULL),
(22, '<span class="Apple-style-span" style="font-size: small">What is the best way to deal with poor programming code</span>\r\n', 'multiple_one', 78, 4, 'medium', 'a:3:{i:0;s:10:"Rewrite it";i:1;s:8:"Debug it";i:2;s:9:"Bundle it";}', 'a:1:{i:0;s:1:"2";}', '', NULL, NULL, NULL),
(23, '<span class="Apple-style-span" style="font-size: small">The most efficient way to debug is... (select those that apply)</span>', 'multiple_many', 78, 4, 'medium', 'a:4:{i:0;s:29:"By dividing the problem space";i:1;s:14:"By using a log";i:2;s:19:"By using a profiler";i:3;s:27:"By using garbage collection";}', 'a:2:{i:0;s:1:"1";i:1;s:1:"1";}', '', NULL, NULL, NULL),
(24, '<span class="Apple-style-span" style="font-style: italic">&quot;Whenever you can you should avoid loops&quot;</span>. This sentense is ...', 'multiple_one', 95, 5, 'medium', 'a:4:{i:0;s:5:"False";i:1;s:4:"True";i:2;s:15:"Most often true";i:3;s:16:"Most often false";}', 'a:1:{i:0;s:1:"0";}', 'Loops are a necessary evil and often the reason for slowing down programs. Whenever you can you should replace them with better solutions.', NULL, NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `questions_to_skills`
--

CREATE TABLE IF NOT EXISTS `questions_to_skills` (
  `questions_id` mediumint(8) unsigned NOT NULL,
  `skills_ID` mediumint(8) unsigned NOT NULL,
  `relevance` int(1) DEFAULT '1',
  KEY `questions_id` (`questions_id`,`skills_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `questions_to_surveys`
--

CREATE TABLE IF NOT EXISTS `questions_to_surveys` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `surveys_ID` mediumint(8) unsigned DEFAULT NULL,
  `type` varchar(40) DEFAULT NULL,
  `question` mediumtext,
  `answers` mediumtext,
  `created` int(10) unsigned DEFAULT NULL,
  `info` mediumtext,
  `father_ID` mediumint(8) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `surveys_ID` (`surveys_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `rules`
--

CREATE TABLE IF NOT EXISTS `rules` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `users_LOGIN` varchar(100) NOT NULL,
  `content_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `rule_type` varchar(255) NOT NULL,
  `rule_content_ID` mediumint(8) unsigned DEFAULT '0',
  `rule_option` float DEFAULT '0',
  `lessons_ID` mediumint(8) unsigned DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

--
-- Dumping data for table `rules`
--

INSERT INTO `rules` (`id`, `users_LOGIN`, `content_ID`, `rule_type`, `rule_content_ID`, `rule_option`, `lessons_ID`) VALUES
(1, '*', 0, 'serial', 0, 0, 2);

-- --------------------------------------------------------

--
-- Table structure for table `scorm_data`
--

CREATE TABLE IF NOT EXISTS `scorm_data` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `content_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `users_LOGIN` varchar(100) DEFAULT NULL,
  `timestamp` int(10) unsigned DEFAULT NULL,
  `lesson_location` text,
  `maxtimeallowed` varchar(255) DEFAULT NULL,
  `timelimitaction` varchar(255) DEFAULT NULL,
  `masteryscore` varchar(255) DEFAULT NULL,
  `datafromlms` text,
  `entry` varchar(255) NOT NULL DEFAULT '',
  `total_time` varchar(255) DEFAULT NULL,
  `comments` varchar(255) DEFAULT NULL,
  `comments_from_lms` text,
  `lesson_status` varchar(255) DEFAULT NULL,
  `score` varchar(255) DEFAULT NULL,
  `scorm_exit` varchar(255) DEFAULT NULL,
  `minscore` varchar(255) DEFAULT NULL,
  `maxscore` varchar(255) DEFAULT NULL,
  `suspend_data` text,
  `completion_threshold` varchar(255) DEFAULT NULL,
  `completion_status` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `search_invertedindex`
--

CREATE TABLE IF NOT EXISTS `search_invertedindex` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `keyword` varchar(150) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=5408 ;

--
-- Dumping data for table `search_invertedindex`
--

INSERT INTO `search_invertedindex` (`id`, `keyword`) VALUES
(1, 'greedy'),
(2, 'algorithms'),
(3, 'greedy'),
(4, 'algorithms'),
(5, 'floyd'),
(6, 'algorithm'),
(7, '\r\n	\r\n		\r\n			\r\n			floyd'),
(8, 'algorithm\r\n			in'),
(9, 'this'),
(10, 'problem'),
(11, 'want'),
(12, 'minimum'),
(13, 'routes'),
(14, 'between'),
(15, 'pairs'),
(16, 'peaks'),
(17, 'solves'),
(18, 'expansion'),
(19, 'another'),
(20, 'warshall'),
(21, 'first'),
(22, 'defined'),
(23, 'solution'),
(24, 'problem:\r\n			\r\n			in'),
(25, 'digraph'),
(26, 'whether'),
(27, 'there'),
(28, 'costs'),
(29, 'importance'),
(30, 'find'),
(31, 'route'),
(32, 'from'),
(33, 'gt;j'),
(34, '\r\n			\r\n			to'),
(35, 'solve'),
(36, 'array'),
(37, 'elements'),
(38, 'otherwise'),
(39, 'because'),
(40, 'cost'),
(41, 'important'),
(42, 'define'),
(43, 'adjoining'),
(44, 'were'),
(45, 'that'),
(46, 'means'),
(47, 'belonging'),
(48, 'requested'),
(49, 'called'),
(50, 'transitive'),
(51, 'closure'),
(52, '\r\n			\r\n			we'),
(53, 'notice'),
(54, 'boolean'),
(55, 'variables'),
(56, 'which'),
(57, 'operations'),
(58, 'valid'),
(59, 'initializes'),
(60, 'value'),
(61, 'c:\r\n			\r\n			a'),
(62, 'n\r\n			\r\n			at'),
(63, 'point'),
(64, 'shows'),
(65, 'only'),
(66, 'direct'),
(67, 'connections'),
(68, 'existing'),
(69, 'then'),
(70, 'goes'),
(71, 'through'),
(72, 'times'),
(73, 'time'),
(74, 'every'),
(75, 'node'),
(76, 'main'),
(77, 'thinking'),
(78, 'already'),
(79, 'been'),
(80, 'found'),
(81, '\r\n			\r\n			\r\n			\r\n			if'),
(82, 'characteristics'),
(83, 'taken'),
(84, 'under'),
(85, 'consideration'),
(86, 'rule'),
(87, 'pass'),
(88, 'is:\r\n			a'),
(89, 'come'),
(90, 'back'),
(91, 'talking'),
(92, 'about'),
(93, 'graph'),
(94, 'will'),
(95, 'finally'),
(96, 'consist'),
(97, '\r\n			during'),
(98, 'following'),
(99, 'formula'),
(100, 'valid:\r\n			a'),
(101, '=min'),
(102, '\r\n			which'),
(103, 'cheaper'),
(104, 'winner'),
(105, 'gives'),
(106, '\r\n			\r\n			\r\n				\r\n					\r\n						\r\n						\r\n						\r\n						\r\n						\r\n					\r\n				\r\n			\r\n			\r\n		\r\n	\r\n\r\n'),
(107, 'general'),
(108, 'concepts'),
(109, 'test'),
(110, 'travelling'),
(111, 'salesman'),
(112, 'problem'),
(113, '\r\n	\r\n		\r\n			\r\n			traveling'),
(114, '\r\n			example:'),
(115, 'heuristic'),
(116, 'traveling'),
(117, '\r\n			\r\n			this'),
(118, 'most'),
(119, 'known'),
(120, 'problems'),
(121, 'often'),
(122, 'difficult'),
(123, 'must'),
(124, 'visit'),
(125, 'cities'),
(126, 'passing'),
(127, 'each'),
(128, 'city'),
(129, 'once'),
(130, 'beginning'),
(131, 'them'),
(132, 'considered'),
(133, 'base'),
(134, 'returning'),
(135, 'transportation'),
(136, 'among'),
(137, 'whichever'),
(138, 'combination'),
(139, 'possible'),
(140, 'given'),
(141, 'program'),
(142, 'journey'),
(143, 'order'),
(144, 'visiting'),
(145, 'such'),
(146, '\r\n			\r\n			let'),
(147, '39;s'),
(148, 'number'),
(149, 'city-base'),
(150, 'also'),
(151, 'assume'),
(152, 'gt;c'),
(153, 'apparently'),
(154, 'solutions'),
(155, 'someone'),
(156, 'could'),
(157, 'probably'),
(158, 'determine'),
(159, 'systematically'),
(160, 'everyone'),
(161, 'these'),
(162, 'keep'),
(163, 'with'),
(164, 'requires'),
(165, 'least'),
(166, 'steps'),
(167, '\r\n			\r\n			if'),
(168, 'example'),
(169, 'required'),
(170, '21-1'),
(171, '!=20!'),
(172, 'step'),
(173, 'msec'),
(174, 'would'),
(175, 'need'),
(176, 'centuries'),
(177, 'calculations'),
(178, 'exhausting'),
(179, 'examination'),
(180, 'question'),
(181, 'since'),
(182, 'aware'),
(183, 'other'),
(184, 'quick'),
(185, 'finds'),
(186, 'best'),
(187, 'according'),
(188, 'whenever'),
(189, 'town'),
(190, 'chooses'),
(191, 'next'),
(192, 'where'),
(193, 'pointers'),
(194, 'visited'),
(195, 'simple'),
(196, 'just'),
(197, 'case'),
(198, 'more'),
(199, 'than'),
(200, 'give'),
(201, 'smaller'),
(202, 'chosen'),
(203, 'selects'),
(204, 'cheapest'),
(205, 'does'),
(206, 'care'),
(207, 'lead'),
(208, 'wrong'),
(209, 'result'),
(210, '\r\n			\r\n		\r\n	\r\n\r\n'),
(211, 'adjoining'),
(212, 'array'),
(213, '\r\n	\r\n		\r\n			\r\n			adjoining'),
(214, 'array\r\n			the'),
(215, 'used'),
(216, 'quot;data'),
(217, 'structure'),
(218, 'quot;'),
(219, 'represent'),
(220, 'graphs'),
(221, 'useful'),
(222, 'prim'),
(223, 'implemented'),
(224, 'using'),
(225, 'specified'),
(226, 'when'),
(227, '39;t'),
(228, 'directed'),
(229, 'symmetrical'),
(230, '\r\n			\r\n			the'),
(231, ':\r\n			\r\n			1'),
(232, 'mark'),
(233, 'beside'),
(234, 'line'),
(235, 'delete'),
(236, 'column'),
(237, '\r\n			2'),
(238, 'deleted'),
(239, 'belongs'),
(240, 'choose'),
(241, 'terminates'),
(242, '\r\n			3'),
(243, 'return'),
(244, '2\r\n			\r\n			in'),
(245, 'become'),
(246, 'child'),
(247, '\r\n			\r\n			\r\n				\r\n					\r\n						\r\n						\r\n						\r\n						\r\n					\r\n				\r\n			\r\n			\r\n		\r\n	\r\n\r\n'),
(248, 'backtracking'),
(249, '\r\n	\r\n		\r\n			\r\n			backtracking\r\n			the'),
(250, 'method'),
(251, 'based'),
(252, 'inquisition'),
(253, 'procedure'),
(254, 'rejected'),
(255, 'before'),
(256, 'even'),
(257, 'examined'),
(258, 'their'),
(259, 'getting'),
(260, '\r\n			\r\n			an'),
(261, 'requirement'),
(262, 'fulfilled'),
(263, 'proper'),
(264, 'hierarchy'),
(265, 'produce'),
(266, 'sets'),
(267, 'fulfill'),
(268, 'certain'),
(269, 'produced'),
(270, 'reason'),
(271, 'follows'),
(272, 'model'),
(273, 'non-cycle'),
(274, 'consider'),
(275, 'tree'),
(276, 'root'),
(277, 'represents'),
(278, 'nodes'),
(279, 'lower'),
(280, 'levels'),
(281, 'properties'),
(282, 'obviously'),
(283, 'leaves'),
(284, 'isolated'),
(285, 'easily'),
(286, 'understood'),
(287, 'during'),
(288, 'whole'),
(289, 'sub-tree'),
(290, 'backtrack'),
(291, 'ancestor'),
(292, 'children'),
(293, 'expected'),
(294, 'subsets'),
(295, 'process'),
(296, 'itself'),
(297, 'very'),
(298, 'popular'),
(299, '\r\n			\r\n			\r\n			the'),
(300, 'queens'),
(301, 'problem\r\n			we'),
(302, 'grid'),
(303, 'squares'),
(304, 'dimensioned'),
(305, 'partly'),
(306, 'equivalent'),
(307, 'chessboard'),
(308, 'containing'),
(309, 'places'),
(310, 'queen'),
(311, 'placed'),
(312, 'controls'),
(313, 'diagonals'),
(314, 'asked'),
(315, 'square'),
(316, 'controlled'),
(317, 'while'),
(318, 'drawing'),
(319, 'below'),
(320, '\r\n			\r\n			\r\n			\r\n			a'),
(321, 'position'),
(322, 'pair'),
(323, 'same'),
(324, 'permutes'),
(325, 'still'),
(326, 'forbiddingly'),
(327, 'correct'),
(328, 'satisfies'),
(329, 'last'),
(330, 'requirement:'),
(331, 'belong'),
(332, 'diagonal'),
(333, 'is:\r\n			\r\n			v'),
(334, 'gt;±'),
(335, '\r\n			\r\n			a'),
(336, 'constructs'),
(337, 'examines'),
(338, 'property'),
(339, 'shape'),
(340, 'construction'),
(341, 'ordered'),
(342, 'condition'),
(343, 'reject'),
(344, 'contrary'),
(345, 'producing-examining'),
(346, 'further'),
(347, 'satisfied'),
(348, 'inserted'),
(349, 'j:=v'),
(350, 'these:j-1'),
(351, 'gt;3'),
(352, 'gt;2'),
(353, 'gt;-2'),
(354, 'gt;1'),
(355, 'gt;-1'),
(356, 'satisfying'),
(357, 'requirements'),
(358, 'permutes:'),
(359, 'connect'),
(360, 'meanwhile'),
(361, 'large'),
(362, 'have'),
(363, 'typical'),
(364, 'declaration'),
(365, 'algorithm:'),
(366, 'starting'),
(367, 'whose'),
(368, 'inductive'),
(369, 'includes'),
(370, 'attempt'),
(371, 'increase'),
(372, 'jk+1'),
(373, '\r\n			\r\n			for'),
(374, 'produces'),
(375, 'indirect'),
(376, 'picture'),
(377, '4!=24'),
(378, 'candidate'),
(379, '\r\n			\r\n			\r\n			\r\n			\r\n			solution'),
(380, '\r\n			\r\n			'),
(381, 'nbsp;\r\n			\r\n			\r\n				\r\n					\r\n						\r\n						\r\n						\r\n					\r\n				\r\n			\r\n			\r\n		\r\n	\r\n\r\n'),
(382, 'dijkstra'),
(383, 'algorithm'),
(384, '\r\n	\r\n		\r\n			\r\n			dijkstra'),
(385, 'algorithm\r\n			this'),
(386, 'precedence'),
(387, 'positive'),
(388, 'function'),
(389, 'paragraph'),
(390, 'combined'),
(391, 'some'),
(392, 'sides'),
(393, 'fully'),
(394, 'covered'),
(395, 'well'),
(396, 'side'),
(397, 'equal'),
(398, 'direction'),
(399, 'idea'),
(400, 'fact'),
(401, 'less'),
(402, 'happens'),
(403, 'numbers'),
(404, 'directly'),
(405, 'connected'),
(406, 'appliance'),
(407, 'dynamic'),
(408, 'programming'),
(409, '\r\n			\r\n			\r\n			methodology'),
(410, '\r\n			let'),
(411, 'call'),
(412, 'lt;='),
(413, 'show'),
(414, 'arcs'),
(415, 'maximum'),
(416, '\r\n			\r\n			on'),
(417, 'previous'),
(418, 'symbolism'),
(419, 'here'),
(420, 'name'),
(421, 'rest'),
(422, 'assign'),
(423, 'peak'),
(424, 'gt;v'),
(425, '\r\n			e'),
(426, ':=cost'),
(427, '\r\n			p'),
(428, ':=the'),
(429, 'pointer'),
(430, 'connection'),
(431, '\r\n			\r\n			when'),
(432, 'terminal'),
(433, 'examine'),
(434, 'set:'),
(435, 'initialization'),
(436, '=infinite'),
(437, 'exist'),
(438, 'minimoum'),
(439, 'routes'),
(440, '\r\n	\r\n		\r\n			\r\n			minimoum'),
(441, 'routes\r\n			the'),
(442, 'subgraph'),
(443, 'constructed'),
(444, 'quot;minimum'),
(445, 'examples'),
(446, 'or/and'),
(447, 'methods'),
(448, 'heuristic'),
(449, 'algorithms'),
(450, '\r\n	\r\n		\r\n			\r\n			heuristic'),
(451, 'algorithms\r\n			the'),
(452, 'term'),
(453, 'ones'),
(454, 'they'),
(455, 'guarantee'),
(456, 'therefore'),
(457, 'approximately'),
(458, 'accurate'),
(459, 'usually'),
(460, 'close'),
(461, 'fast'),
(462, 'sometimes'),
(463, 'actually'),
(464, 'until'),
(465, 'proven'),
(466, 'greediness'),
(467, 'easy'),
(468, 'ignores'),
(469, 'suppresses'),
(470, 'demands'),
(471, 'dynamic'),
(472, 'programming'),
(473, '\r\n	\r\n		\r\n			\r\n			dynamic'),
(474, 'programming\r\n			the'),
(475, 'faced'),
(476, 'quest'),
(477, 'calculate'),
(478, 'without'),
(479, 'spending'),
(480, 'special'),
(481, 'effort'),
(482, '\r\n			\r\n			\r\n			dynamic'),
(483, 'tends'),
(484, 'break'),
(485, 'original'),
(486, 'sub-problems'),
(487, 'size'),
(488, 'bigger'),
(489, 'retroactive'),
(490, 'connects'),
(491, 'simply'),
(492, 'divide'),
(493, 'conquer'),
(494, 'what'),
(495, 'abort'),
(496, 'candidates'),
(497, 'chance'),
(498, 'giving'),
(499, 'furthermore'),
(500, 'information'),
(501, 'choices'),
(502, 'possibility'),
(503, 'leading'),
(504, 'stored'),
(505, '\r\n			\r\n			in'),
(506, 'finding'),
(507, 'make'),
(508, 'principal'),
(509, 'roughly'),
(510, 'says'),
(511, 'expect'),
(512, 'applying'),
(513, 'chapter'),
(514, 'points:'),
(515, 'points'),
(516, 'choice'),
(517, 'done'),
(518, '\r\n			\r\n			\r\n			\r\n			every'),
(519, 'divided'),
(520, 'parts:'),
(521, 'sub-problem'),
(522, 'that:\r\n			\r\n			\r\n			minimum'),
(523, 'depending'),
(524, 'restricted'),
(525, 'form'),
(526, 'strictly'),
(527, 'proofed'),
(528, 'theorem'),
(529, 'consists'),
(530, 'sums'),
(531, 'are:'),
(532, '\r\n			\r\n			1'),
(533, 'systematic'),
(534, 'quot;principal'),
(535, 'offer'),
(536, 'remain'),
(537, 'storing'),
(538, 'internal'),
(539, 'future'),
(540, 'prim'),
(541, 'algorithm'),
(542, '\r\n	\r\n		\r\n			\r\n			prim'),
(543, 'algorithm\r\n			at'),
(544, 'random'),
(545, 'simplicity'),
(546, 'accept'),
(547, 'initialized'),
(548, 'greek'),
(549, 'word'),
(550, 'oristiko'),
(551, 'always'),
(552, 'contain'),
(553, 'those'),
(554, 'terminally'),
(555, 'attached'),
(556, 'prosorino'),
(557, 'temporary'),
(558, 'contains'),
(559, 'execution'),
(560, 'numbering'),
(561, 'corresponding'),
(562, 'newly'),
(563, 'course'),
(564, 'change'),
(565, 'putting'),
(566, 'removing'),
(567, 'seem'),
(568, 'extremely'),
(569, 'complicated'),
(570, 'animated'),
(571, 'applet:\r\n			\r\n			\r\n				\r\n					\r\n						\r\n						\r\n						\r\n					\r\n				\r\n			\r\n			\r\n			'),
(572, 'nbsp;\r\n			\r\n			\r\n		\r\n	\r\n\r\n'),
(573, 'kruskal'),
(574, 'algorithm'),
(575, '\r\n	\r\n		\r\n			\r\n			kruskal'),
(576, 'algorithm\r\n			the'),
(577, 'starts'),
(578, 'forest'),
(579, 'trees'),
(580, 'nothing'),
(581, 'else'),
(582, 'different'),
(583, 'having'),
(584, 'genetic'),
(585, 'policy'),
(586, 'again'),
(587, 'circle'),
(588, 'destroy'),
(589, 'either'),
(590, 'insert'),
(591, 'connecting'),
(592, 'small'),
(593, 'into'),
(594, 'introduction'),
(595, '\r\n	\r\n		\r\n			\r\n			introduction\r\n			in'),
(596, 'lesson'),
(597, 'discuss'),
(598, 'apply'),
(599, 'many'),
(600, 'sense'),
(601, 'create'),
(602, 'and/or'),
(603, 'fulfills'),
(604, 'exponent'),
(605, 'fictional'),
(606, 'functions'),
(607, 'quantity'),
(608, 'cases'),
(609, 'maybe'),
(610, 'combinations'),
(611, 'quantities'),
(612, 'worst'),
(613, 'modern'),
(614, 'parallel'),
(615, 'computers'),
(616, 'mathematical'),
(617, 'actions'),
(618, 'require'),
(619, 'calculations!\r\n			\r\n			all'),
(620, 'acceptable'),
(621, 'look'),
(622, 'meaning'),
(623, 'better'),
(624, 'comparison'),
(625, 'made'),
(626, 'criteria'),
(627, 'herein'),
(628, 'representing'),
(629, 'profit'),
(630, 'seek'),
(631, 'potential'),
(632, 'greed'),
(633, 'hill'),
(634, 'elevation'),
(635, '\r\n	\r\n		\r\n			\r\n			greed'),
(636, '\r\n			this'),
(637, 'applied'),
(638, 'sought'),
(639, 'separate'),
(640, 'maximized'),
(641, 'checking'),
(642, 'consequences'),
(643, 'might'),
(644, 'final'),
(645, 'drastic'),
(646, 'shrinking'),
(647, 'despite'),
(648, 'topical;'),
(649, 'take'),
(650, 'mind'),
(651, 'shortsighted'),
(652, 'doesn'),
(653, 'leads'),
(654, 'though'),
(655, 'quot;pretty'),
(656, 'near'),
(657, 'explanation'),
(658, 'part'),
(659, 'optimal'),
(660, '\r\n			\r\n			\r\n				\r\n					\r\n						here'),
(661, 'walls'),
(662, 'inside'),
(663, 'outside'),
(664, 'moving'),
(665, '\r\n						between'),
(666, 'depends'),
(667, 'variety'),
(668, 'reasons'),
(669, 'path'),
(670, '\r\n						cost'),
(671, 'move'),
(672, 'center'),
(673, 'reach'),
(674, '\r\n						nearer'),
(675, 'units'),
(676, 'after'),
(677, '\r\n						the'),
(678, '\r\n						\r\n					\r\n					\r\n						\r\n						\r\n					\r\n				\r\n			\r\n			\r\n			'),
(679, 'order'),
(680, 'projects'),
(681, 'deadlines'),
(682, '\r\n	\r\n		\r\n			\r\n			order'),
(683, 'deadlines\r\n			we'),
(684, 'situation'),
(685, '\r\n			\r\n			suppose'),
(686, 'deadline'),
(687, 'gt;0'),
(688, 'integer'),
(689, 'gained'),
(690, 'project'),
(691, 'exceeded'),
(692, 'unit'),
(693, 'should'),
(694, 'maximize'),
(695, 'total'),
(696, 'profit?\r\n			\r\n			an'),
(697, 'expectable'),
(698, 'necessarily'),
(699, 'appearance'),
(700, 'set:l='),
(701, 'whereas'),
(702, 'followed'),
(703, 'adds'),
(704, 'is:\r\n			k'),
(705, '=sum'),
(706, 'presuming'),
(707, 'remaining'),
(708, 'check'),
(709, 'overadded'),
(710, 'logically'),
(711, 'transpositions'),
(712, 'present'),
(713, 'however'),
(714, 'transfer'),
(715, 'inclining'),
(716, 'aborts'),
(717, 'selected'),
(718, 'ends'),
(719, 'left'),
(720, '\r\n			\r\n			\r\n		\r\n	\r\n\r\n\r\n	\r\n		\r\n			'),
(721, 'minimum'),
(722, 'genetic'),
(723, 'tree'),
(724, '\r\n	\r\n		\r\n			\r\n			minimum'),
(725, 'tree\r\n			let'),
(726, 'network'),
(727, 'real'),
(728, '\r\n			'),
(729, 'expand'),
(730, 'assuming'),
(731, ':\r\n			'),
(732, 'access'),
(733, 'zero'),
(734, '=0;\r\n			'),
(735, 'infinite'),
(736, 'conclusion'),
(737, 'is:\r\n			\r\n			\r\n				\r\n					\r\n						'),
(738, '\r\n						c'),
(739, '\r\n						'),
(740, '\r\n					\r\n					\r\n						'),
(741, '\r\n						infinite'),
(742, '\r\n					\r\n				\r\n			\r\n			\r\n			we'),
(743, 'connective'),
(744, '\r\n			\r\n			as'),
(745, 'undergraph'),
(746, 'concerned'),
(747, '39;=v'),
(748, 'number:\r\n			cost'),
(749, 'following:'),
(750, 'lt;=cost'),
(751, '\r\n			they'),
(752, 'maya'),
(753, 'civilization'),
(754, 'maya'),
(755, 'civilization'),
(756, 'religion'),
(757, 'religion\r\n\r\n\r\n\r\n	\r\n		\r\n			'),
(758, '\r\n			\r\n			\r\n			\r\n			\r\n		\r\n		\r\n			'),
(759, 'chaac'),
(760, 'rain'),
(761, 'thunder\r\n		\r\n	\r\n\r\nlike'),
(762, 'aztec'),
(763, 'inca'),
(764, 'came'),
(765, 'power'),
(766, 'later'),
(767, 'believed'),
(768, 'cyclical'),
(769, 'nature'),
(770, 'rituals'),
(771, 'ceremonies'),
(772, 'closely'),
(773, 'associated'),
(774, 'celestial/terrestrial'),
(775, 'cycles'),
(776, 'observed'),
(777, 'inscribed'),
(778, 'calendars'),
(779, 'priest'),
(780, 'interpreting'),
(781, 'prophetic'),
(782, 'outlook'),
(783, 'past'),
(784, 'relations'),
(785, 'quot;heavens'),
(786, 'celestial'),
(787, 'matters'),
(788, 'appropriate'),
(789, 'performing'),
(790, 'religious'),
(791, '\r\n\r\nthe'),
(792, 'practiced'),
(793, 'human'),
(794, 'sacrifice'),
(795, 'people'),
(796, 'killed'),
(797, 'arms'),
(798, 'legs'),
(799, 'held'),
(800, 'person'),
(801, 'chest'),
(802, 'open'),
(803, 'tore'),
(804, 'heart'),
(805, 'offering'),
(806, 'depicted'),
(807, 'ancient'),
(808, 'objects'),
(809, 'pictorial'),
(810, 'texts'),
(811, 'codecs'),
(812, 'offered'),
(813, 'sacrificial'),
(814, 'victims'),
(815, 'pure'),
(816, '\r\n\r\nmuch'),
(817, 'tradition'),
(818, 'scholars'),
(819, 'like'),
(820, 'pre-modern'),
(821, 'societies'),
(822, 'cosmos'),
(823, 'three'),
(824, 'major'),
(825, 'planes'),
(826, 'underworld'),
(827, 'earth'),
(828, 'reached'),
(829, 'caves'),
(830, 'ball'),
(831, 'courts'),
(832, 'thought'),
(833, 'dominated'),
(834, 'aged'),
(835, 'gods'),
(836, 'death'),
(837, 'putrefaction'),
(838, 'itzamna'),
(839, 'both'),
(840, 'night'),
(841, 'window'),
(842, 'showing'),
(843, 'supernatural'),
(844, 'doings'),
(845, 'configured'),
(846, 'constellations'),
(847, 'unfolding'),
(848, 'narratives'),
(849, 'seasonal'),
(850, 'movements'),
(851, 'intersection'),
(852, 'worlds'),
(853, '\r\n\r\nmaya'),
(854, 'discrete'),
(855, 'entities'),
(856, 'affinities'),
(857, 'aspects'),
(858, 'caused'),
(859, 'merge'),
(860, 'ways'),
(861, 'unbounded'),
(862, 'massive'),
(863, 'characters'),
(864, 'recur'),
(865, 'regularity'),
(866, 'good'),
(867, 'evil'),
(868, 'traits'),
(869, 'permanent'),
(870, 'quot;good'),
(871, 'admirable'),
(872, 'inappropriate'),
(873, 'season'),
(874, 'much'),
(875, 'mayan'),
(876, 'permanence'),
(877, 'life-cycle'),
(878, 'maize'),
(879, 'lies'),
(880, 'belief'),
(881, 'philosophy'),
(882, 'demonstrated'),
(883, 'central'),
(884, 'figure'),
(885, 'bodily'),
(886, 'ideal'),
(887, 'young'),
(888, 'artwork'),
(889, 'courtly'),
(890, 'life'),
(891, 'classical'),
(892, 'universe'),
(893, 'flat'),
(894, 'area'),
(895, 'worshiped'),
(896, 'symbolized'),
(897, 'perfection'),
(898, 'balancing'),
(899, 'forces'),
(900, '\r\n\r\nit'),
(901, 'multiple'),
(902, 'quot;gods'),
(903, 'represented'),
(904, 'literally'),
(905, 'effects'),
(906, 'types'),
(907, 'maintained'),
(908, 'included'),
(909, '260-day'),
(910, 'cycle'),
(911, '365-day'),
(912, 'approximated'),
(913, 'solar'),
(914, 'year'),
(915, 'recorded'),
(916, 'lunation'),
(917, 'periods'),
(918, 'moon'),
(919, 'tracked'),
(920, 'synodic'),
(921, 'period'),
(922, 'venus'),
(923, '\r\n\r\nphilosophically'),
(924, 'knowing'),
(925, 'meant'),
(926, 'influences'),
(927, '\r\n\r\neven'),
(928, '19th'),
(929, 'century'),
(930, 'influence'),
(931, 'local'),
(932, 'branch'),
(933, 'christianity'),
(934, 'chan'),
(935, 'santa'),
(936, 'cruz'),
(937, '39;iche'),
(938, 'western'),
(939, 'highlands'),
(940, 'guatemala'),
(941, 'nine'),
(942, 'months'),
(943, 'replicated'),
(944, 'training'),
(945, '39;ij'),
(946, 'keeper'),
(947, '260-day-calendar'),
(948, '39;olk'),
(949, '\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n'),
(950, 'astronomy'),
(951, '\r\nastronomy\r\n\r\nuniquely'),
(952, 'evidence'),
(953, 'suggest'),
(954, 'appear'),
(955, 'pre-telescopic'),
(956, 'demonstrate'),
(957, 'knowledge'),
(958, 'orion'),
(959, 'nebula'),
(960, 'being'),
(961, 'fuzzy'),
(962, 'stellar'),
(963, 'pin-point'),
(964, 'supports'),
(965, 'theory'),
(966, 'comes'),
(967, 'folk'),
(968, 'tale'),
(969, 'deals'),
(970, 'constellation'),
(971, 'traditional'),
(972, 'hearths'),
(973, 'include'),
(974, 'middle'),
(975, 'smudge'),
(976, 'glowing'),
(977, 'fire'),
(978, 'corresponds'),
(979, 'significant'),
(980, 'clue'),
(981, 'support'),
(982, 'detected'),
(983, 'diffuse'),
(984, 'stars'),
(985, 'telescope'),
(986, 'invented'),
(987, 'preclassic'),
(988, 'sites'),
(989, 'oriented'),
(990, 'pleiades'),
(991, 'draconnis'),
(992, 'seen'),
(993, 'blanca'),
(994, 'ujuxte'),
(995, 'monte'),
(996, 'alto'),
(997, 'takalik'),
(998, 'abaj'),
(999, 'interested'),
(1000, 'zenial'),
(1001, 'passages'),
(1002, 'passes'),
(1003, 'overhead'),
(1004, 'latitude'),
(1005, 'tropic'),
(1006, 'cancer'),
(1007, 'occur'),
(1008, 'twice'),
(1009, 'equidistant'),
(1010, 'solstice'),
(1011, 'named'),
(1012, 'diving'),
(1013, 'dresden'),
(1014, 'codex'),
(1015, 'highest'),
(1016, 'concentration'),
(1017, 'astronomical'),
(1018, 'phenomena'),
(1019, 'observations'),
(1020, 'surviving'),
(1021, 'appears'),
(1022, 'data'),
(1023, 'primarily'),
(1024, 'exclusively'),
(1025, 'analysis'),
(1026, 'reveals'),
(1027, 'object'),
(1028, '\r\n\r\n'),
(1029, 'mathematics'),
(1030, 'mathematics\r\n\r\n\r\n\r\n	\r\n		\r\n			 \r\n		\r\n		\r\n			 \r\n			maya'),
(1031, 'numbers\r\n		\r\n	\r\n\r\nin'),
(1032, 'common'),
(1033, 'mesoamerican'),
(1034, 'civilizations'),
(1035, 'vigesimal'),
(1036, 'system'),
(1037, 'neighbors'),
(1038, 'independently'),
(1039, 'developed'),
(1040, 'concept'),
(1041, 'inscriptions'),
(1042, 'occasion'),
(1043, 'working'),
(1044, 'hundreds'),
(1045, 'millions'),
(1046, 'dates'),
(1047, 'several'),
(1048, 'lines'),
(1049, 'observations;'),
(1050, 'charts'),
(1051, 'planets'),
(1052, 'superior'),
(1053, 'naked'),
(1054, 'observation'),
(1055, '\r\n\r\nalso'),
(1056, 'utilized'),
(1057, 'highly'),
(1058, 'measure'),
(1059, 'length'),
(1060, 'europe'),
(1061, 'basis'),
(1062, 'gregorian'),
(1063, 'calendar'),
(1064, 'instead'),
(1065, 'exactly'),
(1066, 'days'),
(1067, 'falls'),
(1068, 'seasons'),
(1069, 'four'),
(1070, 'years'),
(1071, 'julian'),
(1072, 'roman'),
(1073, '16th'),
(1074, 'accumulated'),
(1075, 'error'),
(1076, 'accumulates'),
(1077, '3257'),
(1078, 'writing'),
(1079, '\r\nwriting\r\n\r\n\r\n\r\nthe'),
(1080, 'hieroglyphs'),
(1081, 'superficial'),
(1082, 'resemblance'),
(1083, 'egyptian'),
(1084, 'phonetic'),
(1085, 'symbols'),
(1086, 'logograms'),
(1087, 'classified'),
(1088, 'logographic'),
(1089, 'properly'),
(1090, 'logosyllabic'),
(1091, 'syllabic'),
(1092, 'signs'),
(1093, 'play'),
(1094, 'role'),
(1095, 'pre-columbian'),
(1096, 'world'),
(1097, 'completely'),
(1098, 'spoken'),
(1099, 'language'),
(1100, 'community'),
(1101, 'script'),
(1102, 'thousand'),
(1103, 'glyphs'),
(1104, 'although'),
(1105, 'variations'),
(1106, 'sign'),
(1107, 'rarely'),
(1108, 'confined'),
(1109, 'particular'),
(1110, 'localities'),
(1111, 'around'),
(1112, 'including'),
(1113, 'interpretation'),
(1114, '\r\n\r\n\r\n\r\nthe'),
(1115, 'earliest'),
(1116, 'identifiably-maya'),
(1117, 'date'),
(1118, '200–300'),
(1119, 'preceded'),
(1120, 'systems'),
(1121, 'mesoamerica'),
(1122, 'notably'),
(1123, 'zapotecs'),
(1124, '2006'),
(1125, 'publication'),
(1126, 'research'),
(1127, 'recently-discovered'),
(1128, 'cascajal'),
(1129, 'block'),
(1130, 'olmecs'),
(1131, 'pre-maya'),
(1132, 'quot;epi-olmec'),
(1133, 'post'),
(1134, 'olmec'),
(1135, 'researchers'),
(1136, 'believe'),
(1137, 'transitional'),
(1138, 'relationships'),
(1139, 'unclear'),
(1140, 'matter'),
(1141, 'unsettled'),
(1142, 'january'),
(1143, 'national'),
(1144, 'geographic'),
(1145, 'published'),
(1146, 'findings'),
(1147, 'writings'),
(1148, 'suggesting'),
(1149, 'nearly'),
(1150, 'oldest'),
(1151, 'zapotec'),
(1152, 'succeeding'),
(1153, 'complete'),
(1154, 'complex'),
(1155, 'americas'),
(1156, '\r\n\r\n\r\n\r\nsince'),
(1157, 'inception'),
(1158, 'arrival'),
(1159, 'europeans'),
(1160, 'peaking'),
(1161, 'centers'),
(1162, 'went'),
(1163, 'decline'),
(1164, 'abandoned'),
(1165, 'skill'),
(1166, 'persisted'),
(1167, 'amongst'),
(1168, 'segments'),
(1169, 'population'),
(1170, 'early'),
(1171, 'spanish'),
(1172, 'conquistadors'),
(1173, 'knew'),
(1174, 'individuals'),
(1175, 'read'),
(1176, 'write'),
(1177, 'unfortunately'),
(1178, 'displayed'),
(1179, 'little'),
(1180, 'interest'),
(1181, 'dire'),
(1182, 'impacts'),
(1183, 'conquest'),
(1184, 'subsequently'),
(1185, 'lost'),
(1186, 'within'),
(1187, 'generations'),
(1188, '\r\n\r\n\r\n\r\nat'),
(1189, 'rough'),
(1190, 'estimate'),
(1191, 'excess'),
(1192, 'individual'),
(1193, 'recovered'),
(1194, 'mostly'),
(1195, 'stone'),
(1196, 'monuments'),
(1197, 'lintels'),
(1198, 'stelae'),
(1199, 'ceramic'),
(1200, 'pottery'),
(1201, 'painted'),
(1202, 'paper'),
(1203, 'manufactured'),
(1204, 'processed'),
(1205, 'tree-bark'),
(1206, 'species'),
(1207, 'strangler'),
(1208, 'ficus'),
(1209, 'cotinifolia'),
(1210, 'padifolia'),
(1211, 'throughout'),
(1212, 'generally'),
(1213, 'nahuatl-language'),
(1214, 'amatl'),
(1215, 'typically'),
(1216, 'bound'),
(1217, 'single'),
(1218, 'continuous'),
(1219, 'sheet'),
(1220, 'folded'),
(1221, 'pages'),
(1222, 'width'),
(1223, 'concertina-style'),
(1224, 'book'),
(1225, 'written'),
(1226, 'shortly'),
(1227, 'codices'),
(1228, 'burnt'),
(1229, 'destroyed'),
(1230, 'zealous'),
(1231, 'priests'),
(1232, 'bishop'),
(1233, 'diego'),
(1234, 'landa'),
(1235, 'reasonably'),
(1236, 'intact'),
(1237, 'survived'),
(1238, 'madrid'),
(1239, 'paris'),
(1240, 'survive'),
(1241, 'fourth'),
(1242, 'grolier'),
(1243, 'authenticity'),
(1244, 'disputed'),
(1245, 'genuine'),
(1246, 'archaeology'),
(1247, 'conducted'),
(1248, 'fragments'),
(1249, 'rectangular'),
(1250, 'lumps'),
(1251, 'plaster'),
(1252, 'paint'),
(1253, 'chips'),
(1254, 'formerly'),
(1255, 'codices;'),
(1256, 'tantalizing'),
(1257, 'remains'),
(1258, 'severely'),
(1259, 'damaged'),
(1260, 'organic'),
(1261, 'material'),
(1262, 'decayed'),
(1263, 'decipherment'),
(1264, 'recovery'),
(1265, 'now-lost'),
(1266, 'long'),
(1267, 'laborious'),
(1268, 'deciphered'),
(1269, 'late'),
(1270, '20th'),
(1271, 'parts'),
(1272, 'breakthroughs'),
(1273, '1950s'),
(1274, '1970s'),
(1275, 'accelerated'),
(1276, 'rapidly'),
(1277, 'thereafter'),
(1278, 'able'),
(1279, 'majority'),
(1280, 'extent'),
(1281, 'recent'),
(1282, 'field'),
(1283, 'work'),
(1284, 'continues'),
(1285, 'illuminate'),
(1286, 'content'),
(1287, '\r\n\r\n\r\n\r\nin'),
(1288, 'reference'),
(1289, 'extant'),
(1290, 'michael'),
(1291, 'prominent'),
(1292, 'linguist'),
(1293, 'epigrapher'),
(1294, 'yale'),
(1295, 'university'),
(1296, 'stated:\r\n\r\n\r\n\r\n'),
(1297, 'quot;our'),
(1298, 'tiny'),
(1299, 'fraction'),
(1300, 'thousands'),
(1301, 'books'),
(1302, 'full'),
(1303, 'learning'),
(1304, 'ritual'),
(1305, 'posterity'),
(1306, 'ourselves'),
(1307, 'upon'),
(1308, 'prayer'),
(1309, '39;pilgrim'),
(1310, 'progress'),
(1311, 'london:'),
(1312, 'thames'),
(1313, 'hudson'),
(1314, '1987'),
(1315, '\r\n\r\n\r\n\r\nmost'),
(1316, 'arrived'),
(1317, 'mainly'),
(1318, 'record'),
(1319, 'dynasties'),
(1320, 'wars'),
(1321, 'rulers'),
(1322, 'note'),
(1323, 'reveal'),
(1324, 'lives'),
(1325, 'women'),
(1326, 'remainder'),
(1327, 'hieroglyphics'),
(1328, 'funeral'),
(1329, 'describes'),
(1330, 'afterlife'),
(1331, '\r\n\r\n\r\n\r\nwriting'),
(1332, 'tools\r\n\r\n\r\n\r\nalthough'),
(1333, 'archaeological'),
(1334, 'provide'),
(1335, 'brushes'),
(1336, 'animal'),
(1337, 'hair'),
(1338, 'quills'),
(1339, 'codex-style'),
(1340, 'black'),
(1341, 'highlights'),
(1342, 'rise'),
(1343, 'territory'),
(1344, 'quot;land'),
(1345, '\r\n\r\n\r\n\r\nscribes'),
(1346, 'literacy\r\n\r\n\r\n\r\nscribes'),
(1347, 'depicts'),
(1348, 'trappings'),
(1349, 'indicating'),
(1350, 'scribes'),
(1351, 'bundles'),
(1352, 'headdresses'),
(1353, 'additionally'),
(1354, 'conjunction'),
(1355, 'tools'),
(1356, 'shell'),
(1357, 'clay'),
(1358, 'inkpots'),
(1359, '\r\n\r\n\r\n\r\nalthough'),
(1360, 'numbered'),
(1361, 'literacy'),
(1362, 'widespread'),
(1363, 'beyond'),
(1364, 'elite'),
(1365, 'classes'),
(1366, 'graffiti'),
(1367, 'uncovered'),
(1368, 'various'),
(1369, 'contexts'),
(1370, 'fired'),
(1371, 'bricks'),
(1372, 'nonsensical'),
(1373, 'attempts'),
(1374, 'imitate'),
(1375, 'architecture'),
(1376, '\r\narchitecture\r\n\r\n\r\n\r\nas'),
(1377, 'unique'),
(1378, 'spectacular'),
(1379, 'spans'),
(1380, 'years;'),
(1381, 'dramatic'),
(1382, 'recognizable'),
(1383, 'fantastic'),
(1384, 'stepped'),
(1385, 'pyramids'),
(1386, 'pre-classic'),
(1387, '\r\n\r\n\r\n\r\nthere'),
(1388, 'cave'),
(1389, 'jolja'),
(1390, 'site'),
(1391, 'tunich'),
(1392, 'candelaria'),
(1393, 'witch'),
(1394, 'cave-origin'),
(1395, 'myths'),
(1396, 'chiapas'),
(1397, '\r\n\r\n\r\n\r\nit'),
(1398, 'suggested'),
(1399, 'count'),
(1400, 'fifty-two'),
(1401, 'temples'),
(1402, 'remodeled'),
(1403, 'rebuilt'),
(1404, 'rebuilding'),
(1405, 'instigated'),
(1406, 'ruler'),
(1407, 'political'),
(1408, 'opposed'),
(1409, 'matching'),
(1410, 'structures'),
(1411, 'indeed'),
(1412, 'north'),
(1413, 'acropolis'),
(1414, 'tikal'),
(1415, 'seems'),
(1416, 'architectural'),
(1417, 'modifications'),
(1418, 'yaxhá'),
(1419, 'twin'),
(1420, 'pyramid'),
(1421, 'complexes'),
(1422, 'commemorate'),
(1423, 'baktún\r\n\r\n\r\n\r\nthrough'),
(1424, 'numerous'),
(1425, 'consistent'),
(1426, 'stylistic'),
(1427, 'distinctions'),
(1428, 'remnants'),
(1429, 'understanding'),
(1430, 'evolution'),
(1431, '\r\n\r\n\r\n\r\nurban'),
(1432, 'design\r\n\r\n\r\n\r\nas'),
(1433, 'spread'),
(1434, 'varied'),
(1435, 'geography'),
(1436, 'planning'),
(1437, 'minimal'),
(1438, 'tended'),
(1439, 'integrate'),
(1440, 'great'),
(1441, 'degree'),
(1442, 'natural'),
(1443, 'features'),
(1444, 'built'),
(1445, 'somewhat'),
(1446, 'haphazardly'),
(1447, 'dictated'),
(1448, 'topography'),
(1449, 'independent'),
(1450, 'location'),
(1451, 'instance'),
(1452, 'limestone'),
(1453, 'plains'),
(1454, 'northern'),
(1455, 'yucatán'),
(1456, 'grew'),
(1457, 'sprawling'),
(1458, 'municipalities'),
(1459, 'others'),
(1460, 'hills'),
(1461, 'usumacinta'),
(1462, 'loft'),
(1463, 'raise'),
(1464, 'towers'),
(1465, 'impressive'),
(1466, 'heights'),
(1467, 'semblance'),
(1468, 'prevailed'),
(1469, '\r\n\r\n\r\n\r\nclassic'),
(1470, 'urban'),
(1471, 'design'),
(1472, 'described'),
(1473, 'division'),
(1474, 'space'),
(1475, 'causeways'),
(1476, 'public'),
(1477, 'plazas'),
(1478, 'gathering'),
(1479, 'focus'),
(1480, 'interior'),
(1481, 'entirely'),
(1482, 'secondary'),
(1483, 'post-classic'),
(1484, 'develop'),
(1485, 'fortress-like'),
(1486, 'defensive'),
(1487, 'lacked'),
(1488, 'classic'),
(1489, 'onset'),
(1490, 'large-scale'),
(1491, 'predetermined'),
(1492, 'axis'),
(1493, 'established'),
(1494, 'cardinal'),
(1495, 'resources'),
(1496, 'fresh-water'),
(1497, 'wells'),
(1498, 'cenotes'),
(1499, 'sacbeob'),
(1500, 'singular:'),
(1501, 'sacbé'),
(1502, 'platforms'),
(1503, 'created'),
(1504, 'sub-structure'),
(1505, 'buildings'),
(1506, 'added'),
(1507, 're-built'),
(1508, 'seemed'),
(1509, 'almost'),
(1510, 'identity'),
(1511, 'contrasted'),
(1512, 'sharply'),
(1513, 'teotihuacan'),
(1514, 'rigid'),
(1515, 'grid-like'),
(1516, 'surrounded'),
(1517, 'governmental'),
(1518, 'royal'),
(1519, 'occasionally'),
(1520, 'ball-courts'),
(1521, 'layouts'),
(1522, 'evolved'),
(1523, 'careful'),
(1524, 'attention'),
(1525, 'directional'),
(1526, 'orientation'),
(1527, 'observatories'),
(1528, 'accordance'),
(1529, 'orbits'),
(1530, 'heavenly'),
(1531, 'bodies'),
(1532, 'immediately'),
(1533, 'lesser'),
(1534, 'nobles'),
(1535, 'shrines;'),
(1536, 'sacred'),
(1537, 'greater'),
(1538, 'privacy'),
(1539, 'constantly'),
(1540, 'evolving'),
(1541, 'core'),
(1542, 'modest'),
(1543, 'homes'),
(1544, '\r\n\r\n\r\n\r\nbuilding'),
(1545, 'materials\r\n\r\n\r\n\r\na'),
(1546, 'surprising'),
(1547, 'aspect'),
(1548, 'lack'),
(1549, 'advanced'),
(1550, 'technologies'),
(1551, 'seemingly'),
(1552, 'necessary'),
(1553, 'constructions'),
(1554, 'lacking'),
(1555, 'draft'),
(1556, 'animals'),
(1557, 'wheel-based'),
(1558, 'modes'),
(1559, 'metal'),
(1560, 'pulleys'),
(1561, 'abundant'),
(1562, 'manpower'),
(1563, 'enormous'),
(1564, 'materials'),
(1565, 'readily'),
(1566, 'available'),
(1567, 'quarries'),
(1568, 'remained'),
(1569, 'pliable'),
(1570, 'enough'),
(1571, 'worked'),
(1572, 'quarried'),
(1573, 'hardened'),
(1574, 'removed'),
(1575, 'addition'),
(1576, 'structural'),
(1577, 'mortar'),
(1578, 'consisted'),
(1579, 'crushed'),
(1580, 'mixed'),
(1581, 'mimicked'),
(1582, 'cement'),
(1583, 'widely'),
(1584, 'stucco'),
(1585, 'finishing'),
(1586, 'improvements'),
(1587, 'quarrying'),
(1588, 'techniques'),
(1589, 'reduced'),
(1590, 'necessity'),
(1591, 'limestone-stucco'),
(1592, 'stones'),
(1593, 'began'),
(1594, 'quite'),
(1595, 'perfectly'),
(1596, 'crucial'),
(1597, 'element'),
(1598, 'lintel'),
(1599, 'roofs'),
(1600, 'houses'),
(1601, 'wooden'),
(1602, 'poles'),
(1603, 'adobe'),
(1604, 'thatch'),
(1605, 'primary'),
(1606, 'materials;'),
(1607, 'instances'),
(1608, 'discovered'),
(1609, 'notable'),
(1610, 'corbel'),
(1611, 'arch'),
(1612, 'quot;false'),
(1613, 'limitations'),
(1614, 'kept'),
(1615, 'weighty'),
(1616, 'rather'),
(1617, 'airy'),
(1618, '\r\n\r\n\r\n\r\nnotable'),
(1619, 'constructions\r\n\r\n\r\n\r\n'),
(1620, 'ceremonial'),
(1621, 'commonly'),
(1622, 'meters'),
(1623, 'height'),
(1624, 'rites'),
(1625, 'performed'),
(1626, 'fashion'),
(1627, 'foundation'),
(1628, 'platform'),
(1629, 'accented'),
(1630, 'carved'),
(1631, 'figures'),
(1632, 'altars'),
(1633, 'perhaps'),
(1634, 'tzompantli'),
(1635, 'stake'),
(1636, 'display'),
(1637, 'heads'),
(1638, 'defeated'),
(1639, 'ballgame'),
(1640, 'opponents'),
(1641, 'palaces'),
(1642, 'decorated'),
(1643, 'housed'),
(1644, 'exceedingly'),
(1645, 'palace'),
(1646, 'consisting'),
(1647, 'chambers'),
(1648, 'referred'),
(1649, 'one-story'),
(1650, 'courtyard;'),
(1651, 'account'),
(1652, 'needed'),
(1653, 'functionality'),
(1654, 'residence'),
(1655, 'decoration'),
(1656, 'inhabitants'),
(1657, 'stature'),
(1658, 'e-groups'),
(1659, 'specific'),
(1660, 'configurations'),
(1661, 'aligned'),
(1662, 'events'),
(1663, 'sun’s'),
(1664, 'solstices'),
(1665, 'equinoxes'),
(1666, 'accompanied'),
(1667, 'iconographic'),
(1668, 'reliefs'),
(1669, 'mythology'),
(1670, 'group'),
(1671, 'uaxactun'),
(1672, 'documented'),
(1673, 'atop'),
(1674, 'towering'),
(1675, 'presumably'),
(1676, 'closest'),
(1677, 'place'),
(1678, 'heavens'),
(1679, 'discoveries'),
(1680, 'toward'),
(1681, 'extensive'),
(1682, 'tombs'),
(1683, 'themselves'),
(1684, 'ever'),
(1685, 'burials'),
(1686, 'residing'),
(1687, 'over'),
(1688, 'two-hundred'),
(1689, 'feet'),
(1690, 'mirador'),
(1691, 'topped'),
(1692, 'roof'),
(1693, 'comb'),
(1694, 'grandiose'),
(1695, 'wall'),
(1696, 'served'),
(1697, 'type'),
(1698, 'propaganda'),
(1699, 'exceed'),
(1700, 'surrounding'),
(1701, 'jungle'),
(1702, 'combs'),
(1703, 'representations'),
(1704, 'vast'),
(1705, 'distances'),
(1706, 'keen'),
(1707, 'astronomers'),
(1708, 'mapped'),
(1709, 'phases'),
(1710, 'especially'),
(1711, 'doorways'),
(1712, 'aligning'),
(1713, 'round'),
(1714, 'dedicated'),
(1715, 'kukulcan'),
(1716, 'quot;observatories'),
(1717, 'ruin'),
(1718, 'tour-guides'),
(1719, 'temple'),
(1720, 'shapes'),
(1721, 'integral'),
(1722, 'lifestyle'),
(1723, 'ball-game'),
(1724, 'realm'),
(1725, 'grand'),
(1726, 'scale'),
(1727, 'enclosed'),
(1728, 'ramps'),
(1729, 'court'),
(1730, 'capital'),
(1731, 'quot;i'),
(1732, 'smallest'),
(1733, '\r\n\r\n\r\n\r\n\r\n\r\n'),
(1734, 'postclassic'),
(1735, '\r\npostclassic'),
(1736, 'history\r\n\r\n\r\n\r\nduring'),
(1737, '10th'),
(1738, 'development'),
(1739, 'characterized'),
(1740, 'increasing'),
(1741, 'diversity'),
(1742, 'external'),
(1743, 'lowlands'),
(1744, 'continued'),
(1745, 'flourish'),
(1746, 'more;'),
(1747, 'chichen'),
(1748, 'itza'),
(1749, 'uxmal'),
(1750, 'edzná'),
(1751, 'coba'),
(1752, 'ruling'),
(1753, 'mayapan'),
(1754, 'ruled'),
(1755, 'revolt'),
(1756, '1450'),
(1757, 'source'),
(1758, 'quot;maya'),
(1759, 'geographically'),
(1760, 'yucatec'),
(1761, 'colonial'),
(1762, 'current'),
(1763, 'degenerated'),
(1764, 'competing'),
(1765, 'city-states'),
(1766, 'conquered'),
(1767, '39;woj'),
(1768, 'yalain'),
(1769, 'groups'),
(1770, 'peten'),
(1771, 'quot;classic'),
(1772, 'collapse'),
(1773, '1250'),
(1774, 'reconstituted'),
(1775, 'tayasal'),
(1776, 'petén'),
(1777, 'underlay'),
(1778, 'flores'),
(1779, 'lake'),
(1780, 'itzá'),
(1781, 'extending'),
(1782, 'across'),
(1783, 'lakes'),
(1784, 'region'),
(1785, 'encompassing'),
(1786, 'eckixil'),
(1787, 'quexil'),
(1788, 'zacpeten'),
(1789, 'states'),
(1790, 'southern'),
(1791, 'kingdoms'),
(1792, 'quiché'),
(1793, 'responsible'),
(1794, 'best-known'),
(1795, 'historiography'),
(1796, 'popol'),
(1797, '\r\n\r\n\r\n\r\n\r\n\r\nearly'),
(1798, 'ruins'),
(1799, 'topoxte\r\n\r\n\r\n\r\n\r\n'),
(1800, 'colonial'),
(1801, 'period'),
(1802, 'period\r\n\r\n\r\n\r\n\r\nshortly'),
(1803, 'expeditions'),
(1804, 'initiated'),
(1805, 'subjugate'),
(1806, 'establish'),
(1807, 'presence'),
(1808, 'territories'),
(1809, 'peninsula'),
(1810, 'guatemalan'),
(1811, 'campaign'),
(1812, 'termed'),
(1813, 'quot;the'),
(1814, 'prove'),
(1815, 'lengthy'),
(1816, 'dangerous'),
(1817, 'exercise'),
(1818, 'conquistadores'),
(1819, 'outset'),
(1820, 'substantive'),
(1821, 'control'),
(1822, 'lands'),
(1823, '\r\n\r\n\r\n\r\nunlike'),
(1824, 'campaigns'),
(1825, 'against'),
(1826, 'empires'),
(1827, 'overthrown'),
(1828, 'hasten'),
(1829, 'collective'),
(1830, 'resistance'),
(1831, 'indigenous'),
(1832, 'peoples'),
(1833, 'conquistador'),
(1834, 'subdue'),
(1835, 'polities'),
(1836, 'fierce'),
(1837, 'motivated'),
(1838, 'prospects'),
(1839, 'wealth'),
(1840, 'seizure'),
(1841, 'precious'),
(1842, 'gold'),
(1843, 'silver'),
(1844, 'poor'),
(1845, 'factor'),
(1846, 'forestalling'),
(1847, 'designs'),
(1848, 'initially'),
(1849, 'attracted'),
(1850, 'reports'),
(1851, 'riches'),
(1852, 'mexico'),
(1853, 'peru'),
(1854, 'polity'),
(1855, 'continuously'),
(1856, 'occupied'),
(1857, '17th'),
(1858, 'subdued'),
(1859, '1697'),
(1860, '\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nthe'),
(1861, 'extend'),
(1862, 'empire\r\n\r\n\r\n\r\n\r\n\r\n'),
(1863, 'political'),
(1864, 'structures'),
(1865, 'structures\r\n\r\n\r\n\r\n\r\na'),
(1866, 'hierarchical'),
(1867, 'state'),
(1868, 'ajawil'),
(1869, 'ajawlel'),
(1870, 'ajawlil'),
(1871, 'headed'),
(1872, 'hereditary'),
(1873, 'ajaw'),
(1874, 'k’uhul'),
(1875, 'neighborhood'),
(1876, 'towns'),
(1877, 'larger'),
(1878, 'extended'),
(1879, 'patronage'),
(1880, '\r\n\r\n\r\n\r\neach'),
(1881, 'kingdom'),
(1882, 'correspond'),
(1883, 'locality'),
(1884, 'dynasty'),
(1885, 'naranjo'),
(1886, 'saal'),
(1887, 'land'),
(1888, 'ch’e’n'),
(1889, 'wakab’nal'),
(1890, 'maxam'),
(1891, 'geographical'),
(1892, 'entity'),
(1893, 'tsuk'),
(1894, 'interestingly'),
(1895, 'constant'),
(1896, 'warfare'),
(1897, 'eventual'),
(1898, 'shifts'),
(1899, 'regional'),
(1900, 'never'),
(1901, 'disappeared'),
(1902, 'landscape'),
(1903, 'respect'),
(1904, 'similar'),
(1905, 'encountered'),
(1906, 'spaniards'),
(1907, 'mexico:'),
(1908, 'subordinated'),
(1909, 'hegemonic'),
(1910, 'conquests'),
(1911, 'dynastic'),
(1912, 'unions'),
(1913, 'distinct'),
(1914, '\r\n\r\n\r\n\r\nmayanists'),
(1915, 'increasingly'),
(1916, 'accepting'),
(1917, 'quot;court'),
(1918, 'paradigm'),
(1919, 'puts'),
(1920, 'emphasis'),
(1921, 'centrality'),
(1922, 'household'),
(1923, 'king'),
(1924, 'approach'),
(1925, 'focuses'),
(1926, 'monumental'),
(1927, 'spaces'),
(1928, 'embodiment'),
(1929, 'diverse'),
(1930, 'activities'),
(1931, 'considers'),
(1932, 'dwellings'),
(1933, 'royalty'),
(1934, 'throne'),
(1935, 'rooms'),
(1936, 'halls'),
(1937, 'establishing'),
(1938, 'social'),
(1939, 'projecting'),
(1940, 'aesthetic'),
(1941, 'moral'),
(1942, 'values'),
(1943, 'wider'),
(1944, '\r\n\r\n\r\n\r\nspanish'),
(1945, 'sources'),
(1946, 'invariably'),
(1947, 'describe'),
(1948, 'largest'),
(1949, 'settlements'),
(1950, 'dispersed'),
(1951, 'collections'),
(1952, 'grouped'),
(1953, 'none'),
(1954, 'economic'),
(1955, 'specialization'),
(1956, 'commerce'),
(1957, 'mexican'),
(1958, 'tenochtitlan'),
(1959, 'households'),
(1960, 'locales'),
(1961, 'administrative'),
(1962, 'privileged'),
(1963, 'holy'),
(1964, 'high'),
(1965, 'culture'),
(1966, 'formulated'),
(1967, 'disseminated'),
(1968, 'items'),
(1969, 'consumed'),
(1970, 'self-proclaimed'),
(1971, 'cosmic'),
(1972, 'fall'),
(1973, 'well-documented'),
(1974, 'piedras'),
(1975, 'negras'),
(1976, 'copan'),
(1977, 'cause'),
(1978, 'inevitable'),
(1979, 'quot;death'),
(1980, 'settlement'),
(1981, '\r\n\r\n\r\n\r\n\r\n'),
(1982, '\r\nart\r\n\r\na'),
(1983, '\r\n\r\neach'),
(1984, '\r\n\r\nmayanists'),
(1985, '\r\n\r\nspanish'),
(1986, '\r\n\r\n\r\n\r\n\r\n\r\n\r\na'),
(1987, 'relief'),
(1988, 'palenque'),
(1989, 'depicting'),
(1990, 'upakal'),
(1991, '39;inich\r\n\r\n\r\n\r\n\r\n'),
(1992, 'classic'),
(1993, 'history\r\n\r\nthe'),
(1994, '250–900'),
(1995, 'witnessed'),
(1996, 'urbanism'),
(1997, 'recording'),
(1998, 'intellectual'),
(1999, 'artistic'),
(2000, 'particularly'),
(2001, 'lowland'),
(2002, 'regions'),
(2003, 'agriculturally'),
(2004, 'intensive'),
(2005, 'city-centered'),
(2006, 'empire'),
(2007, 'well-known'),
(2008, 'copán'),
(2009, 'calakmul'),
(2010, 'pilas'),
(2011, 'altun'),
(2012, 'bonampak'),
(2013, 'distribution'),
(2014, 'clearly'),
(2015, 'zone'),
(2016, 'oxkintok'),
(2017, 'chunchucmil'),
(2018, 'occupation'),
(2019, 'accompanying'),
(2020, 'cancuen'),
(2021, 'lacks'),
(2022, 'slabs'),
(2023, 'tetun'),
(2024, 'quot;tree-stones'),
(2025, 'depict'),
(2026, 'along'),
(2027, 'hieroglyphic'),
(2028, 'describing'),
(2029, 'genealogy'),
(2030, 'military'),
(2031, 'victories'),
(2032, 'accomplishments'),
(2033, 'participated'),
(2034, 'distance'),
(2035, 'trade'),
(2036, 'cultures'),
(2037, 'gulf-coast'),
(2038, 'distant'),
(2039, 'non-mesoamerican'),
(2040, 'archaeologists'),
(2041, 'panama'),
(2042, 'cenote'),
(2043, 'goods'),
(2044, 'cacao'),
(2045, 'salt'),
(2046, 'shells'),
(2047, 'jade'),
(2048, 'obsidian'),
(2049, '\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nthe'),
(2050, 'palenqua'),
(2051, 'ruins\r\n\r\n\r\n\r\n\r\n'),
(2052, 'geographical'),
(2053, 'position'),
(2054, 'position\r\n\r\nthe'),
(2055, 'american'),
(2056, 'present-day'),
(2057, 'nations'),
(2058, 'belize'),
(2059, 'salvador'),
(2060, 'honduras'),
(2061, 'tabasco'),
(2062, 'quintana'),
(2063, 'campeche'),
(2064, '\r\n\r\nas'),
(2065, 'sub-region'),
(2066, 'encompassed'),
(2067, 'mountainous'),
(2068, 'sierra'),
(2069, 'madre'),
(2070, 'semi-arid'),
(2071, 'climate'),
(2072, 'vary'),
(2073, 'tremendously'),
(2074, 'low-lying'),
(2075, 'areas'),
(2076, 'susceptible'),
(2077, 'hurricanes'),
(2078, 'tropical'),
(2079, 'storms'),
(2080, 'frequent'),
(2081, 'caribbean'),
(2082, 'loosely'),
(2083, 'zones:'),
(2084, 'elevated'),
(2085, 'terrain'),
(2086, 'incorporate'),
(2087, 'portions'),
(2088, 'cover'),
(2089, 'puuc'),
(2090, '\r\n\r\n\r\n\r\n\r\n\r\ngeographical'),
(2091, '39;s\r\n\r\n\r\n\r\n\r\n'),
(2092, 'history'),
(2093, 'preclassic'),
(2094, 'history\r\n\r\nwhile'),
(2095, 'inhabited'),
(2096, 'millennium'),
(2097, '“maya”'),
(2098, '1800'),
(2099, 'soconusco'),
(2100, 'pacific'),
(2101, 'coast'),
(2102, 'sedentary'),
(2103, 'communities'),
(2104, 'figurines'),
(2105, '\r\n\r\narchaeological'),
(2106, 'suggests'),
(2107, '1000'),
(2108, 'burial'),
(2109, 'mounds'),
(2110, 'precursors'),
(2111, 'erected'),
(2112, 'zones'),
(2113, 'located'),
(2114, 'specifically'),
(2115, 'basins'),
(2116, 'nakbe'),
(2117, 'cival'),
(2118, 'bartolo'),
(2119, 'mid-sized'),
(2120, 'komchen'),
(2121, 'dzibilchaltun'),
(2122, '\r\n\r\nthere'),
(2123, 'disagreement'),
(2124, 'boundaries'),
(2125, 'differentiate'),
(2126, 'physical'),
(2127, 'cultural'),
(2128, 'neighboring'),
(2129, 'mixe-zoque–'),
(2130, 'zapotec–speaking'),
(2131, 'oaxaca'),
(2132, 'respectively'),
(2133, 'appeared'),
(2134, 'overlapping'),
(2135, 'formative'),
(2136, 'influenced'),
(2137, 'another\r\n'),
(2138, 'maya'),
(2139, 'civilization'),
(2140, 'civilization\r\n\r\nthe'),
(2141, 'noted'),
(2142, 'sophisticated'),
(2143, 'apogee'),
(2144, 'densely'),
(2145, 'populated'),
(2146, 'culturally'),
(2147, 'shares'),
(2148, 'interaction'),
(2149, 'diffusion'),
(2150, 'advances'),
(2151, 'epigraphy'),
(2152, 'originate'),
(2153, 'maya;'),
(2154, 'miles'),
(2155, 'exchange'),
(2156, 'neither'),
(2157, 'subsequent'),
(2158, 'colonization'),
(2159, 'today'),
(2160, 'descendants'),
(2161, 'sizable'),
(2162, 'populations'),
(2163, 'maintain'),
(2164, 'distinctive'),
(2165, 'traditions'),
(2166, 'beliefs'),
(2167, 'merger'),
(2168, 'post-conquest'),
(2169, 'ideologies'),
(2170, 'structured'),
(2171, 'adoption'),
(2172, 'catholicism'),
(2173, 'languages'),
(2174, 'continue'),
(2175, 'today;'),
(2176, 'rabinal'),
(2177, 'achí'),
(2178, '39;eqchi'),
(2179, 'declared'),
(2180, 'masterpiece'),
(2181, 'oral'),
(2182, 'intangible'),
(2183, 'heritage'),
(2184, 'humanity'),
(2185, 'unesco'),
(2186, '2005'),
(2187, '\r\n\r\n\r\n\r\n\r\n\r\n\r\nbonampak'),
(2188, 'painting'),
(2189, 'mayas\r\n\r\n\r\n\r\n\r\n'),
(2190, 'maya'),
(2191, 'history'),
(2192, 'test'),
(2193, 'programmer'),
(2194, 'imported_lesson'),
(2195, 'imported_lesson'),
(2196, 'learn'),
(2197, 'debug'),
(2198, '\r\n	\r\n		\r\n			\r\n			learn'),
(2199, 'debug\r\n			debugging'),
(2200, 'cornerstone'),
(2201, 'verb'),
(2202, 'to\r\n			remove'),
(2203, 'errors'),
(2204, 'really'),
(2205, 'examining\r\n			it'),
(2206, 'cannot'),
(2207, 'effectively'),
(2208, 'blind'),
(2209, '\r\n			\r\n			idealists'),
(2210, 'think'),
(2211, 'complexity'),
(2212, 'whatnot'),
(2213, 'fundamental'),
(2214, 'are\r\n			not'),
(2215, 'programmers'),
(2216, 'live'),
(2217, 'you\r\n			are'),
(2218, 'perfect'),
(2219, 'your'),
(2220, 'interact'),
(2221, 'code'),
(2222, 'software'),
(2223, 'companies'),
(2224, '\r\n			organizations'),
(2225, 'colleagues'),
(2226, 'imperfect'),
(2227, 'imperfectly\r\n			documented'),
(2228, 'ability'),
(2229, 'gain'),
(2230, 'visibility'),
(2231, 'slightest\r\n			bump'),
(2232, 'throw'),
(2233, 'permanently'),
(2234, 'experimentation'),
(2235, '\r\n			that'),
(2236, 'debugging'),
(2237, '\r\n			\r\n			debugging'),
(2238, 'running'),
(2239, 'programs'),
(2240, 'something'),
(2241, 'from\r\n			a'),
(2242, 'company'),
(2243, 'arise\r\n			places'),
(2244, 'conform'),
(2245, 'documentation'),
(2246, 'crashing'),
(2247, 'entire'),
(2248, 'machine'),
(2249, 'a\r\n			common'),
(2250, 'mute'),
(2251, 'you\r\n			create'),
(2252, 'wrote'),
(2253, 'occurring'),
(2254, 'inevitably'),
(2255, 'assumption'),
(2256, 'making'),
(2257, 'arises\r\n			that'),
(2258, 'anticipate'),
(2259, 'magic'),
(2260, 'trick'),
(2261, 'staring'),
(2262, 'works'),
(2263, 'when\r\n			it'),
(2264, 'execute'),
(2265, 'observe\r\n			something'),
(2266, 'visible'),
(2267, 'screen'),
(2268, 'delay\r\n			between'),
(2269, 'involves'),
(2270, 'things'),
(2271, 'like\r\n			the'),
(2272, 'executed'),
(2273, 'or\r\n			whether'),
(2274, 'assertions'),
(2275, 'hold'),
(2276, 'hidden'),
(2277, 'be\r\n			revealed'),
(2278, 'looking'),
(2279, '‘innards’'),
(2280, 'executing'),
(2281, 'categorized'),
(2282, 'as:\r\n			\r\n			•'),
(2283, 'tool'),
(2284, '\r\n			•'),
(2285, 'printlining'),
(2286, 'modification'),
(2287, 'adding'),
(2288, 'that\r\n			print'),
(2289, 'and\r\n			•'),
(2290, 'logging'),
(2291, 'creating'),
(2292, 'wonderful'),
(2293, 'stable'),
(2294, 'logging\r\n			are'),
(2295, 'behind'),
(2296, 'point\r\n			in'),
(2297, 'subtly'),
(2298, 'the\r\n			way'),
(2299, 'executes'),
(2300, 'practical'),
(2301, 'kinds'),
(2302, '\r\n			such'),
(2303, 'assertion'),
(2304, 'and\r\n			changing'),
(2305, 'know'),
(2306, 'they\r\n			are'),
(2307, 'critical'),
(2308, 'employ'),
(2309, '\r\n			\r\n			\r\n			some'),
(2310, 'beginners'),
(2311, 'fear'),
(2312, 'modifying'),
(2313, 'understandable---it'),
(2314, 'a\r\n			little'),
(2315, 'exploratory'),
(2316, 'surgery'),
(2317, 'poke'),
(2318, 'jump;'),
(2319, 'you\r\n			have'),
(2320, 'experiment'),
(2321, 'understand'),
(2322, 'temporarily'),
(2323, 'will\r\n			make'),
(2324, 'worse'),
(2325, 'feel'),
(2326, 'mentor---we'),
(2327, 'lose'),
(2328, 'the\r\n			delicate'),
(2329, 'debug'),
(2330, 'splitting'),
(2331, 'problem'),
(2332, 'space'),
(2333, '\r\n	\r\n		\r\n			\r\n			how'),
(2334, 'space\r\n			debugging'),
(2335, 'begins'),
(2336, 'mystery'),
(2337, 'instead\r\n			it'),
(2338, 'simple---any'),
(2339, 'contrived\r\n			compared'),
(2340, 'practice'),
(2341, 'creativity'),
(2342, 'ingenuity'),
(2343, 'if\r\n			there'),
(2344, 'technique'),
(2345, 'sequence'),
(2346, 'you\r\n			run'),
(2347, 'crashes'),
(2348, 'didn'),
(2349, 'crash'),
(2350, 'at\r\n			the'),
(2351, 'output'),
(2352, 'seven'),
(2353, 'successfully'),
(2354, 'three\r\n			are'),
(2355, 'smaller:'),
(2356, 'crashed'),
(2357, 'thing'),
(2358, 'or\r\n			'),
(2359, '’\r\n			\r\n			can'),
(2360, 'sure'),
(2361, 'debugger'),
(2362, 'or\r\n			we'),
(2363, 'printline'),
(2364, 'statements'),
(2365, 'whatever'),
(2366, 'after\r\n			'),
(2367, 'i\r\n			find'),
(2368, 'bearing'),
(2369, 'helps'),
(2370, 'focused'),
(2371, '\r\n			when'),
(2372, 'together'),
(2373, 'pressure'),
(2374, 'forget'),
(2375, 'what\r\n			the'),
(2376, 'design:\r\n			as'),
(2377, 'split'),
(2378, 'too\r\n			many'),
(2379, 'quickly'),
(2380, 'mystery?'),
(2381, 'is\r\n			where'),
(2382, 'true'),
(2383, 'experience'),
(2384, 'beginner'),
(2385, 'looks'),
(2386, 'you\r\n			don'),
(2387, 'vision'),
(2388, 'dimensions'),
(2389, 'the\r\n			space'),
(2390, 'memory'),
(2391, 'management'),
(2392, 'foreign\r\n			code'),
(2393, 'risky'),
(2394, 'these\r\n			other'),
(2395, 'mental'),
(2396, 'go\r\n			wrong'),
(2397, '\r\n			\r\n			once'),
(2398, 'evenly'),
(2399, 'subdivided'),
(2400, 'decide'),
(2401, 'in\r\n			which'),
(2402, '‘which'),
(2403, 'unknown'),
(2404, 'line\r\n			makes'),
(2405, 'crash?’'),
(2406, 'yourself:'),
(2407, 'after\r\n			this'),
(2408, 'judge'),
(2409, 'program?’'),
(2410, 'you\r\n			will'),
(2411, 'lucky'),
(2412, 'exists'),
(2413, 'often\r\n			the'),
(2414, 'like:'),
(2415, '‘either'),
(2416, '\r\n			or'),
(2417, 'have\r\n			to'),
(2418, 'decide\r\n			which'),
(2419, 'eliminated'),
(2420, 'remove'),
(2421, 'error'),
(2422, 'error\r\n			i'),
(2423, '39;ve'),
(2424, 'intentionally'),
(2425, 'separated'),
(2426, 'examining'),
(2427, 'fixing'),
(2428, 'an\r\n			error'),
(2429, 'mean'),
(2430, 'ideally'),
(2431, 'perfect\r\n			understanding'),
(2432, '‘a-ha!’'),
(2433, 'moment'),
(2434, 'and\r\n			how'),
(2435, 'insufficiently'),
(2436, 'which\r\n			you'),
(2437, 'that\r\n			your'),
(2438, 'fixes'),
(2439, 'things\r\n			that'),
(2440, 'improvement;'),
(2441, 'scientific\r\n			method'),
(2442, 'changing'),
(2443, 'able\r\n			to'),
(2444, 'reproduce'),
(2445, 'rerun'),
(2446, 'observe\r\n			that'),
(2447, 'longer'),
(2448, 'changed'),
(2449, 'you\r\n			should'),
(2450, 'conceptually'),
(2451, 'atomic'),
(2452, '\r\n			\r\n			sometimes'),
(2453, 'bugs'),
(2454, 'and\r\n			fix'),
(2455, 'original\r\n			author'),
(2456, 'intended'),
(2457, 'judgment'),
(2458, 'your\r\n			own'),
(2459, 'comment'),
(2460, 'clarify'),
(2461, 'and\r\n			then'),
(2462, 'intermediate'),
(2463, 'is\r\n			sometimes'),
(2464, 'harder'),
(2465, 'often\r\n			messy'),
(2466, 'rewrite'),
(2467, 'debug'),
(2468, 'using'),
(2469, 'log\r\n			logging'),
(2470, 'informative'),
(2471, 'records'),
(2472, '\r\n			called'),
(2473, 'producing'),
(2474, 'absolute'),
(2475, 'beginners\r\n			must'),
(2476, 'logs'),
(2477, 'limited;'),
(2478, 'architects\r\n			must'),
(2479, 'amount'),
(2480, 'information\r\n			that'),
(2481, 'provided'),
(2482, 'configurable'),
(2483, 'basic'),
(2484, 'advantages:\r\n			\r\n			•'),
(2485, 'hard'),
(2486, 'that\r\n			occur'),
(2487, 'production'),
(2488, 'environment'),
(2489, 'reproduced'),
(2490, 'statistics'),
(2491, 'relevant'),
(2492, 'performance'),
(2493, 'between\r\n			statements'),
(2494, 'allow'),
(2495, 'captured'),
(2496, 'unanticipated\r\n			specific'),
(2497, 'modify'),
(2498, 'redeploy'),
(2499, 'deal'),
(2500, 'with\r\n			those'),
(2501, 'compromise'),
(2502, 'brevity'),
(2503, 'too\r\n			much'),
(2504, 'makes'),
(2505, 'expensive'),
(2506, 'scroll'),
(2507, 'blindness'),
(2508, 'find\r\n			the'),
(2509, 'this\r\n			reason'),
(2510, 'will\r\n			identify'),
(2511, 'thread'),
(2512, 'applicable'),
(2513, 'precise'),
(2514, 'of\r\n			execution'),
(2515, 'additional'),
(2516, 'piece'),
(2517, 'some\r\n			variable'),
(2518, 'free'),
(2519, 'are\r\n			sprinkled'),
(2520, 'around\r\n			risky'),
(2521, 'statement'),
(2522, 'assigned'),
(2523, 'level'),
(2524, 'is\r\n			currently'),
(2525, 'address'),
(2526, 'problems\r\n			that'),
(2527, 'terms'),
(2528, 'of\r\n			the'),
(2529, 'understand'),
(2530, 'performance'),
(2531, 'problems'),
(2532, 'problems\r\n			learning'),
(2533, 'unavoidable'),
(2534, 'reason\r\n			that'),
(2535, 'precisely'),
(2536, 'you\r\n			write'),
(2537, 'calls'),
(2538, 'or\r\n			visibility'),
(2539, 'easier\r\n			than'),
(2540, 'customers'),
(2541, 'subsystem'),
(2542, 'slow'),
(2543, 'you\r\n			try'),
(2544, 'faster'),
(2545, 'build'),
(2546, 'a\r\n			profiling'),
(2547, 'spent'),
(2548, '\r\n			there'),
(2549, 'famous'),
(2550, 'dictum'),
(2551, 'to\r\n			that'),
(2552, 'input/output'),
(2553, 'expense'),
(2554, 'issues'),
(2555, 'is\r\n			spent'),
(2556, 'code\r\n			is'),
(2557, 'building'),
(2558, '\r\n			\r\n			there'),
(2559, 'computer'),
(2560, '\r\n			the'),
(2561, 'resource'),
(2562, 'wall--clock'),
(2563, 'computation'),
(2564, '\r\n			logging'),
(2565, 'wall-clock'),
(2566, 'valuable'),
(2567, 'inform'),
(2568, 'unpredictable\r\n			circumstance'),
(2569, 'arise'),
(2570, 'situations'),
(2571, 'profiling'),
(2572, 'impractical'),
(2573, 'not\r\n			always'),
(2574, 'takes'),
(2575, 'burn\r\n			up'),
(2576, 'processor'),
(2577, 'seconds'),
(2578, 'computing'),
(2579, 'to\r\n			deal'),
(2580, 'similarly'),
(2581, 'bandwidth'),
(2582, 'database'),
(2583, 'server'),
(2584, 'accesses'),
(2585, 'the\r\n			end'),
(2586, '\r\n			\r\n			contention'),
(2587, 'shared'),
(2588, 'synchronized'),
(2589, 'deadlock'),
(2590, 'starvation'),
(2591, 'deadlock\r\n			is'),
(2592, 'inability'),
(2593, 'proceed'),
(2594, 'improper'),
(2595, 'synchronization'),
(2596, 'starvation\r\n			is'),
(2597, 'failure'),
(2598, 'schedule'),
(2599, 'component'),
(2600, 'anticipated'),
(2601, 'have\r\n			a'),
(2602, 'measuring'),
(2603, 'contention'),
(2604, 'start'),
(2605, 'not\r\n			occur'),
(2606, 'helpful'),
(2607, 'assert'),
(2608, 'confidence'),
(2609, 'performance'),
(2610, 'problems'),
(2611, 'problems\r\n			most'),
(2612, 'are\r\n			first'),
(2613, 'released'),
(2614, 'relatively'),
(2615, 'time-to-market'),
(2616, 'wise'),
(2617, 'effective\r\n			to'),
(2618, 'gets'),
(2619, 'efficiently'),
(2620, 'some\r\n			other'),
(2621, 'usability'),
(2622, 'eventually'),
(2623, 'considered\r\n			more'),
(2624, 'carefully'),
(2625, 'improving'),
(2626, 'analyze'),
(2627, 'enough\r\n			to'),
(2628, 'bottlenecks'),
(2629, 'much\r\n			sense'),
(2630, 'optimizing'),
(2631, 'accounts'),
(2632, 'of\r\n			thumb'),
(2633, 'doing'),
(2634, 'anything'),
(2635, 'unless'),
(2636, 'going'),
(2637, 'the\r\n			system'),
(2638, 'consider\r\n			the'),
(2639, 'quality'),
(2640, 'assurance'),
(2641, 'brings'),
(2642, 'burden\r\n			with'),
(2643, 'changes'),
(2644, '\r\n			\r\n			after'),
(2645, 'two-fold'),
(2646, 'improvement'),
(2647, 'rethink'),
(2648, 'perhaps\r\n			reanalyze'),
(2649, 'discover'),
(2650, 'next-most-expensive'),
(2651, 'bottleneck'),
(2652, 'attack'),
(2653, 'another\r\n			two-fold'),
(2654, '\r\n			\r\n			often'),
(2655, 'counting'),
(2656, 'cows'),
(2657, 'and\r\n			dividing'),
(2658, 'failing'),
(2659, 'provide\r\n			a'),
(2660, 'relational'),
(2661, 'index'),
(2662, 'probably\r\n			made'),
(2663, 'slower'),
(2664, 'unnecessary'),
(2665, 'inner'),
(2666, 'loops');
INSERT INTO `search_invertedindex` (`id`, `keyword`) VALUES
(2667, '\r\n			leaving'),
(2668, 'allocation'),
(2669, '\r\n			in'),
(2670, 'inexpert'),
(2671, 'libraries'),
(2672, 'subsystems'),
(2673, 'poorly'),
(2674, 'with\r\n			respect'),
(2675, 'kind'),
(2676, 'low-hanging'),
(2677, 'fruit'),
(2678, 'meaning\r\n			that'),
(2679, 'picked'),
(2680, 'benefit'),
(2681, '\r\n			\r\n			what'),
(2682, 'fruit?'),
(2683, 'higher'),
(2684, 'or\r\n			chop'),
(2685, 'down'),
(2686, 'seriously'),
(2687, 'redesign'),
(2688, 'a\r\n			system'),
(2689, 'opportunity'),
(2690, 'skills'),
(2691, 'not\r\n			only'),
(2692, 'convincing'),
(2693, 'boss'),
(2694, 'before\r\n			you'),
(2695, 'argue'),
(2696, 'yourself'),
(2697, 'proposal\r\n			will'),
(2698, 'five'),
(2699, 'optimize'),
(2700, 'loops'),
(2701, 'loops\r\n			sometimes'),
(2702, '39;ll'),
(2703, 'encounter'),
(2704, 'recursive'),
(2705, 'are\r\n			bottlenecks'),
(2706, 'product'),
(2707, 'loop'),
(2708, 'spend'),
(2709, 'minutes\r\n			considering'),
(2710, 'you\r\n			compute'),
(2711, 'else?'),
(2712, 'away'),
(2713, 'optimize\r\n			the'),
(2714, 'simple;'),
(2715, 'stuff'),
(2716, 'but\r\n			also'),
(2717, 'expression'),
(2718, 'suggestions:\r\n			\r\n			•'),
(2719, 'floating'),
(2720, 'allocate'),
(2721, 'blocks'),
(2722, 'unnecessarily'),
(2723, 'fold'),
(2724, 'constants'),
(2725, 'buffer'),
(2726, 'typecasts'),
(2727, 'recomputing'),
(2728, 'indices'),
(2729, 'compilers\r\n			and'),
(2730, 'hardware'),
(2731, 'clear'),
(2732, 'efficient'),
(2733, 'understanding\r\n			of'),
(2734, 'deal'),
(2735, 'with'),
(2736, 'expense'),
(2737, 'expense\r\n			for'),
(2738, 'processors'),
(2739, 'compared'),
(2740, 'communicating'),
(2741, 'hardware\r\n			device'),
(2742, 'abbreviated'),
(2743, 'disk'),
(2744, 'database\r\n			queries'),
(2745, 'file'),
(2746, 'building\r\n			a'),
(2747, 'tight\r\n			loop'),
(2748, 'i/o:'),
(2749, 'caching'),
(2750, 'representation'),
(2751, 'caching\r\n			is'),
(2752, 'avoiding'),
(2753, 'reading'),
(2754, 'abstract'),
(2755, 'copy'),
(2756, 'that\r\n			value'),
(2757, 'locally'),
(2758, 'crystal\r\n			clear'),
(2759, 'master'),
(2760, 'copies'),
(2761, 'master---period'),
(2762, 'caching\r\n			brings'),
(2763, 'danger'),
(2764, 'reflect'),
(2765, 'instantaneously'),
(2766, '\r\n			representation'),
(2767, 'this\r\n			is'),
(2768, 'tension'),
(2769, 'readability'),
(2770, 'portability'),
(2771, '\r\n			\r\n			representations'),
(2772, 'improved'),
(2773, 'implementation'),
(2774, '\r\n			techniques'),
(2775, 'binary'),
(2776, 'readable'),
(2777, '\r\n			transmitting'),
(2778, 'dictionary'),
(2779, 'to\r\n			be'),
(2780, 'encoded'),
(2781, 'extreme'),
(2782, 'huffman'),
(2783, 'encoding'),
(2784, 'third'),
(2785, 'improve'),
(2786, 'pushing'),
(2787, 'the\r\n			computation'),
(2788, 'closer'),
(2789, 'and\r\n			computing'),
(2790, 'summation'),
(2791, 'it\r\n			for'),
(2792, 'dependent'),
(2793, '39;re'),
(2794, 'explore\r\n			it'),
(2795, 'manage'),
(2796, 'memory'),
(2797, 'memory\r\n			memory'),
(2798, 'afford'),
(2799, 'ignore'),
(2800, 'but\r\n			eventually'),
(2801, '\r\n			\r\n			space'),
(2802, 'needs'),
(2803, 'persist'),
(2804, 'scope'),
(2805, 'subroutine'),
(2806, 'heap'),
(2807, 'allocated'),
(2808, '\r\n			a'),
(2809, 'chunk'),
(2810, 'useless'),
(2811, 'hence'),
(2812, 'garbage'),
(2813, 'refers'),
(2814, 'system\r\n			you'),
(2815, 'explicitly'),
(2816, 'deallocate'),
(2817, 'become\r\n			garbage'),
(2818, 'provides'),
(2819, 'collector'),
(2820, 'garbage\r\n			collector'),
(2821, 'notices'),
(2822, 'frees'),
(2823, 'action'),
(2824, '\r\n			garbage'),
(2825, 'collection'),
(2826, 'wonderful:'),
(2827, 'lessens'),
(2828, 'increases'),
(2829, 'concision\r\n			cheaply'),
(2830, '\r\n			\r\n			but'),
(2831, 'fill'),
(2832, 'mistake'),
(2833, 'to\r\n			use'),
(2834, 'hash'),
(2835, 'table'),
(2836, 'cache'),
(2837, 'references'),
(2838, 'reference\r\n			remains'),
(2839, 'referent'),
(2840, 'noncollectable'),
(2841, 'leak'),
(2842, 'should\r\n			look'),
(2843, 'leaks'),
(2844, 'exhausted\r\n			in'),
(2845, 'testing'),
(2846, 'exhausted'),
(2847, 'user'),
(2848, 'creation'),
(2849, 'moderately'),
(2850, 'in\r\n			the'),
(2851, 'cheap'),
(2852, 'freeing'),
(2853, 'can\r\n			be'),
(2854, 'avoid'),
(2855, 'occurs'),
(2856, 'upper'),
(2857, 'will\r\n			need'),
(2858, 'allocate\r\n			a'),
(2859, 'allocated\r\n			and'),
(2860, 'rotation'),
(2861, 'pattern'),
(2862, 'ring'),
(2863, 'reallocated'),
(2864, 'rely'),
(2865, 'on\r\n			garbage'),
(2866, 'intelligence'),
(2867, 'memory\r\n			and'),
(2868, 'deallocated'),
(2869, 'differ'),
(2870, 'each\r\n			kind'),
(2871, 'allocating'),
(2872, 'operation\r\n			is'),
(2873, 'matched'),
(2874, 'deallocating'),
(2875, 'operation'),
(2876, 'programmers\r\n			often'),
(2877, 'implement'),
(2878, 'rudimentary'),
(2879, '\r\n			to'),
(2880, 'deal'),
(2881, 'with'),
(2882, 'intermittent'),
(2883, 'bugs'),
(2884, 'bugs\r\n			the'),
(2885, 'cousin'),
(2886, '50-foot-invisible-scorpion-from-outer-space'),
(2887, 'nightmare'),
(2888, 'observe'),
(2889, 'ignored'),
(2890, '\r\n			you'),
(2891, '\r\n			\r\n			although'),
(2892, 'eight'),
(2893, 'hours'),
(2894, 'doubt'),
(2895, 'obey'),
(2896, 'laws\r\n			of'),
(2897, 'logic'),
(2898, 'everything'),
(2899, 'conditions'),
(2900, '\r\n			try'),
(2901, 'circumstances'),
(2902, 'guess'),
(2903, 'the\r\n			variability'),
(2904, 'related'),
(2905, '‘this'),
(2906, 'when\r\n			we'),
(2907, 'enter'),
(2908, 'wyoming'),
(2909, 'variability'),
(2910, 'suspect'),
(2911, 'be\r\n			improperly'),
(2912, 'concurrency'),
(2913, '\r\n			\r\n			try'),
(2914, 'trap'),
(2915, 'by\r\n			building'),
(2916, 'need\r\n			when'),
(2917, 'resign'),
(2918, 'at\r\n			your'),
(2919, 'whim'),
(2920, 'hints'),
(2921, 'the\r\n			solution'),
(2922, 'system\r\n			may'),
(2923, 'wait'),
(2924, 'reoccur\r\n			to'),
(2925, 'stupidest'),
(2926, 'multi-threaded'),
(2927, 'functional\r\n			programming'),
(2928, 'class'),
(2929, 'insured'),
(2930, 'concurrent\r\n			evaluation'),
(2931, 'functional'),
(2932, 'utilization'),
(2933, 'cpus'),
(2934, 'this\r\n			case'),
(2935, 'forgot'),
(2936, 'synchronize'),
(2937, 'often\r\n			finishing'),
(2938, 'task'),
(2939, 'noticeable'),
(2940, '39;m'),
(2941, 'ashamed'),
(2942, 'admit\r\n			i'),
(2943, 'begun'),
(2944, 'dawned'),
(2945, '\r\n			\r\n			at'),
(2946, 'recently'),
(2947, 'took'),
(2948, 'weeks'),
(2949, 'multithreaded\r\n			application'),
(2950, 'servers'),
(2951, 'java™'),
(2952, 'apache™'),
(2953, 'page'),
(2954, 'turns'),
(2955, '\r\n			we'),
(2956, 'threads'),
(2957, 'page-turning'),
(2958, '\r\n			every'),
(2959, '‘stuck’'),
(2960, 'cease'),
(2961, 'far\r\n			as'),
(2962, 'allowed'),
(2963, 'tell'),
(2964, 'giant\r\n			problem---unless'),
(2965, 'stuck'),
(2966, 'queues'),
(2967, 'emptied'),
(2968, 'fill\r\n			up'),
(2969, 'week'),
(2970, 'and\r\n			we'),
(2971, 'happen'),
(2972, 'doing\r\n			when'),
(2973, 'illustrates'),
(2974, 'risk'),
(2975, 'third-party'),
(2976, 'licensed'),
(2977, 'of\r\n			code'),
(2978, 'html'),
(2979, 'tags'),
(2980, 'text'),
(2981, 'origin'),
(2982, 'affectionately'),
(2983, 'to\r\n			this'),
(2984, '‘the'),
(2985, 'french'),
(2986, 'stripper'),
(2987, 'thank'),
(2988, 'goodness!'),
(2989, 'studied\r\n			it'),
(2990, 'turning'),
(2991, 'realized'),
(2992, 'email\r\n			threads'),
(2993, 'except'),
(2994, 'unusual'),
(2995, 'the\r\n			code'),
(2996, 'quadratic'),
(2997, 'processing'),
(2998, 'proportional'),
(2999, 'square\r\n			of'),
(3000, 'occurred'),
(3001, 'right\r\n			away'),
(3002, 'took\r\n			us'),
(3003, 'resolve'),
(3004, 'learn'),
(3005, 'design'),
(3006, 'skills'),
(3007, 'skills\r\n			to'),
(3008, 'study'),
(3009, 'mentor'),
(3010, 'physically'),
(3011, 'when\r\n			they'),
(3012, 'designing'),
(3013, 'well-written'),
(3014, 'pieces'),
(3015, 'some\r\n			books'),
(3016, 'latest'),
(3017, '\r\n			\r\n			then'),
(3018, 'how\r\n			the'),
(3019, 'failed'),
(3020, 'succeeded'),
(3021, 'diverged'),
(3022, 'conception'),
(3023, 'move\r\n			on'),
(3024, 'hopefully'),
(3025, 'judgment\r\n			that'),
(3026, 'acquire'),
(3027, 'smart'),
(3028, 'basics'),
(3029, 'adequately'),
(3030, 'and\r\n			can'),
(3031, '\r\n			\r\n			it'),
(3032, 'style'),
(3033, 'remember'),
(3034, 'science'),
(3035, '\r\n			people'),
(3036, 'subject'),
(3037, 'vested'),
(3038, 'scientific'),
(3039, '\r\n			don'),
(3040, 'dogmatic'),
(3041, 'styles'),
(3042, 'conduct'),
(3043, 'experiments'),
(3044, 'experiments\r\n			the'),
(3045, 'edsger'),
(3046, 'eloquently'),
(3047, 'explained'),
(3048, 'experimental\r\n			science'),
(3049, 'expcs'),
(3050, 'depend'),
(3051, 'electronic'),
(3052, 'referring'),
(3053, 'the\r\n			1960s'),
(3054, 'knife'),
(3055, 'harm'),
(3056, 'done:'),
(3057, 'topic'),
(3058, 'became'),
(3059, '‘computer'),
(3060, 'science’---which'),
(3061, '\r\n			actually'),
(3062, '‘knife'),
(3063, 'science’'),
(3064, 'firmly'),
(3065, 'implanted\r\n			in'),
(3066, 'minds'),
(3067, 'machines'),
(3068, 'peripheral\r\n			equipment'),
(3069, '\r\n			\r\n			programming'),
(3070, 'ought'),
(3071, 'experimental'),
(3072, 'not\r\n			have'),
(3073, 'luxury'),
(3074, 'engaging'),
(3075, 'the\r\n			realm'),
(3076, 'physicists'),
(3077, 'thirty'),
(3078, 'programming\r\n			can'),
(3079, 'accomplishment'),
(3080, 'computer\r\n			science'),
(3081, 'perform'),
(3082, 'include:\r\n			\r\n			•'),
(3083, 'verify'),
(3084, 'to\r\n			understand'),
(3085, 'response'),
(3086, 'imperfect\r\n			knowledge'),
(3087, 'integrity'),
(3088, 'collecting'),
(3089, 'hint'),
(3090, 'hard-to-repeat'),
(3091, '\r\n			\r\n			i'),
(3092, 'essay'),
(3093, 'explain'),
(3094, 'experiments;'),
(3095, '\r\n			however'),
(3096, 'bits'),
(3097, 'advice'),
(3098, '\r\n			first'),
(3099, 'hypothesis'),
(3100, 'trying'),
(3101, 'also\r\n			helps'),
(3102, 'confused'),
(3103, 'with\r\n			others'),
(3104, '\r\n			\r\n			you'),
(3105, 'series'),
(3106, 'on\r\n			the'),
(3107, 'to\r\n			provide'),
(3108, 'keeping'),
(3109, 'experiment\r\n			simple---you'),
(3110, 'estimation'),
(3111, 'important'),
(3112, '\r\n	\r\n		\r\n			\r\n			why'),
(3113, 'important\r\n			to'),
(3114, 'active'),
(3115, 'planning\r\n			the'),
(3116, 'deployment'),
(3117, 'marketing'),
(3118, 'commercial\r\n			project'),
(3119, 'sales'),
(3120, 'finance'),
(3121, 'predictability'),
(3122, 'impossible\r\n			to'),
(3123, 'plan'),
(3124, '\r\n			\r\n			good'),
(3125, 'managers'),
(3126, 'love'),
(3127, 'is\r\n			impossible'),
(3128, 'theoretically'),
(3129, 'practically'),
(3130, 'predict'),
(3131, 'accurately'),
(3132, 'develop\r\n			software'),
(3133, 'impossible'),
(3134, '\r\n			and'),
(3135, 'face'),
(3136, 'honestly'),
(3137, 'dishonest'),
(3138, 'admit'),
(3139, 'impossibility\r\n			of'),
(3140, 'room'),
(3141, 'miscommunication'),
(3142, 'estimates'),
(3143, '\r\n			as'),
(3144, 'startling'),
(3145, 'tendency'),
(3146, 'wishfully'),
(3147, 'sentence:\r\n			\r\n			i'),
(3148, 'likely'),
(3149, 'we\r\n			will'),
(3150, 'bothers'),
(3151, '\r\n			\r\n			really'),
(3152, 'means:\r\n			\r\n			i'),
(3153, 'promise'),
(3154, 'means\r\n			with'),
(3155, 'customer'),
(3156, 'simpleton'),
(3157, 'restate'),
(3158, 'assumptions'),
(3159, 'how\r\n			obvious'),
(3160, 'estimate'),
(3161, 'programming'),
(3162, 'time'),
(3163, 'time\r\n			estimation'),
(3164, 'labor'),
(3165, 'estimate\r\n			the'),
(3166, 'something\r\n			big'),
(3167, 'honest'),
(3168, 'stall'),
(3169, 'most\r\n			engineers'),
(3170, 'enthusiastic'),
(3171, 'eager'),
(3172, 'please'),
(3173, 'stalling'),
(3174, 'certainly'),
(3175, 'displease'),
(3176, 'stalled'),
(3177, 'but\r\n			an'),
(3178, 'on-the-spot'),
(3179, '\r\n			\r\n			while'),
(3180, 'prototyping'),
(3181, 'pressure\r\n			permits'),
(3182, 'investigation'),
(3183, 'meaning\r\n			of'),
(3184, '\r\n			prepare'),
(3185, 'deconstructing'),
(3186, 'progressively'),
(3187, 'subtasks'),
(3188, 'each\r\n			small'),
(3189, 'day;'),
(3190, 'leave\r\n			anything'),
(3191, 'communicating\r\n			with'),
(3192, 'vacation'),
(3193, 'dealing\r\n			with'),
(3194, 'knuckleheads'),
(3195, 'item'),
(3196, 'what\r\n			is'),
(3197, 'engineers'),
(3198, 'implicitly'),
(3199, 'recommend'),
(3200, 'the\r\n			results'),
(3201, 'padding'),
(3202, 'trust'),
(3203, 'depleted'),
(3204, 'engineer'),
(3205, 'three\r\n			days'),
(3206, 'truly'),
(3207, 'thinks'),
(3208, 'days\r\n			documenting'),
(3209, 'detectable'),
(3210, 'that\r\n			the'),
(3211, 'slacking'),
(3212, 'overestimating\r\n			is'),
(3213, 'born'),
(3214, 'documentation\r\n			takes'),
(3215, 'coding'),
(3216, 'tremendous'),
(3217, 'advantage'),
(3218, 'gained\r\n			by'),
(3219, 'manager'),
(3220, '\r\n			\r\n			pad'),
(3221, 'day---but'),
(3222, 'approach\r\n			doesn'),
(3223, 'work---note'),
(3224, 'somehow'),
(3225, 'can;'),
(3226, 'average\r\n			weighted'),
(3227, 'probabilities'),
(3228, 'identify'),
(3229, 'an\r\n			estimate'),
(3230, 'unlikely'),
(3231, 'sick'),
(3232, 'a\r\n			large'),
(3233, 'time;'),
(3234, 'likewise'),
(3235, 'is\r\n			the'),
(3236, 'probability'),
(3237, 'mandatory'),
(3238, 'company-wide'),
(3239, 'seminar?'),
(3240, 'estimated'),
(3241, 'stick'),
(3242, 'unknowns'),
(3243, 'unk-unks'),
(3244, 'definition'),
(3245, 'estimated\r\n			individually'),
(3246, 'global'),
(3247, 'handle'),
(3248, 'communicate'),
(3249, 'they\r\n			exist'),
(3250, 'devilishly'),
(3251, '\r\n			\r\n			\r\n			in'),
(3252, 'team'),
(3253, 'team-wide'),
(3254, 'consensus'),
(3255, '\r\n			preparedness'),
(3256, 'calamity'),
(3257, 'strikes'),
(3258, 'strong'),
(3259, 'herself\r\n			and'),
(3260, 'weak'),
(3261, 'agree\r\n			on'),
(3262, 'line-by-line'),
(3263, 'clarifies'),
(3264, 'allowing'),
(3265, 'opportunity\r\n			for'),
(3266, 'tactical'),
(3267, 'reassignment'),
(3268, 'shifting'),
(3269, 'burden'),
(3270, 'weaker\r\n			team'),
(3271, 'members'),
(3272, 'stronger'),
(3273, 'risks'),
(3274, 'evaluated'),
(3275, 'duty'),
(3276, 'forcefully'),
(3277, 'your\r\n			manager'),
(3278, 'commit'),
(3279, 'embarrassed'),
(3280, 'hopefully\r\n			in'),
(3281, 'decrease'),
(3282, 'convince'),
(3283, 'estimate\r\n			relatively'),
(3284, 'productive'),
(3285, 'find'),
(3286, 'information'),
(3287, 'time\r\n			the'),
(3288, 'determines'),
(3289, 'concrete'),
(3290, 'objective'),
(3291, 'example\r\n			the'),
(3292, 'patch'),
(3293, 'politely'),
(3294, 'searching'),
(3295, 'the\r\n			internet'),
(3296, 'posting'),
(3297, 'discussion'),
(3298, 'search'),
(3299, 'internet'),
(3300, 'that\r\n			smacks'),
(3301, 'opinion'),
(3302, 'subjective'),
(3303, 'interpretation:'),
(3304, 'ratio'),
(3305, 'drivel'),
(3306, 'truth'),
(3307, 'have\r\n			thought'),
(3308, 'library'),
(3309, 'math'),
(3310, 'mushrooms'),
(3311, 'mysticism'),
(3312, 'trivial'),
(3313, 'subject\r\n			and'),
(3314, 'install'),
(3315, 'package'),
(3316, 'from\r\n			the'),
(3317, 'can\r\n			easily'),
(3318, 'sorting'),
(3319, 'results'),
(3320, 'attempting'),
(3321, 'divine'),
(3322, 'authority'),
(3323, 'pertinent'),
(3324, 'solid'),
(3325, '‘does'),
(3326, 'software\r\n			that'),
(3327, 'brand'),
(3328, 'gigantic'),
(3329, 'sets?’'),
(3330, '\r\n			after'),
(3331, 'options'),
(3332, 'ascertain'),
(3333, 'circumstance'),
(3334, 'talk\r\n			to'),
(3335, 'expert'),
(3336, 'modern\r\n			database'),
(3337, 'lisp'),
(3338, 'talk'),
(3339, 'application'),
(3340, 'that\r\n			has'),
(3341, 'personal'),
(3342, 'decision'),
(3343, 'should\r\n			start'),
(3344, 'business'),
(3345, 'list'),
(3346, 'arguments'),
(3347, 'fails'),
(3348, '\r\n			consider'),
(3349, 'divination'),
(3350, 'suppose'),
(3351, 'studied'),
(3352, 'angles'),
(3353, 'homework'),
(3354, 'pros'),
(3355, 'cons'),
(3356, 'remain\r\n			indecisive'),
(3357, 'follow'),
(3358, 'brain'),
(3359, 'shut'),
(3360, 'multitude'),
(3361, 'available\r\n			divination'),
(3362, 'determining'),
(3363, 'semi-conscious'),
(3364, 'desires'),
(3365, 'as\r\n			they'),
(3366, 'ambiguous'),
(3367, 'subconscious'),
(3368, 'assign\r\n			meaning'),
(3369, 'utilize'),
(3370, 'people'),
(3371, 'information'),
(3372, 'sour'),
(3373, 'information\r\n			sources\r\n			respect'),
(3374, 'balance'),
(3375, 'asking'),
(3376, 'accomplishes\r\n			far'),
(3377, 'receiving'),
(3378, 'answer'),
(3379, 'learns'),
(3380, 'enjoying\r\n			your'),
(3381, 'hearing'),
(3382, '\r\n			\r\n			however'),
(3383, 'diminishes'),
(3384, 'precious\r\n			commodity'),
(3385, 'has:'),
(3386, 'benefits'),
(3387, 'communication'),
(3388, 'weighed\r\n			against'),
(3389, 'derived'),
(3390, '\r\n			i'),
(3391, 'strongly'),
(3392, 'executive'),
(3393, 'minutes'),
(3394, 'month'),
(3395, 'talking\r\n			to'),
(3396, 'organization'),
(3397, 'might\r\n			be'),
(3398, 'employees'),
(3399, 'of\r\n			time'),
(3400, 'their\r\n			position'),
(3401, 'your\r\n			boss'),
(3402, 'uncomfortable'),
(3403, 'all\r\n			your'),
(3404, 'superiors'),
(3405, 'to\r\n			you'),
(3406, 'derive'),
(3407, 'benefit\r\n			of'),
(3408, 'will\r\n			save'),
(3409, 'valuable\r\n			than'),
(3410, 'yours'),
(3411, 'tribe'),
(3412, 'strange'),
(3413, 'summer'),
(3414, 'intern'),
(3415, 'technical'),
(3416, 'position\r\n			can'),
(3417, 'accomplish'),
(3418, 'much;'),
(3419, 'pester'),
(3420, 'hell'),
(3421, 'everybody\r\n			there'),
(3422, 'tolerated?'),
(3423, 'pestered'),
(3424, 'the\r\n			intern'),
(3425, 'showoff'),
(3426, 'hear'),
(3427, 'ideas'),
(3428, 'maybe;\r\n			they'),
(3429, 'perspective'),
(3430, 'recruit'),
(3431, 'wisdom'),
(3432, 'believe\r\n			they'),
(3433, 'flatters'),
(3434, 'teach'),
(3435, 'them\r\n			something'),
(3436, 'vice'),
(3437, 'president'),
(3438, 'if\r\n			you'),
(3439, 'listen'),
(3440, 'understand\r\n			the'),
(3441, 'staff'),
(3442, 'effort\r\n			made'),
(3443, 'impression'),
(3444, 'force'),
(3445, 'document'),
(3446, 'wisely'),
(3447, 'wisely\r\n			life'),
(3448, 'short'),
(3449, 'crap'),
(3450, 'nobody'),
(3451, 'read;'),
(3452, 'documentation\r\n			gives'),
(3453, 'false'),
(3454, 'security'),
(3455, 'if\r\n			someone'),
(3456, 'absolutely'),
(3457, 'insists'),
(3458, '``yes'),
(3459, 'quietly'),
(3460, 'begin\r\n			looking'),
(3461, 'effective'),
(3462, 'take\r\n			to'),
(3463, 'slacken'),
(3464, 'demand'),
(3465, 'the\r\n			truth'),
(3466, 'cold'),
(3467, 'hard:'),
(3468, 'developing\r\n			code'),
(3469, '\r\n			\r\n			writing'),
(3470, '\r\n			study'),
(3471, 'lousy'),
(3472, 'writer'),
(3473, 'command'),
(3474, 'language\r\n			in'),
(3475, 'golden'),
(3476, 'need:'),
(3477, '``do'),
(3478, 'unto'),
(3479, 'as\r\n			you'),
(3480, '\r\n			what'),
(3481, 'above'),
(3482, 'average'),
(3483, 'documenting'),
(3484, 'documents'),
(3485, 'can\r\n			actually'),
(3486, 'non-programmers'),
(3487, 'universal'),
(3488, 'sentiment:\r\n			write'),
(3489, 'self-explanatory'),
(3490, 'it\r\n			clear'),
(3491, 'anyone'),
(3492, 'to\r\n			see'),
(3493, 'code-level'),
(3494, 'prefer'),
(3495, 'anyway'),
(3496, '\r\n			admittedly'),
(3497, 'easier'),
(3498, 'experienced'),
(3499, 'importantly\r\n			however'),
(3500, 'inconsistent'),
(3501, 'confusing'),
(3502, 'written\r\n			perfectly'),
(3503, 'self-explanatory\r\n			code?'),
(3504, 'mean?'),
(3505, 'means:\r\n			\r\n			•'),
(3506, 'it;\r\n			•'),
(3507, 'rule;\r\n			•'),
(3508, 'choosing'),
(3509, 'straightforward'),
(3510, 'solution\r\n			faster;\r\n			•'),
(3511, 'sacrificing'),
(3512, 'optimizations'),
(3513, 'obfuscate'),
(3514, 'code;\r\n			•'),
(3515, 'reader'),
(3516, 'her;\r\n			and\r\n			•'),
(3517, '``foo'),
(3518, '``bar'),
(3519, '``doit'),
(3520, '39;!\r\n			\r\n		\r\n	\r\n\r\n'),
(3521, 'work'),
(3522, 'with'),
(3523, 'poor'),
(3524, 'code'),
(3525, 'code\r\n			it'),
(3526, '39;t\r\n			think'),
(3527, 'walked'),
(3528, 'shoes'),
(3529, 'been\r\n			asked'),
(3530, 'consciously'),
(3531, 'meet'),
(3532, 'regardless'),
(3533, 'in\r\n			order'),
(3534, 'and\r\n			that'),
(3535, 'somewhere'),
(3536, 'insist'),
(3537, 'understand\r\n			it'),
(3538, 'document\r\n			the'),
(3539, 'resulting\r\n			document'),
(3540, 'or\r\n			all'),
(3541, 'save'),
(3542, 'you\r\n			rewrote'),
(3543, 'arrogance'),
(3544, 'but\r\n			will'),
(3545, 'test\r\n			burden'),
(3546, 're-test'),
(3547, 'outweigh'),
(3548, 'gained?\r\n			\r\n			in'),
(3549, 'code\r\n			should'),
(3550, 'affect'),
(3551, 'perception'),
(3552, 'abstraction'),
(3553, 'encapsulation'),
(3554, '\r\n			but'),
(3555, 'obtain'),
(3556, 'a\r\n			good'),
(3557, 'reworking'),
(3558, 'mess'),
(3559, 'that\r\n			are'),
(3560, 'redesigned'),
(3561, 'source'),
(3562, 'code'),
(3563, 'control'),
(3564, 'control\r\n			source'),
(3565, 'person\r\n			and'),
(3566, 'essential'),
(3567, 'track'),
(3568, 'versions'),
(3569, 'ever\r\n			lost'),
(3570, 'throw-away'),
(3571, 'code\r\n			with'),
(3572, 'carefully\r\n			separate'),
(3573, 'committed'),
(3574, 'official'),
(3575, 'appreciate'),
(3576, 'wouldn'),
(3577, 'without\r\n			one'),
(3578, 'one-person'),
(3579, 'advantage:'),
(3580, 'encourage'),
(3581, 'about\r\n			the'),
(3582, 'growing'),
(3583, 'marked'),
(3584, 'revision'),
(3585, 'new\r\n			name'),
(3586, 'visibly'),
(3587, 'progressive'),
(3588, 'stay'),
(3589, 'upto-\r\n			date'),
(3590, 'finished'),
(3591, 'checked'),
(3592, 'inactive\r\n			and'),
(3593, 'for\r\n			anybody'),
(3594, 'committing'),
(3595, 'slows'),
(3596, 'teammates'),
(3597, 'serious'),
(3598, 'error;'),
(3599, 'often\r\n			taboo'),
(3600, 'unit'),
(3601, 'test'),
(3602, 'test\r\n			unit'),
(3603, 'coded'),
(3604, 'a\r\n			part'),
(3605, 'will\r\n			be'),
(3606, 'tested'),
(3607, 'sentence'),
(3608, 'test\r\n			will'),
(3609, 'simple:'),
(3610, '``does'),
(3611, 'button'),
(3612, 'good?'),
(3613, 'complex:'),
(3614, '``did'),
(3615, 'matching\r\n			algorithm'),
(3616, 'matches?'),
(3617, '39;\r\n			\r\n			use'),
(3618, 'drivers'),
(3619, 'catches'),
(3620, 'is\r\n			very'),
(3621, 'lets'),
(3622, 'eliminate'),
(3623, 'mysteries'),
(3624, 'worry\r\n			about'),
(3625, 'developers'),
(3626, 'extensively'),
(3627, 'effectively;'),
(3628, 'do\r\n			no'),
(3629, 'take'),
(3630, 'breaks'),
(3631, 'when'),
(3632, 'stumped'),
(3633, '\r\n	\r\n		\r\n			\r\n			take'),
(3634, 'stumped\r\n			when'),
(3635, 'meditate'),
(3636, 'problem\r\n			magically'),
(3637, 'unravels'),
(3638, 'sleep'),
(3639, 'a\r\n			larger'),
(3640, 'switching'),
(3641, 'activity'),
(3642, 'recognize'),
(3643, 'when'),
(3644, 'home'),
(3645, 'home\r\n			computer'),
(3646, 'unfortunate'),
(3647, 'health'),
(3648, 'cultural/historical'),
(3649, 'the\r\n			need'),
(3650, 'unloaded'),
(3651, 'overwhelming'),
(3652, 'timeto-\r\n			market'),
(3653, 'scarcity'),
(3654, 'traditionally'),
(3655, 'overworked'),
(3656, 'stories'),
(3657, 'pretty'),
(3658, 'is\r\n			serious'),
(3659, 'their\r\n			teammates'),
(3660, 'that\r\n			other'),
(3661, 'fixed'),
(3662, 'rules'),
(3663, 'solving'),
(3664, 'anymore'),
(3665, 'there\r\n			can'),
(3666, 'raising'),
(3667, 'reason---every'),
(3668, '\r\n			\r\n			beyond'),
(3669, 'extraordinary'),
(3670, 'fair'),
(3671, '60\r\n			hours'),
(3672, 'person;'),
(3673, 'stupid'),
(3674, 'to\r\n			work'),
(3675, 'extra'),
(3676, 'hour'),
(3677, 'personally'),
(3678, '39;s\r\n			any'),
(3679, 'noblesse'),
(3680, 'oblige\r\n			and'),
(3681, 'shoulder'),
(3682, 'heavy'),
(3683, 'patsy'),
(3684, 'is\r\n			programmers'),
(3685, 'patsies'),
(3686, 'somebody'),
(3687, 'a\r\n			manager'),
(3688, 'impress'),
(3689, 'succumb'),
(3690, 'eager\r\n			to'),
(3691, 'saying'),
(3692, 'defenses'),
(3693, 'this:\r\n			\r\n			•'),
(3694, 'mislead\r\n			the'),
(3695, 'executives'),
(3696, 'defensively'),
(3697, 'into\r\n			what'),
(3698, 'stands'),
(3699, 'quit'),
(3700, '\r\n			\r\n			most'),
(3701, 'do\r\n			that'),
(3702, 'inertia'),
(3703, 'associated\r\n			with'),
(3704, 'warmed-up'),
(3705, 'deeply'),
(3706, 'involved'),
(3707, 'they\r\n			work'),
(3708, 'uninterrupted'),
(3709, 'concentrate'),
(3710, 'duties'),
(3711, 'to\r\n			satisfy'),
(3712, 'rhythm'),
(3713, 'it\r\n			takes'),
(3714, 'procure'),
(3715, 'reserving'),
(3716, 'attend\r\n			only'),
(3717, 'meetings'),
(3718, '\r\n			\r\n			since'),
(3719, 'evenings'),
(3720, 'best\r\n			for'),
(3721, 'office'),
(3722, 'commute\r\n			from'),
(3723, 'before\r\n			they'),
(3724, 'comfortable'),
(3725, 'contagious'),
(3726, 'disease'),
(3727, 'thinking\r\n			suicidal'),
(3728, 'thoughts'),
(3729, 'homicidal'),
(3730, 'more\r\n			than'),
(3731, 'send'),
(3732, 'malfunctioning\r\n			or'),
(3733, 'illness'),
(3734, 'mild'),
(3735, 'depression'),
(3736, 'tempted'),
(3737, 'deceptive\r\n			in'),
(3738, 'normally'),
(3739, 'fatigue'),
(3740, 'cocaine'),
(3741, 'or\r\n			amphetamines'),
(3742, 'combat'),
(3743, 'abuse'),
(3744, 'caffeine'),
(3745, 'deal'),
(3746, 'with'),
(3747, 'difficult'),
(3748, 'people'),
(3749, 'people\r\n			you'),
(3750, '\r\n			if'),
(3751, 'conflicts'),
(3752, 'coworkers'),
(3753, 'cherish'),
(3754, 'independence'),
(3755, 'implies'),
(3756, 'interpersonal'),
(3757, 'sacrificing\r\n			your'),
(3758, 'principles'),
(3759, 'disturbing'),
(3760, 'sort'),
(3761, 'and\r\n			whose'),
(3762, 'taught'),
(3763, 'patterns'),
(3764, 'behavior'),
(3765, 'the\r\n			workplace'),
(3766, 'inured'),
(3767, 'affected'),
(3768, 'social\r\n			pressure'),
(3769, 'appropriately'),
(3770, 'than\r\n			you'),
(3771, '\r\n			\r\n			programmers'),
(3772, 'arises'),
(3773, 'resolved\r\n			somehow'),
(3774, 'ducked'),
(3775, 'intelligent'),
(3776, 'have\r\n			something'),
(3777, 'without\r\n			prejudice'),
(3778, 'disagreement\r\n			but'),
(3779, 'patience'),
(3780, 'cool'),
(3781, 'and\r\n			cordial'),
(3782, 'baits'),
(3783, 'conflict'),
(3784, 'reasonable'),
(3785, 'period\r\n			of'),
(3786, '\r\n			\r\n			don'),
(3787, 'bully'),
(3788, 'agree'),
(3789, 'leader'),
(3790, 'you\r\n			think'),
(3791, 'prepared'),
(3792, 'reasons\r\n			for'),
(3793, 'teammate'),
(3794, 'decision\r\n			have'),
(3795, 'impact'),
(3796, 'whole-heartedly'),
(3797, '\r\n			\r\n			difficult'),
(3798, 'eyes'),
(3799, 'rare'),
(3800, '\r\n			everyone'),
(3801, 'transitory'),
(3802, 'downs'),
(3803, '\r\n			\r\n			one'),
(3804, 'challenges'),
(3805, 'leaders'),
(3806, 'difficult\r\n			person'),
(3807, 'engaged'),
(3808, 'prone'),
(3809, 'duck'),
(3810, 'resist'),
(3811, 'passively'),
(3812, 'small'),
(3813, 'self-assesment'),
(3814, 'test'),
(3815, 'programmer'),
(3816, 'imported_lesson'),
(3817, 'imported_lesson'),
(3818, 'know'),
(3819, 'when'),
(3820, 'apply'),
(3821, 'fancy'),
(3822, 'computer'),
(3823, 'science'),
(3824, 'computer\r\n			science\r\n			there'),
(3825, 'body'),
(3826, 'gee-whiz\r\n			stuff'),
(3827, 'too\r\n			complicated'),
(3828, 'of\r\n			your'),
(3829, 'inefficient'),
(3830, 'programming\r\n			consists'),
(3831, 'to\r\n			build'),
(3832, 'nice'),
(3833, 'interface'),
(3834, 'technology'),
(3835, 'technology?'),
(3836, 'crack'),
(3837, 'something\r\n			other'),
(3838, 'run-of-the-mill'),
(3839, 'algorithm?'),
(3840, 'evaluated\r\n			carefully'),
(3841, 'considerations'),
(3842, 'are:\r\n			\r\n			•'),
(3843, 'encapsulated'),
(3844, 'overall'),
(3845, 'complexity\r\n			and'),
(3846, 'maintenance'),
(3847, 'low?\r\n			\r\n			•'),
(3848, 'mature'),
(3849, 'a\r\n			new'),
(3850, '?\r\n			\r\n			•'),
(3851, 'evaluate'),
(3852, 'effectively?\r\n			\r\n			if'),
(3853, 'well-isolated'),
(3854, 'uses'),
(3855, 'slightly'),
(3856, 'increase\r\n			performance'),
(3857, 'criminal'),
(3858, 'to\r\n			consider'),
(3859, 'keys'),
(3860, 'arguing'),
(3861, 'quite\r\n			low'),
(3862, 'proposed'),
(3863, 'issue'),
(3864, 'integration'),
(3865, '\r\n			here'),
(3866, 'synergize'),
(3867, 'technology\r\n			to'),
(3868, 'talk'),
(3869, 'non-engineers'),
(3870, 'non-engineers\r\n			engineers'),
(3871, 'recognized'),
(3872, 'different\r\n			from'),
(3873, 'worth'),
(3874, 'bearing\r\n			in'),
(3875, 'non-engineers;'),
(3876, 'audience'),
(3877, '\r\n			\r\n			non-engineers'),
(3878, 'grounded'),
(3879, 'make\r\n			things'),
(3880, 'sell'),
(3881, 'experts\r\n			on'),
(3882, 'teams'),
(3883, 'there\r\n			are'),
(3884, 'exceptions'),
(3885, 'non-team'),
(3886, 'environments'),
(3887, 'intimate'),
(3888, '\r\n			precise'),
(3889, 'subdivisions'),
(3890, 'tasks'),
(3891, 'intimidated'),
(3892, 'they\r\n			may'),
(3893, '‘yes’'),
(3894, 'scared'),
(3895, 'stand'),
(3896, 'words'),
(3897, '\r\n			\r\n			non-programmers'),
(3898, 'hard\r\n			even'),
(3899, 'us---technical'),
(3900, 'understand\r\n			why'),
(3901, '\r\n			programmers'),
(3902, 'anecdotally'),
(3903, 'horrible'),
(3904, 'great\r\n			opportunity'),
(3905, 'shorthand'),
(3906, 'language\r\n			that'),
(3907, 'general\r\n			and'),
(3908, '39;t\r\n			have'),
(3909, 'vocabulary\r\n			create'),
(3910, 'share'),
(3911, 'wastes'),
(3912, '\r\n			\r\n			with'),
(3913, 'goals'),
(3914, 'restated'),
(3915, 'conversation\r\n			focuses'),
(3916, 'details'),
(3917, 'outsiders'),
(3918, 'not\r\n			understand'),
(3919, 'granted'),
(3920, 'repeat'),
(3921, 'you\r\n			can'),
(3922, 'leave'),
(3923, 'conversation'),
(3924, 'outsider'),
(3925, 'really\r\n			there'),
(3926, 'misunderstanding'),
(3927, 'miscommunicate'),
(3928, 'watch\r\n			carefully'),
(3929, 'summarize'),
(3930, 'paraphrase'),
(3931, 'are\r\n			saying'),
(3932, 'alter'),
(3933, 'practices'),
(3934, 'becoming'),
(3935, 'frustrated\r\n			with'),
(3936, 'theirs'),
(3937, 'opportunities'),
(3938, 'can\r\n			often'),
(3939, 'clarity'),
(3940, 'trained'),
(3941, 'to\r\n			bring'),
(3942, 'chaos'),
(3943, 'bring'),
(3944, 'confusion'),
(3945, '\r\n			because'),
(3946, 'often\r\n			find'),
(3947, 'propose'),
(3948, 'kindness'),
(3949, 'and\r\n			a'),
(3950, 'desire'),
(3951, 'right'),
(3952, 'be\r\n			seen'),
(3953, 'synergizing'),
(3954, 'view'),
(3955, 'extreme\r\n			programming'),
(3956, 'addresses'),
(3957, 'inefficiency;'),
(3958, 'marrying'),
(3959, 'the\r\n			idea'),
(3960, 'evaluate'),
(3961, 'interviewees'),
(3962, 'interviewees\r\n			evaluating'),
(3963, 'energy'),
(3964, 'deserves'),
(3965, 'hire'),
(3966, 'marriage'),
(3967, '\r\n			is'),
(3968, 'terrible'),
(3969, 'portion'),
(3970, 'devoted'),
(3971, 'recruitment'),
(3972, '\r\n			though'),
(3973, 'interviewing'),
(3974, 'torturous'),
(3975, 'designed'),
(3976, 'a\r\n			great'),
(3977, 'stress'),
(3978, 'serves'),
(3979, 'purpose'),
(3980, 'possibly'),
(3981, 'revealing'),
(3982, 'character'),
(3983, 'flaws'),
(3984, 'and\r\n			weaknesses'),
(3985, 'interviewers'),
(3986, 'with\r\n			themselves'),
(3987, 'capacity'),
(3988, 'self-deception'),
(3989, 'astonishing'),
(3990, 'technical\r\n			skills'),
(3991, 'and\r\n			quickly'),
(3992, 'retract'),
(3993, 'boundary'),
(3994, 'respect\r\n			this'),
(3995, 'heard'),
(3996, 'of\r\n			their'),
(3997, 'motivations'),
(3998, 'hired'),
(3999, 'where\r\n			they'),
(4000, 'school'),
(4001, 'inessential'),
(4002, 'characteristic'),
(4003, 'what\r\n			they'),
(4004, 'watch'),
(4005, 'whiff'),
(4006, 'brimstone'),
(4007, 'comparing'),
(4008, 'notes'),
(4009, 'interview'),
(4010, 'heat'),
(4011, 'interview\r\n			it'),
(4012, 'important\r\n			than'),
(4013, 'luck'),
(4014, '‘take-home’'),
(4015, 'that\r\n			can'),
(4016, 'uncover'),
(4017, 'interviewee'),
(4018, 'code---and'),
(4019, 'are\r\n			many'),
(4020, 'tried'),
(4021, 'sounds'),
(4022, 'sensible'),
(4023, '\r\n			\r\n			finally'),
(4024, 'selling'),
(4025, 'to\r\n			the'),
(4026, 'color'),
(4027, 'off\r\n			with'),
(4028, 'finish'),
(4029, 'grow'),
(4030, 'professionally'),
(4031, 'professionally\r\n			assume'),
(4032, 'responsibility'),
(4033, 'express'),
(4034, 'appreciation\r\n			for'),
(4035, 'contribution'),
(4036, 'success'),
(4037, 'that\r\n			help'),
(4038, 'instigate'),
(4039, 'formation'),
(4040, 'become\r\n			a'),
(4041, 'comfortably'),
(4042, 'working\r\n			with'),
(4043, '\r\n			\r\n			evaluate'),
(4044, 'admire'),
(4045, 'impact\r\n			on'),
(4046, 'career'),
(4047, '\r\n			\r\n			plan'),
(4048, 'integrating'),
(4049, 'make'),
(4050, 'build'),
(4051, 'decision'),
(4052, 'decision\r\n			an'),
(4053, 'entrepreneurial'),
(4054, 'to\r\n			constantly'),
(4055, 'so-called'),
(4056, 'decisions'),
(4057, 'turn'),
(4058, 'phrase'),
(4059, 'ways:\r\n			\r\n			it'),
(4060, 'open-source'),
(4061, 'bought'),
(4062, 'importantly'),
(4063, '\r\n			it'),
(4064, 'decision\r\n			because'),
(4065, '\r\n			management'),
(4066, 'engineering'),
(4067, 'savvy'),
(4068, '\r\n			\r\n			•'),
(4069, 'match'),
(4070, 'designed?\r\n			•'),
(4071, 'need?\r\n			•'),
(4072, 'evaluating'),
(4073, 'integration?\r\n			•'),
(4074, 'buying'),
(4075, 'costs?\r\n			•'),
(4076, 'in?\r\n			\r\n			you'),
(4077, 'serve'),
(4078, 'an\r\n			entire'),
(4079, 'bright'),
(4080, 'optimistic'),
(4081, 'contribute'),
(4082, 'compelling'),
(4083, 'wish'),
(4084, 'business\r\n			plan;'),
(4085, 'invest'),
(4086, 'conscious'),
(4087, 'considering'),
(4088, 'questions'),
(4089, 'prepare'),
(4090, 'plans'),
(4091, 'for\r\n			building'),
(4092, 'thorough'),
(4093, 'evaluation'),
(4094, 'unreasonable'),
(4095, 'particular\r\n			product'),
(4096, 'be\r\n			spent'),
(4097, 'manage'),
(4098, 'software'),
(4099, 'system'),
(4100, 'dependence'),
(4101, 'dependence\r\n			modern'),
(4102, 'tend'),
(4103, 'components'),
(4104, 'directly\r\n			under'),
(4105, 'productivity'),
(4106, 'synergy'),
(4107, 'reuse'),
(4108, 'each\r\n			component'),
(4109, 'problems:\r\n			\r\n			•'),
(4110, 'component?\r\n			\r\n			•'),
(4111, 'restrict'),
(4112, 'systems?\r\n			\r\n			•'),
(4113, 'completely?\r\n			\r\n			it'),
(4114, 'encapsulate'),
(4115, 'swapped'),
(4116, 'proves'),
(4117, 'unworkable'),
(4118, 'a\r\n			different'),
(4119, 'makes\r\n			porting'),
(4120, '\r\n			\r\n			having'),
(4121, 'decreases'),
(4122, 'workarounds'),
(4123, 'you\r\n			make'),
(4124, 'owner'),
(4125, 'incorporated\r\n			into'),
(4126, 'release;'),
(4127, 'uncomfortably'),
(4128, 'unofficial'),
(4129, 'version'),
(4130, 'decide'),
(4131, 'software'),
(4132, 'immature'),
(4133, 'immature\r\n			using'),
(4134, 'discouraged'),
(4135, 'the\r\n			biggest'),
(4136, 'bugginess'),
(4137, 'inoperability'),
(4138, 'software\r\n			before'),
(4139, 'matures'),
(4140, 'usage'),
(4141, 'usable'),
(4142, 'with\r\n			a'),
(4143, 'house'),
(4144, 'party'),
(4145, 'it\r\n			is'),
(4146, 'it:\r\n			\r\n			1'),
(4147, 'vapor?'),
(4148, 'promises'),
(4149, 'accessible'),
(4150, 'lore'),
(4151, 'software?\r\n			\r\n			3'),
(4152, 'user?\r\n			\r\n			4'),
(4153, 'incentive'),
(4154, 'continuation?\r\n			\r\n			5'),
(4155, 'effort?\r\n			\r\n			6'),
(4156, 'defection'),
(4157, 'maintainers?\r\n			\r\n			7'),
(4158, 'seasoned'),
(4159, 'alternative'),
(4160, 'half'),
(4161, 'good?\r\n			\r\n			8'),
(4162, 'company?\r\n			\r\n			9'),
(4163, 'desirable'),
(4164, 'company?\r\n			\r\n			10'),
(4165, 'bad?\r\n			\r\n			a'),
(4166, 'demonstrates'),
(4167, 'well-established'),
(4168, 'software\r\n			and'),
(4169, 'reducing'),
(4170, 'entrepreneur'),
(4171, 'tradeoff'),
(4172, 'quality'),
(4173, 'against'),
(4174, 'development'),
(4175, 'time'),
(4176, 'development\r\n			time\r\n			software'),
(4177, 'the\r\n			project'),
(4178, 'speed'),
(4179, 'a\r\n			way'),
(4180, 'offends'),
(4181, 'sensibilities'),
(4182, 'be\r\n			asked'),
(4183, 'of\r\n			maintenance'),
(4184, 'the\r\n			decrease'),
(4185, '\r\n			make'),
(4186, 'ground'),
(4187, 'regained'),
(4188, 'plan\r\n			should'),
(4189, 'affects'),
(4190, 'to\r\n			your'),
(4191, 'reported\r\n			after'),
(4192, 'isolate'),
(4193, 'shoddiness'),
(4194, 'can\r\n			plan'),
(4195, '\r\n			ninjaprogrammer'),
(4196, 'slashdot'),
(4197, 'sent'),
(4198, 'gem:\r\n			\r\n			remember'),
(4199, 'resillient'),
(4200, 'implementations'),
(4201, 'interfaces'),
(4202, 'abstractions'),
(4203, 'the\r\n			eventual'),
(4204, 'rewrites'),
(4205, 'painless'),
(4206, 'is\r\n			hard'),
(4207, 'causing'),
(4208, 'disagree'),
(4209, 'honestly'),
(4210, 'away'),
(4211, 'with'),
(4212, 'away\r\n			with'),
(4213, 'it\r\n			disagreement'),
(4214, 'handled'),
(4215, 'delicately'),
(4216, '\r\n			hopefully'),
(4217, 'expressed'),
(4218, 'the\r\n			decision'),
(4219, 'decision\r\n			even'),
(4220, 'independent\r\n			and'),
(4221, 'yes-man'),
(4222, 'respectful'),
(4223, 'player'),
(4224, 'makers'),
(4225, 'have\r\n			the'),
(4226, 'reconsidering'),
(4227, 'argument'),
(4228, '\r\n			\r\n			usually'),
(4229, 'stressful'),
(4230, 'personality'),
(4231, 'types\r\n			this'),
(4232, 'the\r\n			confidence'),
(4233, 'challenge'),
(4234, 'maker'),
(4235, 'insecure'),
(4236, 'to\r\n			their'),
(4237, 'react'),
(4238, 'reptilian\r\n			part'),
(4239, 'brains'),
(4240, 'private'),
(4241, 'knowledge\r\n			changes'),
(4242, '\r\n			\r\n			whether'),
(4243, 'reversed'),
(4244, '‘i\r\n			told'),
(4245, 'so!’'),
(4246, 'alternate'),
(4247, 'explored'),
(4248, 'communicate'),
(4249, 'right'),
(4250, 'amount'),
(4251, 'amount\r\n			carefully'),
(4252, 'meeting;'),
(4253, 'duration'),
(4254, 'multiplied'),
(4255, 'participants'),
(4256, 'communication\r\n			in'),
(4257, 'wasted'),
(4258, 'bored'),
(4259, 'a\r\n			meeting'),
(4260, 'meeting'),
(4261, '\r\n			\r\n			everything'),
(4262, 'informal'),
(4263, 'is\r\n			done'),
(4264, 'lunches'),
(4265, 'shame'),
(4266, 'companies\r\n			do'),
(4267, 'manage'),
(4268, 'consultants'),
(4269, 'consultants\r\n			use'),
(4270, 'deserve'),
(4271, '\r\n			since'),
(4272, 'technologies\r\n			and'),
(4273, 'educators\r\n			in-house'),
(4274, 'regular'),
(4275, 'employees\r\n			are'),
(4276, 'strengths'),
(4277, 'weaknesses'),
(4278, 'their\r\n			financial'),
(4279, 'commitment'),
(4280, 'if\r\n			the'),
(4281, 'hopefully\r\n			your'),
(4282, 'selection'),
(4283, 'review'),
(4284, 'cannot\r\n			get'),
(4285, 'reviewed'),
(4286, 'team\r\n			members'),
(4287, 'manage'),
(4288, 'third-party'),
(4289, 'software'),
(4290, 'risks'),
(4291, 'risks\r\n			a'),
(4292, 'organizations'),
(4293, 'are\r\n			great'),
(4294, '\r\n			never'),
(4295, 'hopes'),
(4296, 'vapor'),
(4297, 'alleged'),
(4298, 'promised'),
(4299, 'is\r\n			not'),
(4300, 'surest'),
(4301, 'unwise'),
(4302, 'merely'),
(4303, 'skeptical'),
(4304, 'of\r\n			a'),
(4305, 'release'),
(4306, 'feature'),
(4307, 'date;'),
(4308, 'wiser'),
(4309, 'any\r\n			documents'),
(4310, 'tackled'),
(4311, 'devote'),
(4312, 'three\r\n			products'),
(4313, 'suitability'),
(4314, 'be\r\n			accurately'),
(4315, '\r\n			\r\n			understanding'),
(4316, 'tribal\r\n			knowledge'),
(4317, 'resides'),
(4318, 'experts'),
(4319, 'completely\r\n			that'),
(4320, 'fail'),
(4321, 'contingency'),
(4322, 'ability\r\n			to'),
(4323, 'depend\r\n			on'),
(4324, 'manage'),
(4325, 'development'),
(4326, 'time'),
(4327, 'time\r\n			to'),
(4328, 'concise'),
(4329, 'up-to-date'),
(4330, 'milestones'),
(4331, 'marking'),
(4332, 'assignment'),
(4333, 'or\r\n			your'),
(4334, 'remember\r\n			to'),
(4335, 'preparing'),
(4336, 'ordering\r\n			equipment'),
(4337, 'consensual'),
(4338, 'agreement'),
(4339, 'the\r\n			start'),
(4340, 'help'),
(4341, 'organized'),
(4342, 'project\r\n			plan'),
(4343, 'reality'),
(4344, 'these\r\n			decisions'),
(4345, 'persons'),
(4346, 'should\r\n			shift'),
(4347, 'fancy\r\n			project'),
(4348, 'seduced'),
(4349, 'front'),
(4350, 'bduf'),
(4351, 'concision'),
(4352, 'up-to-dateness'),
(4353, 'miss'),
(4354, 'milestone'),
(4355, 'immediate'),
(4356, 'informing'),
(4357, 'the\r\n			scheduled'),
(4358, 'completion'),
(4359, 'slipped'),
(4360, 'could\r\n			never'),
(4361, 'begin'),
(4362, 'with;'),
(4363, 'creates'),
(4364, 'illusion'),
(4365, 'up\r\n			the'),
(4366, 'missed'),
(4367, 'latter'),
(4368, 'underestimated'),
(4369, 'overestimated'),
(4370, 'scheduled'),
(4371, 'completion\r\n			of'),
(4372, '\r\n			\r\n			make'),
(4373, 'for:'),
(4374, 'demos'),
(4375, 'scheduled\r\n			periodic'),
(4376, 'dealing'),
(4377, 'sickness'),
(4378, 'vacations'),
(4379, 'of\r\n			existing'),
(4380, 'products'),
(4381, 'it\r\n			should'),
(4382, 'integration'),
(4383, 'testing'),
(4384, 'testing\r\n			integration'),
(4385, 'unit\r\n			tested'),
(4386, 'in\r\n			your'),
(4387, '\r\n			\r\n			ideally'),
(4388, 'organize'),
(4389, 'phase'),
(4390, 'must\r\n			explicitly'),
(4391, 'gradually'),
(4392, 'completed'),
(4393, 'the\r\n			course'),
(4394, 'communication'),
(4395, 'languages'),
(4396, '\r\n	\r\n		\r\n			\r\n			communication'),
(4397, 'languages\r\n			there'),
(4398, 'formally'),
(4399, 'syntactic'),
(4400, 'programming\r\n			languages'),
(4401, 'languages---they'),
(4402, 'facillitate'),
(4403, 'standardization'),
(4404, '2003'),
(4405, 'familiarity'),
(4406, 'when\r\n			to'),
(4407, '\r\n			\r\n			uml'),
(4408, 'rich'),
(4409, 'formal'),
(4410, 'drawings'),
(4411, 'beauty'),
(4412, 'is\r\n			both'),
(4413, 'visual'),
(4414, 'capable'),
(4415, 'conveying'),
(4416, 'author'),
(4417, 'the\r\n			audience'),
(4418, 'communicated'),
(4419, 'in\r\n			it'),
(4420, 'professional'),
(4421, 'of\r\n			cases'),
(4422, 'myself'),
(4423, 'simpler'),
(4424, 'boxes'),
(4425, 'arrows'),
(4426, 'design\r\n			drawings'),
(4427, 'fairly'),
(4428, 'studying'),
(4429, 'latin'),
(4430, '\r\n			\r\n			xml'),
(4431, 'standard'),
(4432, 'defining'),
(4433, 'standards'),
(4434, 'interchange'),
(4435, 'presented'),
(4436, 'welcome'),
(4437, 'automation'),
(4438, 'most\r\n			boring'),
(4439, 'namely'),
(4440, 'structuring'),
(4441, 'linear'),
(4442, 'and\r\n			parsing'),
(4443, 'type-'),
(4444, 'correctness-checking'),
(4445, 'again\r\n			only'),
(4446, '\r\n			\r\n			sql'),
(4447, 'powerful'),
(4448, 'query'),
(4449, 'manipulation'),
(4450, 'programming\r\n			language'),
(4451, 'product-dependent'),
(4452, 'standardized'),
(4453, 'lingua'),
(4454, 'franca'),
(4455, 'databases'),
(4456, 'not\r\n			work'),
(4457, 'should\r\n			have'),
(4458, 'syntax'),
(4459, 'learn'),
(4460, 'type'),
(4461, 'type\r\n			learn'),
(4462, 'touch-type'),
(4463, 'at\r\n			which'),
(4464, 'irrelevant'),
(4465, 'dent'),
(4466, 'no\r\n			matter'),
(4467, 'will\r\n			probably'),
(4468, 'fun\r\n			test'),
(4469, 'commitment;'),
(4470, '\r\n			legend'),
(4471, 'tiemann2'),
(4472, 'door'),
(4473, 'to\r\n			listen'),
(4474, 'generated'),
(4475, 'keystrokes'),
(4476, 'rapid'),
(4477, 'indistinguishable'),
(4478, 'learn'),
(4479, 'skills'),
(4480, 'skills\r\n			learning'),
(4481, 'non-technical'),
(4482, 'greatest'),
(4483, 'companies\r\n			would'),
(4484, 'morale'),
(4485, 'motivates'),
(4486, '\r\n			\r\n			humans'),
(4487, 'book-reading'),
(4488, 'class-taking'),
(4489, 'respect\r\n			for'),
(4490, 'program?'),
(4491, 'in\r\n			a'),
(4492, 'forgiving'),
(4493, 'manage\r\n			a'),
(4494, 'replacement'),
(4495, 'what\r\n			can'),
(4496, 'knowledge?'),
(4497, 'offer\r\n			to'),
(4498, 'better\r\n			than'),
(4499, 'playing'),
(4500, 'playtime'),
(4501, 'formal\r\n			training'),
(4502, 'sleeping'),
(4503, 'lectures'),
(4504, 'waiting'),
(4505, 'dinner'),
(4506, 'assist'),
(4507, 'assigning'),
(4508, 'are\r\n			the'),
(4509, 'important\r\n			skills'),
(4510, 'practice\r\n			courage'),
(4511, 'honesty'),
(4512, 'learn'),
(4513, 'skills'),
(4514, 'balance'),
(4515, 'brevity'),
(4516, 'abstraction'),
(4517, 'abstraction\r\n			abstraction'),
(4518, 'beginning\r\n			programmers'),
(4519, 'enthusiasm'),
(4520, 'one\r\n			sign'),
(4521, 'anything\r\n			except'),
(4522, 'attraction'),
(4523, 'understandable'),
(4524, 'code\r\n			brevity'),
(4525, 'measured'),
(4526, 'sees'),
(4527, 'made\r\n			by'),
(4528, 'idealists:'),
(4529, 'wonderfully\r\n			abstract'),
(4530, 'speculate'),
(4531, 'eventuality'),
(4532, 'progresses'),
(4533, 'becomes'),
(4534, 'messy'),
(4535, 'become\r\n			longer'),
(4536, 'empty'),
(4537, 'under\r\n			pressure'),
(4538, 'been\r\n			spent'),
(4539, 'speculative'),
(4540, 'strongly\r\n			recommend'),
(4541, 'article'),
(4542, '``succinctness'),
(4543, 'paul'),
(4544, 'graham'),
(4545, 'pgsite'),
(4546, 'dogma'),
(4547, 'hiding'),
(4548, 'object\r\n			oriented'),
(4549, 'abstractly\r\n			and'),
(4550, 'speculative\r\n			code'),
(4551, 'accepted'),
(4552, 'hide'),
(4553, 'variable'),
(4554, 'mutators\r\n			and'),
(4555, 'accessors'),
(4556, 'exposed'),
(4557, 'allow\r\n			the'),
(4558, 'affecting'),
(4559, 'calling'),
(4560, 'is\r\n			perhaps'),
(4561, 'publish'),
(4562, 'the\r\n			benefit'),
(4563, 'outweighs'),
(4564, 'wordiness'),
(4565, 'owns'),
(4566, 'and\r\n			hence'),
(4567, 'recode'),
(4568, 'caller'),
(4569, 'price\r\n			to'),
(4570, '\r\n			\r\n			portability'),
(4571, 'poses'),
(4572, 'portable'),
(4573, 'compiler'),
(4574, '\r\n			software'),
(4575, 'ported?'),
(4576, 'non-portable'),
(4577, 'shortand-\r\n			easily-ported'),
(4578, 'certainly\r\n			a'),
(4579, 'confine'),
(4580, 'designated'),
(4581, 'dbms'),
(4582, 'stress'),
(4583, 'test'),
(4584, 'test\r\n			stress'),
(4585, 'system\r\n			works'),
(4586, 'load'),
(4587, 'hitting'),
(4588, 'bonking'),
(4589, 'there\r\n			may'),
(4590, '‘wall’'),
(4591, 'to\r\n			figure'),
(4592, 'clarify\r\n			exactly'),
(4593, 'request'),
(4594, 'miserable'),
(4595, 'smashing\r\n			success?'),
(4596, 'concurrent'),
(4597, 'users'),
(4598, 'enough?'),
(4599, 'answer\r\n			when'),
(4600, 'answers'),
(4601, 'well\r\n			enough'),
(4602, 'simulate'),
(4603, 'erratic'),
(4604, 'unpredictable'),
(4605, 'humans'),
(4606, 'using\r\n			a'),
(4607, 'concurrently'),
(4608, 'simulations'),
(4609, 'model\r\n			some'),
(4610, 'light'),
(4611, 'dimension---such'),
(4612, 'input\r\n			rate'),
(4613, 'input'),
(4614, 'size---until'),
(4615, 'satisfy'),
(4616, 'figure\r\n			out'),
(4617, 'dominant'),
(4618, 'input/\r\n			output'),
(4619, 'contention?'),
(4620, '\r\n			\r\n			note'),
(4621, 'not\r\n			help'),
(4622, 'hurt'),
(4623, 'lightly'),
(4624, 'loaded'),
(4625, 'under\r\n			heavy'),
(4626, 'it;\r\n			no'),
(4627, 'sufficient'),
(4628, 'wall-clock\r\n			time'),
(4629, 'into\r\n			memory'),
(4630, 'computers\r\n			and'),
(4631, 'cooperating'),
(4632, 'wall\r\n			'),
(4633, 'non-linear'),
(4634, 'be\r\n			a'),
(4635, 'participating\r\n			machines'),
(4636, '\r\n			\r\n			knowing'),
(4637, 'providing'),
(4638, 'predictability\r\n			so'),
(4639, 'managed'),
(4640, 'stay'),
(4641, 'motivated'),
(4642, 'motivated\r\n			it'),
(4643, 'create\r\n			artifacts'),
(4644, 'beautiful'),
(4645, 'nifty'),
(4646, 'universal\r\n			but'),
(4647, 'separates'),
(4648, 'other\r\n			roles'),
(4649, 'money'),
(4650, 'doing\r\n			ugly'),
(4651, 'boring'),
(4652, 'stuff;'),
(4653, '\r\n			\r\n			obviously'),
(4654, 'industries'),
(4655, 'motivational'),
(4656, 'apply\r\n			here'),
(4657, 'personally\r\n			motivating'),
(4658, 'at\r\n			all'),
(4659, 'affects\r\n			the'),
(4660, 'relating\r\n			each'),
(4661, 'happy'),
(4662, 'motivating'),
(4663, 'widely'),
(4664, 'trusted'),
(4665, 'trusted\r\n			to'),
(4666, 'trustworthy'),
(4667, 'knows'),
(4668, 'no\r\n			trust'),
(4669, 'invested'),
(4670, 'be\r\n			an'),
(4671, 'responsive'),
(4672, 'department\r\n			or'),
(4673, 'favors'),
(4674, 'be\r\n			afraid'),
(4675, 'favor'),
(4676, 'pretend'),
(4677, 'may\r\n			have'),
(4678, 'distinction'),
(4679, '``not'),
(4680, 'head'),
(4681, 'being\r\n			able'),
(4682, '39;\r\n			\r\n		\r\n	\r\n\r\n'),
(4683, 'tradeoff'),
(4684, 'time'),
(4685, 'space'),
(4686, 'space\r\n			you'),
(4687, 'college'),
(4688, 'intermediate\r\n			programmer'),
(4689, 'computational'),
(4690, '39;``big'),
(4691, 'notation'),
(4692, 'difference'),
(4693, 'between\r\n			``constant-time'),
(4694, 'squared'),
(4695, 'intuit'),
(4696, 'time\r\n			against'),
(4697, 'absence'),
(4698, 'firm'),
(4699, 'a\r\n			function'),
(4700, 'worst/expected/\r\n			best-case'),
(4701, 'variable\r\n			n'),
(4702, 'logarithm'),
(4703, 'speaking'),
(4704, 'profound'),
(4705, 'physics---and'),
(4706, 'bit\r\n			goes'),
(4707, 'way!\r\n			\r\n			time'),
(4708, 'traded'),
(4709, 'is\r\n			about'),
(4710, 'fine'),
(4711, 'one\r\n			can'),
(4712, 'tightly'),
(4713, 'when\r\n			you'),
(4714, 'decode'),
(4715, 'store'),
(4716, 'local\r\n			copy'),
(4717, 'consistency'),
(4718, 'can\r\n			sometimes'),
(4719, 'maintaining'),
(4720, 'a\r\n			small'),
(4721, 'complicate'),
(4722, '\r\n			\r\n			improving'),
(4723, 'space/time'),
(4724, 'dramatically'),
(4725, 'that\r\n			needs'),
(4726, 'difference\r\n			and'),
(4727, '\r\n			\r\n			memory'),
(4728, 'unlike'),
(4729, 'being\r\n			used'),
(4730, 'wall;'),
(4731, 'catastrophic'),
(4732, 'to\r\n			using'),
(4733, 'effect'),
(4734, 'resident'),
(4735, 'allocate\r\n			and'),
(4736, 'small'),
(4737, 'programming'),
(4738, 'test'),
(4739, 'programmer'),
(4740, 'imported_lesson'),
(4741, 'imported_lesson'),
(4742, 'deal'),
(4743, 'with'),
(4744, 'temporary'),
(4745, 'organizational'),
(4746, 'chaos'),
(4747, 'organizational\r\n			chaos\r\n			there'),
(4748, 'brief'),
(4749, 'layoffs'),
(4750, 'buyouts'),
(4751, 'ipos'),
(4752, 'firings'),
(4753, '\r\n			new'),
(4754, 'hirings'),
(4755, 'unsettling'),
(4756, 'the\r\n			programmer'),
(4757, 'self-esteem'),
(4758, 'founded'),
(4759, 'organizational\r\n			chaos'),
(4760, 'saved'),
(4761, 'this\r\n			for'),
(4762, 'deep'),
(4763, 'tribal'),
(4764, 'secret'),
(4765, 'stop'),
(4766, '\r\n			\r\n			engineers'),
(4767, 'sustain'),
(4768, 'sustain\r\n			nothing'),
(4769, 'business\r\n			effectively'),
(4770, 'proof'),
(4771, 'organizational\r\n			mayhem'),
(4772, 'carry'),
(4773, 'if\r\n			nothing'),
(4774, 'happening'),
(4775, 'stressed-out'),
(4776, 'cube'),
(4777, 'really\r\n			sure'),
(4778, 'smile'),
(4779, 'doing\r\n			what'),
(4780, 'anybody'),
(4781, 'else\r\n			tells'),
(4782, 'or\r\n			project'),
(4783, 'deal'),
(4784, 'with'),
(4785, 'managerial'),
(4786, 'myths'),
(4787, 'myths\r\n			the'),
(4788, 'myth'),
(4789, 'fiction'),
(4790, 'deeper'),
(4791, 'connotation'),
(4792, 'story'),
(4793, 'of\r\n			religious'),
(4794, 'significance'),
(4795, 'explains'),
(4796, 'mankind'),
(4797, 'relationship'),
(4798, 'to\r\n			forget'),
(4799, 'learned'),
(4800, 'rude'),
(4801, 'unsuccessful\r\n			to'),
(4802, 'disillusion'),
(4803, 'devoutly'),
(4804, 'religious\r\n			person'),
(4805, 'myths:\r\n			\r\n			•'),
(4806, 'time\r\n			on'),
(4807, 'equated'),
(4808, 'magnitude'),
(4809, 'new\r\n			persons'),
(4810, 'taxing'),
(4811, 'reliably'),
(4812, 'metric'),
(4813, 'succinctness'),
(4814, 'no\r\n			success'),
(4815, 'damage'),
(4816, 'reputation'),
(4817, 'confronting'),
(4818, 'belligerently'),
(4819, 'these\r\n			myths'),
(4820, 'reinforces'),
(4821, 'actual'),
(4822, 'facilitate'),
(4823, 'impede'),
(4824, 'tell'),
(4825, 'people'),
(4826, 'things'),
(4827, 'they'),
(4828, 'want'),
(4829, 'hear'),
(4830, 'want\r\n			to'),
(4831, 'hear\r\n			you'),
(4832, 'telling'),
(4833, 'as\r\n			early'),
(4834, 'well-informed'),
(4835, 'second\r\n			best'),
(4836, 'appeal'),
(4837, 'gather'),
(4838, 'unpleasant'),
(4839, 'to\r\n			slip'),
(4840, 'conscientious'),
(4841, 'hates'),
(4842, 'is\r\n			nothing'),
(4843, 'postponing'),
(4844, 'slips'),
(4845, 'inform\r\n			everyone'),
(4846, 'spirit'),
(4847, 'will\r\n			want'),
(4848, 'will\r\n			have'),
(4849, 'communicate'),
(4850, 'well'),
(4851, 'well\r\n			to'),
(4852, 'made\r\n			harder'),
(4853, 'whom'),
(4854, 'flawed'),
(4855, 'speak'),
(4856, 'overworked\r\n			or'),
(4857, 'issues\r\n			you'),
(4858, 'addressing'),
(4859, 'advantages'),
(4860, 'taking'),
(4861, 'practicing'),
(4862, 'public\r\n			speaking'),
(4863, 'listening'),
(4864, 'problems\r\n			lie'),
(4865, 'survival'),
(4866, 'the\r\n			advanced'),
(4867, 'satisfaction'),
(4868, 'people\r\n			outside'),
(4869, 'interesting'),
(4870, 'initiate'),
(4871, 'proposal\r\n			of'),
(4872, 'strawman'),
(4873, 'white-paper'),
(4874, 'format'),
(4875, 'verbally'),
(4876, 'leadership'),
(4877, 'setting'),
(4878, 'debate'),
(4879, 'exposes\r\n			you'),
(4880, 'criticism'),
(4881, 'rejection'),
(4882, 'neglect'),
(4883, 'prepared\r\n			to'),
(4884, 'entrepreneurs\r\n			who'),
(4885, 'programmers\r\n			are'),
(4886, 'bridge'),
(4887, 'rests'),
(4888, 'haven'),
(4889, 'mastered'),
(4890, 'currently'),
(4891, 'fourpronged\r\n			approach:'),
(4892, '\r\n			hand'),
(4893, 'electronically'),
(4894, 'demo'),
(4895, 'then\r\n			patiently'),
(4896, 'patient'),
(4897, 'difficult\r\n			communication'),
(4898, 'disheartened'),
(4899, 'preparation'),
(4900, 'grow'),
(4901, 'system'),
(4902, 'system\r\n			the'),
(4903, 'seed'),
(4904, 'adult'),
(4905, 'realize'),
(4906, 'potency'),
(4907, 'embryo'),
(4908, 'grows'),
(4909, 'the\r\n			uses'),
(4910, 'bears'),
(4911, 'dies'),
(4912, 'feeds'),
(4913, 'organisms'),
(4914, 'treating'),
(4915, 'that;'),
(4916, 'baby\r\n			bridge'),
(4917, 'unfinished'),
(4918, 'bridges'),
(4919, 'allows'),
(4920, 'we\r\n			have'),
(4921, 'image'),
(4922, 'feedback'),
(4923, 'growth'),
(4924, '\r\n			pruning'),
(4925, 'limbs'),
(4926, 'healthful'),
(4927, 'delivered'),
(4928, 'advanced\r\n			programmer'),
(4929, 'is\r\n			your'),
(4930, 'germ'),
(4931, 'smoothly'),
(4932, 'useful\r\n			artifact'),
(4933, 'visualize'),
(4934, 'engineering\r\n			team'),
(4935, 'excited'),
(4936, 'wherever\r\n			they'),
(4937, 'leaps'),
(4938, 'alive'),
(4939, 'whole\r\n			time;'),
(4940, 'dead'),
(4941, 'resurrected'),
(4942, 'spiral'),
(4943, 'apart'),
(4944, 'to\r\n			mark'),
(4945, 'ultra-competitive'),
(4946, 'the\r\n			milestones'),
(4947, 'a\r\n			well-designed'),
(4948, 'endpoint'),
(4949, 'jobs'),
(4950, 'payoff'),
(4951, 'against\r\n			future'),
(4952, 'triple'),
(4953, '\r\n			\r\n			\r\n			a'),
(4954, 'hafernik'),
(4955, 'section'),
(4956, 'quote\r\n			in'),
(4957, 'full:\r\n			\r\n			i'),
(4958, 'under-emphasize'),
(4959, '\r\n			user'),
(4960, 'models'),
(4961, 'vital'),
(4962, 'work\r\n			on'),
(4963, 'measurable'),
(4964, 'nothing\r\n			is'),
(4965, 'horror'),
(4966, 'discovering\r\n			that'),
(4967, 'debacle'),
(4968, 'the\r\n			voter'),
(4969, 'news'),
(4970, 'nature:'),
(4971, 'no\r\n			large'),
(4972, 'scratch'),
(4973, 'evolved\r\n			from'),
(4974, 'intentional'),
(4975, 'reply'),
(4976, 'fiat'),
(4977, 'lux!\r\n			\r\n		\r\n	\r\n\r\n'),
(4978, 'gather'),
(4979, 'support'),
(4980, 'project'),
(4981, 'project\r\n			to'),
(4982, 'a\r\n			reason'),
(4983, 'individually'),
(4984, 'supporters\r\n			for'),
(4985, 'wherever'),
(4986, 'construct'),
(4987, 'prototype'),
(4988, 'a\r\n			mockup'),
(4989, 'superior\r\n			to'),
(4990, 'description'),
(4991, 'divide'),
(4992, 'problems'),
(4993, 'problems\r\n			it'),
(4994, 'without\r\n			consideration'),
(4995, 'productivity\r\n			of'),
(4996, 'varies'),
(4997, 'constantly\r\n			changes'),
(4998, '\r\n			\r\n			just'),
(4999, 'composer'),
(5000, 'timbre'),
(5001, 'instrument'),
(5002, 'coach'),
(5003, 'an\r\n			athletic'),
(5004, 'usually\r\n			be'),
(5005, 'high-performing'),
(5006, 'broken'),
(5007, 'their\r\n			strengths'),
(5008, 'a\r\n			very'),
(5009, 'overused'),
(5010, 'handle'),
(5011, 'boring'),
(5012, 'tasks'),
(5013, 'tasks\r\n			sometimes'),
(5014, 'or\r\n			the'),
(5015, 'technique\r\n			for'),
(5016, 'invoke'),
(5017, 'promote'),
(5018, 'larry'),
(5019, 'virtue'),
(5020, 'laziness'),
(5021, '\r\n			working'),
(5022, 'hand'),
(5023, 'advantage\r\n			of'),
(5024, 'educational'),
(5025, 'repeatable'),
(5026, 'apologize');
INSERT INTO `search_invertedindex` (`id`, `keyword`) VALUES
(5027, 'allow\r\n			them'),
(5028, 'alone'),
(5029, 'healthy\r\n			teamwork'),
(5030, 'choose'),
(5031, 'what'),
(5032, 'work'),
(5033, 'on\r\n			you'),
(5034, 'a\r\n			project'),
(5035, 'stretch'),
(5036, 'yourself\r\n			not'),
(5037, 'exercising'),
(5038, 'skills\r\n			are'),
(5039, 'hardest'),
(5040, 'riskiest'),
(5041, 'most'),
(5042, 'from'),
(5043, 'your'),
(5044, 'teammates'),
(5045, 'teammates\r\n			to'),
(5046, 'individual\r\n			both'),
(5047, 'challenged'),
(5048, 'corny'),
(5049, 'logoized'),
(5050, 'clothing'),
(5051, 'parties'),
(5052, 'as\r\n			personal'),
(5053, 'respects'),
(5054, 'team\r\n			spirit'),
(5055, 'sacrifices'),
(5056, 'the\r\n			team'),
(5057, 'in\r\n			this'),
(5058, 'occasionally\r\n			means'),
(5059, 'you\r\n			believe'),
(5060, 'simply\r\n			disagree'),
(5061, 'openly'),
(5062, 'sound'),
(5063, 'forced'),
(5064, '\r\n			simply'),
(5065, 'often\r\n			cause'),
(5066, 'initial'),
(5067, 'do\r\n			backtrack'),
(5068, 'consent'),
(5069, 'discussed'),
(5070, 'appropriate\r\n			sides'),
(5071, 'there\r\n			is'),
(5072, 'shown'),
(5073, 'switch'),
(5074, 'as\r\n			quickly'),
(5075, '\r\n			\r\n			ask'),
(5076, 'and\r\n			make'),
(5077, '\r\n			\r\n			praise'),
(5078, 'frequently'),
(5079, 'lavishly'),
(5080, 'praise'),
(5081, 'praiseworthy'),
(5082, 'criticize'),
(5083, 'private;'),
(5084, 'exception:'),
(5085, 'growth\r\n			or'),
(5086, 'correction'),
(5087, 'fault'),
(5088, 'praised'),
(5089, 'embarrassing'),
(5090, 'original\r\n			fault'),
(5091, 'develop'),
(5092, 'talent'),
(5093, 'talent\r\n			nietschze'),
(5094, 'exaggerated'),
(5095, 'said'),
(5096, ':\r\n			\r\n			what'),
(5097, '\r\n			\r\n			your'),
(5098, 'should\r\n			challenge'),
(5099, 'overburden'),
(5100, 'way\r\n			they'),
(5101, 'stretched'),
(5102, 'every\r\n			other'),
(5103, 'be\r\n			good'),
(5104, 'better\r\n			yet'),
(5105, 'failure\r\n			in'),
(5106, 'adventure'),
(5107, 'not\r\n			occasional'),
(5108, 'failures'),
(5109, 'gentle\r\n			as'),
(5110, 'member'),
(5111, 'well-motivated'),
(5112, 'dissatisfied'),
(5113, 'everybody'),
(5114, 'carrying'),
(5115, 'of\r\n			low'),
(5116, 'dissatisfaction'),
(5117, 'slack'),
(5118, 'well-motivated\r\n			and'),
(5119, '\r\n			fire'),
(5120, 'in\r\n			public'),
(5121, 'naturally'),
(5122, 'bothered'),
(5123, 'works\r\n			hard'),
(5124, 'reflected'),
(5125, 'salaries'),
(5126, '10\r\n			bad'),
(5127, 'faster\r\n			if'),
(5128, 'make\r\n			more'),
(5129, 'namely\r\n			the'),
(5130, 'weaker'),
(5131, 'spreading'),
(5132, 'recover\r\n			from'),
(5133, 'loss'),
(5134, 'gentle'),
(5135, 'regard'),
(5136, 'issue\r\n			from'),
(5137, 'challenging'),
(5138, 'delineated'),
(5139, 'promotion'),
(5140, 'promotion\r\n			to'),
(5141, 'promoted'),
(5142, 'title'),
(5143, 'negotiate'),
(5144, 'armed'),
(5145, 'explicitly\r\n			what'),
(5146, 'trite'),
(5147, 'perception\r\n			of'),
(5148, 'considerably'),
(5149, 'relative'),
(5150, 'abilities'),
(5151, 'ways-\r\n			--after'),
(5152, 'seriously\r\n			unappreciated'),
(5153, 'but\r\n			i'),
(5154, 'caveat:'),
(5155, 'appreciated'),
(5156, 'without\r\n			visibility'),
(5157, 'happenstance'),
(5158, 'habits'),
(5159, 'be\r\n			noticed'),
(5160, 'and\r\n			boss'),
(5161, 'understand'),
(5162, 'user'),
(5163, 'user\r\n			it'),
(5164, 'user\r\n			is'),
(5165, 'intimately'),
(5166, 'behave'),
(5167, 'differently:\r\n			\r\n			•'),
(5168, 'pronouncements'),
(5169, 'job;'),
(5170, 'not\r\n			big'),
(5171, 'better\r\n			to'),
(5172, 'proposal'),
(5173, 'about\r\n			this'),
(5174, 'guard'),
(5175, 'modesty'),
(5176, 'knowing\r\n			what'),
(5177, 'wants'),
(5178, 'market'),
(5179, 'researchers\r\n			are'),
(5180, 'harmoniously'),
(5181, 'formulating'),
(5182, 'correct\r\n			vision'),
(5183, 'be\r\n			successful'),
(5184, 'and\r\n			drink'),
(5185, '\r\n			\r\n			guy'),
(5186, 'kawasaki'),
(5187, 'emphasized'),
(5188, 'watching'),
(5189, 'addition\r\n			to'),
(5190, 'contractors'),
(5191, 'clients'),
(5192, 'clarify\r\n			in'),
(5193, 'intend'),
(5194, 'consultant'),
(5195, 'clear-headedness'),
(5196, 'pocketbooks'),
(5197, 'fight'),
(5198, 'schedule'),
(5199, 'pressure'),
(5200, 'pressure\r\n			time-to-market'),
(5201, 'deliver'),
(5202, 'reflects\r\n			a'),
(5203, 'financial'),
(5204, 'healthy'),
(5205, 'deliver\r\n			something'),
(5206, 'wasteful'),
(5207, 'unhealthy'),
(5208, '\r\n			\r\n			schedule'),
(5209, 'appreciate\r\n			what'),
(5210, 'ethic'),
(5211, 'perhaps\r\n			because'),
(5212, 'onto'),
(5213, 'sooner'),
(5214, 'make\r\n			us'),
(5215, 'produce\r\n			software'),
(5216, 'they\r\n			can'),
(5217, 'fuss'),
(5218, 'fighting'),
(5219, 'to\r\n			do'),
(5220, 'producing\r\n			an'),
(5221, 'detailed'),
(5222, 'the\r\n			best'),
(5223, 'be\r\n			made'),
(5224, 'tradeoffs'),
(5225, 'insight'),
(5226, 'plain'),
(5227, 'incompressible'),
(5228, 'fluid'),
(5229, 'pack'),
(5230, 'span'),
(5231, 'water'),
(5232, 'container\r\n			over'),
(5233, 'container'),
(5234, 'volume'),
(5235, '‘no’'),
(5236, 'rather\r\n			to'),
(5237, '‘what'),
(5238, 'want?’'),
(5239, 'estimates\r\n			will'),
(5240, 'professionals'),
(5241, '39;\r\n			hard'),
(5242, 'unrealistic'),
(5243, 'painfully'),
(5244, 'obvious'),
(5245, 'to\r\n			everyone'),
(5246, 'hoodwinked'),
(5247, 'disrespectful'),
(5248, 'demoralizing'),
(5249, 'amplifies'),
(5250, 'builds'),
(5251, 'i\r\n			hope'),
(5252, 'choosing'),
(5253, 'languages'),
(5254, '\r\n	\r\n		\r\n			\r\n			choosing'),
(5255, 'languages\r\n			the'),
(5256, 'solitary'),
(5257, 'loves'),
(5258, 'hacker'),
(5259, '\r\n			most'),
(5260, 'this\r\n			issue'),
(5261, 'pointy-haired'),
(5262, 'bosses'),
(5263, 'technological\r\n			decision'),
(5264, 'courage'),
(5265, 'unconventional'),
(5266, '\r\n			often'),
(5267, 'firsthand'),
(5268, 'unity'),
(5269, 'precludes'),
(5270, 'the\r\n			part'),
(5271, 'driven'),
(5272, 'with\r\n			experience'),
(5273, 'serving'),
(5274, 'perceive'),
(5275, 'interests\r\n			of'),
(5276, 'respected'),
(5277, 'this\r\n			the'),
(5278, 'erroneous'),
(5279, 'one-dimensional'),
(5280, 'mandated'),
(5281, 'beyond\r\n			your'),
(5282, 'different\r\n			language'),
(5283, 'embedded'),
(5284, 'choice\r\n			of'),
(5285, 'to\r\n			serve'),
(5286, 'work\r\n			more'),
(5287, 'notations'),
(5288, 'difficult\r\n			as'),
(5289, '``learning'),
(5290, '39;\r\n			seems'),
(5291, 'daunting'),
(5292, 'task;'),
(5293, 'belt'),
(5294, 'becoming\r\n			familiar'),
(5295, 'components\r\n			in'),
(5296, 'hodgepodge;'),
(5297, 'cases\r\n			stronger'),
(5298, 'one-language'),
(5299, 'ways:\r\n			\r\n			•'),
(5300, 'loose'),
(5301, 'coupling'),
(5302, 'notations\r\n			'),
(5303, 'clean'),
(5304, 'evolve'),
(5305, 'language/platform'),
(5306, 'rewriting'),
(5307, 'modules'),
(5308, '\r\n			\r\n			some'),
(5309, 'psychological;'),
(5310, 'psychology'),
(5311, 'of\r\n			language'),
(5312, 'tyranny'),
(5313, 'tell'),
(5314, 'hard'),
(5315, 'from'),
(5316, 'impossible'),
(5317, 'impossible\r\n			it'),
(5318, 'discern'),
(5319, 'working\r\n			programmers'),
(5320, 'grown'),
(5321, 'cannot\r\n			be'),
(5322, 'mere\r\n			work'),
(5323, 'facetious'),
(5324, '\r\n			either'),
(5325, 'becomes\r\n			your'),
(5326, 'gets\r\n			most'),
(5327, 'wanted'),
(5328, 'confidently'),
(5329, 'the\r\n			risks'),
(5330, 'vague'),
(5331, '‘build'),
(5332, 'compute'),
(5333, 'most\r\n			attractive'),
(5334, 'crisp'),
(5335, 'will\r\n			often'),
(5336, 'attractive'),
(5337, 'color\r\n			for'),
(5338, 'preview'),
(5339, 'based\r\n			on'),
(5340, 'styling'),
(5341, 'of\r\n			success'),
(5342, 'succeed'),
(5343, 'utilize'),
(5344, 'embedded'),
(5345, 'languages'),
(5346, 'languages\r\n			embedding'),
(5347, 'erotic'),
(5348, 'fascination'),
(5349, 'creative'),
(5350, 'acts'),
(5351, 'tremendously\r\n			powerful'),
(5352, 'promethean'),
(5353, 'system\r\n			into'),
(5354, 'friend'),
(5355, 'editors'),
(5356, 'optional'),
(5357, 'initiates'),
(5358, 'fallen'),
(5359, 'fell'),
(5360, 'embedded\r\n			languages'),
(5361, 'oneself'),
(5362, 'embedding'),
(5363, 'against\r\n			the'),
(5364, 'audience?'),
(5365, 'it\r\n			help?'),
(5366, 'applications\r\n			programmers'),
(5367, 'narrowly'),
(5368, 'used;'),
(5369, 'meshes'),
(5370, 'spend\r\n			much'),
(5371, 'existing\r\n			language'),
(5372, 'leverage'),
(5373, 'it?\r\n			\r\n		\r\n	\r\n\r\n'),
(5374, 'programmer'),
(5375, 'unknown_small'),
(5376, 'system'),
(5377, 'administrator'),
(5378, 'system'),
(5379, 'administrator'),
(5380, 'system'),
(5381, 'administrator'),
(5382, '2015/03/13'),
(5383, 'file'),
(5384, 'unknown_small'),
(5385, 'alert'),
(5386, 'alert'),
(5387, 'alert'),
(5388, '2015/03/13'),
(5389, 'file'),
(5390, 'unknown_small'),
(5391, 'alert'),
(5392, 'alert'),
(5393, 'alert'),
(5394, '2015/03/13'),
(5395, 'file'),
(5396, 'unknown_small'),
(5397, 'alert'),
(5398, 'alert'),
(5399, 'alert'),
(5400, '2015/03/13'),
(5401, 'file'),
(5402, 'unknown_small'),
(5403, '2015/03/13'),
(5404, 'file'),
(5405, 'unknown_small'),
(5406, '2015/03/13'),
(5407, 'file');

-- --------------------------------------------------------

--
-- Table structure for table `search_keywords`
--

CREATE TABLE IF NOT EXISTS `search_keywords` (
  `keyword` mediumint(8) unsigned DEFAULT NULL,
  `foreign_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `table_name` tinyint(1) NOT NULL,
  `position` tinyint(1) NOT NULL DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `search_keywords`
--

INSERT INTO `search_keywords` (`keyword`, `foreign_ID`, `table_name`, `position`) VALUES
(1, 1, 1, 0),
(2, 1, 1, 0),
(3, 1, 3, 0),
(4, 1, 3, 0),
(5, 1, 0, 0),
(6, 1, 0, 0),
(7, 1, 0, 1),
(8, 1, 0, 1),
(9, 1, 0, 1),
(10, 1, 0, 1),
(11, 1, 0, 1),
(12, 1, 0, 1),
(13, 1, 0, 1),
(14, 1, 0, 1),
(15, 1, 0, 1),
(16, 1, 0, 1),
(5, 1, 0, 1),
(6, 1, 0, 1),
(17, 1, 0, 1),
(18, 1, 0, 1),
(19, 1, 0, 1),
(20, 1, 0, 1),
(21, 1, 0, 1),
(22, 1, 0, 1),
(23, 1, 0, 1),
(24, 1, 0, 1),
(25, 1, 0, 1),
(26, 1, 0, 1),
(27, 1, 0, 1),
(28, 1, 0, 1),
(29, 1, 0, 1),
(30, 1, 0, 1),
(31, 1, 0, 1),
(32, 1, 0, 1),
(33, 1, 0, 1),
(34, 1, 0, 1),
(35, 1, 0, 1),
(36, 1, 0, 1),
(37, 1, 0, 1),
(38, 1, 0, 1),
(39, 1, 0, 1),
(40, 1, 0, 1),
(41, 1, 0, 1),
(42, 1, 0, 1),
(43, 1, 0, 1),
(44, 1, 0, 1),
(45, 1, 0, 1),
(46, 1, 0, 1),
(47, 1, 0, 1),
(48, 1, 0, 1),
(49, 1, 0, 1),
(50, 1, 0, 1),
(51, 1, 0, 1),
(52, 1, 0, 1),
(53, 1, 0, 1),
(54, 1, 0, 1),
(55, 1, 0, 1),
(56, 1, 0, 1),
(57, 1, 0, 1),
(58, 1, 0, 1),
(59, 1, 0, 1),
(60, 1, 0, 1),
(61, 1, 0, 1),
(62, 1, 0, 1),
(63, 1, 0, 1),
(64, 1, 0, 1),
(65, 1, 0, 1),
(66, 1, 0, 1),
(67, 1, 0, 1),
(68, 1, 0, 1),
(69, 1, 0, 1),
(70, 1, 0, 1),
(71, 1, 0, 1),
(72, 1, 0, 1),
(73, 1, 0, 1),
(74, 1, 0, 1),
(75, 1, 0, 1),
(76, 1, 0, 1),
(77, 1, 0, 1),
(78, 1, 0, 1),
(79, 1, 0, 1),
(80, 1, 0, 1),
(81, 1, 0, 1),
(82, 1, 0, 1),
(83, 1, 0, 1),
(84, 1, 0, 1),
(85, 1, 0, 1),
(86, 1, 0, 1),
(87, 1, 0, 1),
(88, 1, 0, 1),
(89, 1, 0, 1),
(90, 1, 0, 1),
(91, 1, 0, 1),
(92, 1, 0, 1),
(93, 1, 0, 1),
(94, 1, 0, 1),
(95, 1, 0, 1),
(96, 1, 0, 1),
(97, 1, 0, 1),
(98, 1, 0, 1),
(99, 1, 0, 1),
(100, 1, 0, 1),
(101, 1, 0, 1),
(102, 1, 0, 1),
(103, 1, 0, 1),
(104, 1, 0, 1),
(105, 1, 0, 1),
(106, 1, 0, 1),
(107, 2, 0, 0),
(108, 2, 0, 0),
(109, 2, 0, 0),
(110, 3, 0, 0),
(111, 3, 0, 0),
(112, 3, 0, 0),
(113, 3, 0, 1),
(111, 3, 0, 1),
(10, 3, 0, 1),
(114, 3, 0, 1),
(115, 3, 0, 1),
(6, 3, 0, 1),
(116, 3, 0, 1),
(117, 3, 0, 1),
(118, 3, 0, 1),
(119, 3, 0, 1),
(120, 3, 0, 1),
(121, 3, 0, 1),
(49, 3, 0, 1),
(122, 3, 0, 1),
(123, 3, 0, 1),
(124, 3, 0, 1),
(125, 3, 0, 1),
(126, 3, 0, 1),
(71, 3, 0, 1),
(127, 3, 0, 1),
(128, 3, 0, 1),
(65, 3, 0, 1),
(129, 3, 0, 1),
(130, 3, 0, 1),
(32, 3, 0, 1),
(131, 3, 0, 1),
(56, 3, 0, 1),
(132, 3, 0, 1),
(133, 3, 0, 1),
(134, 3, 0, 1),
(40, 3, 0, 1),
(135, 3, 0, 1),
(136, 3, 0, 1),
(137, 3, 0, 1),
(138, 3, 0, 1),
(139, 3, 0, 1),
(140, 3, 0, 1),
(141, 3, 0, 1),
(142, 3, 0, 1),
(48, 3, 0, 1),
(45, 3, 0, 1),
(143, 3, 0, 1),
(144, 3, 0, 1),
(145, 3, 0, 1),
(12, 3, 0, 1),
(146, 3, 0, 1),
(147, 3, 0, 1),
(148, 3, 0, 1),
(149, 3, 0, 1),
(150, 3, 0, 1),
(151, 3, 0, 1),
(27, 3, 0, 1),
(152, 3, 0, 1),
(153, 3, 0, 1),
(154, 3, 0, 1),
(155, 3, 0, 1),
(156, 3, 0, 1),
(157, 3, 0, 1),
(158, 3, 0, 1),
(159, 3, 0, 1),
(30, 3, 0, 1),
(160, 3, 0, 1),
(161, 3, 0, 1),
(95, 3, 0, 1),
(162, 3, 0, 1),
(163, 3, 0, 1),
(164, 3, 0, 1),
(165, 3, 0, 1),
(166, 3, 0, 1),
(167, 3, 0, 1),
(168, 3, 0, 1),
(44, 3, 0, 1),
(169, 3, 0, 1),
(170, 3, 0, 1),
(171, 3, 0, 1),
(74, 3, 0, 1),
(172, 3, 0, 1),
(173, 3, 0, 1),
(174, 3, 0, 1),
(175, 3, 0, 1),
(92, 3, 0, 1),
(176, 3, 0, 1),
(177, 3, 0, 1),
(178, 3, 0, 1),
(179, 3, 0, 1),
(180, 3, 0, 1),
(181, 3, 0, 1),
(182, 3, 0, 1),
(183, 3, 0, 1),
(184, 3, 0, 1),
(185, 3, 0, 1),
(186, 3, 0, 1),
(23, 3, 0, 1),
(94, 3, 0, 1),
(187, 3, 0, 1),
(9, 3, 0, 1),
(188, 3, 0, 1),
(189, 3, 0, 1),
(190, 3, 0, 1),
(191, 3, 0, 1),
(28, 3, 0, 1),
(192, 3, 0, 1),
(193, 3, 0, 1),
(194, 3, 0, 1),
(195, 3, 0, 1),
(86, 3, 0, 1),
(196, 3, 0, 1),
(197, 3, 0, 1),
(198, 3, 0, 1),
(199, 3, 0, 1),
(200, 3, 0, 1),
(201, 3, 0, 1),
(202, 3, 0, 1),
(1, 3, 0, 1),
(203, 3, 0, 1),
(204, 3, 0, 1),
(205, 3, 0, 1),
(206, 3, 0, 1),
(26, 3, 0, 1),
(207, 3, 0, 1),
(208, 3, 0, 1),
(209, 3, 0, 1),
(210, 3, 0, 1),
(211, 4, 0, 0),
(212, 4, 0, 0),
(213, 4, 0, 1),
(214, 4, 0, 1),
(43, 4, 0, 1),
(36, 4, 0, 1),
(215, 4, 0, 1),
(216, 4, 0, 1),
(217, 4, 0, 1),
(218, 4, 0, 1),
(219, 4, 0, 1),
(220, 4, 0, 1),
(221, 4, 0, 1),
(222, 4, 0, 1),
(6, 4, 0, 1),
(223, 4, 0, 1),
(224, 4, 0, 1),
(9, 4, 0, 1),
(225, 4, 0, 1),
(28, 4, 0, 1),
(56, 4, 0, 1),
(46, 4, 0, 1),
(226, 4, 0, 1),
(227, 4, 0, 1),
(228, 4, 0, 1),
(229, 4, 0, 1),
(230, 4, 0, 1),
(166, 4, 0, 1),
(231, 4, 0, 1),
(232, 4, 0, 1),
(233, 4, 0, 1),
(21, 4, 0, 1),
(234, 4, 0, 1),
(235, 4, 0, 1),
(236, 4, 0, 1),
(237, 4, 0, 1),
(14, 4, 0, 1),
(37, 4, 0, 1),
(45, 4, 0, 1),
(238, 4, 0, 1),
(239, 4, 0, 1),
(163, 4, 0, 1),
(240, 4, 0, 1),
(165, 4, 0, 1),
(241, 4, 0, 1),
(242, 4, 0, 1),
(243, 4, 0, 1),
(172, 4, 0, 1),
(244, 4, 0, 1),
(74, 4, 0, 1),
(75, 4, 0, 1),
(245, 4, 0, 1),
(147, 4, 0, 1),
(246, 4, 0, 1),
(247, 4, 0, 1),
(248, 5, 0, 0),
(249, 5, 0, 1),
(248, 5, 0, 1),
(250, 5, 0, 1),
(251, 5, 0, 1),
(159, 5, 0, 1),
(252, 5, 0, 1),
(139, 5, 0, 1),
(154, 5, 0, 1),
(192, 5, 0, 1),
(71, 5, 0, 1),
(253, 5, 0, 1),
(254, 5, 0, 1),
(255, 5, 0, 1),
(256, 5, 0, 1),
(257, 5, 0, 1),
(258, 5, 0, 1),
(148, 5, 0, 1),
(259, 5, 0, 1),
(201, 5, 0, 1),
(260, 5, 0, 1),
(41, 5, 0, 1),
(261, 5, 0, 1),
(56, 5, 0, 1),
(123, 5, 0, 1),
(262, 5, 0, 1),
(45, 5, 0, 1),
(27, 5, 0, 1),
(263, 5, 0, 1),
(264, 5, 0, 1),
(265, 5, 0, 1),
(266, 5, 0, 1),
(267, 5, 0, 1),
(268, 5, 0, 1),
(269, 5, 0, 1),
(9, 5, 0, 1),
(270, 5, 0, 1),
(179, 5, 0, 1),
(271, 5, 0, 1),
(272, 5, 0, 1),
(273, 5, 0, 1),
(93, 5, 0, 1),
(197, 5, 0, 1),
(94, 5, 0, 1),
(274, 5, 0, 1),
(275, 5, 0, 1),
(276, 5, 0, 1),
(277, 5, 0, 1),
(278, 5, 0, 1),
(279, 5, 0, 1),
(280, 5, 0, 1),
(219, 5, 0, 1),
(281, 5, 0, 1),
(282, 5, 0, 1),
(283, 5, 0, 1),
(284, 5, 0, 1),
(285, 5, 0, 1),
(286, 5, 0, 1),
(183, 5, 0, 1),
(287, 5, 0, 1),
(226, 5, 0, 1),
(75, 5, 0, 1),
(288, 5, 0, 1),
(289, 5, 0, 1),
(290, 5, 0, 1),
(291, 5, 0, 1),
(198, 5, 0, 1),
(292, 5, 0, 1),
(39, 5, 0, 1),
(293, 5, 0, 1),
(294, 5, 0, 1),
(122, 5, 0, 1),
(295, 5, 0, 1),
(296, 5, 0, 1),
(297, 5, 0, 1),
(298, 5, 0, 1),
(299, 5, 0, 1),
(300, 5, 0, 1),
(301, 5, 0, 1),
(302, 5, 0, 1),
(303, 5, 0, 1),
(304, 5, 0, 1),
(305, 5, 0, 1),
(306, 5, 0, 1),
(307, 5, 0, 1),
(308, 5, 0, 1),
(309, 5, 0, 1),
(310, 5, 0, 1),
(311, 5, 0, 1),
(312, 5, 0, 1),
(236, 5, 0, 1),
(313, 5, 0, 1),
(10, 5, 0, 1),
(314, 5, 0, 1),
(315, 5, 0, 1),
(74, 5, 0, 1),
(316, 5, 0, 1),
(23, 5, 0, 1),
(317, 5, 0, 1),
(58, 5, 0, 1),
(140, 5, 0, 1),
(318, 5, 0, 1),
(319, 5, 0, 1),
(320, 5, 0, 1),
(321, 5, 0, 1),
(322, 5, 0, 1),
(193, 5, 0, 1),
(323, 5, 0, 1),
(324, 5, 0, 1),
(325, 5, 0, 1),
(326, 5, 0, 1),
(161, 5, 0, 1),
(327, 5, 0, 1),
(328, 5, 0, 1),
(329, 5, 0, 1),
(330, 5, 0, 1),
(331, 5, 0, 1),
(332, 5, 0, 1),
(333, 5, 0, 1),
(334, 5, 0, 1),
(33, 5, 0, 1),
(335, 5, 0, 1),
(6, 5, 0, 1),
(336, 5, 0, 1),
(337, 5, 0, 1),
(131, 5, 0, 1),
(338, 5, 0, 1),
(168, 5, 0, 1),
(339, 5, 0, 1),
(340, 5, 0, 1),
(78, 5, 0, 1),
(341, 5, 0, 1),
(163, 5, 0, 1),
(342, 5, 0, 1),
(150, 5, 0, 1),
(343, 5, 0, 1),
(344, 5, 0, 1),
(345, 5, 0, 1),
(346, 5, 0, 1),
(181, 5, 0, 1),
(347, 5, 0, 1),
(191, 5, 0, 1),
(348, 5, 0, 1),
(349, 5, 0, 1),
(350, 5, 0, 1),
(351, 5, 0, 1),
(352, 5, 0, 1),
(353, 5, 0, 1),
(354, 5, 0, 1),
(355, 5, 0, 1),
(356, 5, 0, 1),
(357, 5, 0, 1),
(98, 5, 0, 1),
(358, 5, 0, 1),
(359, 5, 0, 1),
(360, 5, 0, 1),
(361, 5, 0, 1),
(145, 5, 0, 1),
(362, 5, 0, 1),
(79, 5, 0, 1),
(363, 5, 0, 1),
(364, 5, 0, 1),
(365, 5, 0, 1),
(366, 5, 0, 1),
(367, 5, 0, 1),
(368, 5, 0, 1),
(369, 5, 0, 1),
(370, 5, 0, 1),
(371, 5, 0, 1),
(19, 5, 0, 1),
(372, 5, 0, 1),
(373, 5, 0, 1),
(374, 5, 0, 1),
(375, 5, 0, 1),
(376, 5, 0, 1),
(205, 5, 0, 1),
(377, 5, 0, 1),
(378, 5, 0, 1),
(379, 5, 0, 1),
(224, 5, 0, 1),
(380, 5, 0, 1),
(381, 5, 0, 1),
(382, 6, 0, 0),
(383, 6, 0, 0),
(384, 6, 0, 1),
(385, 6, 0, 1),
(6, 6, 0, 1),
(185, 6, 0, 1),
(13, 6, 0, 1),
(40, 6, 0, 1),
(386, 6, 0, 1),
(147, 6, 0, 1),
(151, 6, 0, 1),
(45, 6, 0, 1),
(74, 6, 0, 1),
(387, 6, 0, 1),
(148, 6, 0, 1),
(323, 6, 0, 1),
(388, 6, 0, 1),
(389, 6, 0, 1),
(93, 6, 0, 1),
(25, 6, 0, 1),
(256, 6, 0, 1),
(390, 6, 0, 1),
(56, 6, 0, 1),
(46, 6, 0, 1),
(65, 6, 0, 1),
(391, 6, 0, 1),
(392, 6, 0, 1),
(228, 6, 0, 1),
(274, 6, 0, 1),
(69, 6, 0, 1),
(183, 6, 0, 1),
(197, 6, 0, 1),
(393, 6, 0, 1),
(394, 6, 0, 1),
(395, 6, 0, 1),
(181, 6, 0, 1),
(396, 6, 0, 1),
(132, 6, 0, 1),
(397, 6, 0, 1),
(398, 6, 0, 1),
(230, 6, 0, 1),
(399, 6, 0, 1),
(9, 6, 0, 1),
(251, 6, 0, 1),
(400, 6, 0, 1),
(308, 6, 0, 1),
(198, 6, 0, 1),
(199, 6, 0, 1),
(18, 6, 0, 1),
(19, 6, 0, 1),
(401, 6, 0, 1),
(402, 6, 0, 1),
(39, 6, 0, 1),
(28, 6, 0, 1),
(403, 6, 0, 1),
(21, 6, 0, 1),
(31, 6, 0, 1),
(80, 6, 0, 1),
(94, 6, 0, 1),
(32, 6, 0, 1),
(366, 6, 0, 1),
(63, 6, 0, 1),
(404, 6, 0, 1),
(405, 6, 0, 1),
(191, 6, 0, 1),
(296, 6, 0, 1),
(288, 6, 0, 1),
(253, 6, 0, 1),
(159, 6, 0, 1),
(406, 6, 0, 1),
(407, 6, 0, 1),
(408, 6, 0, 1),
(409, 6, 0, 1),
(410, 6, 0, 1),
(411, 6, 0, 1),
(382, 6, 0, 1),
(412, 6, 0, 1),
(413, 6, 0, 1),
(414, 6, 0, 1),
(415, 6, 0, 1),
(416, 6, 0, 1),
(344, 6, 0, 1),
(417, 6, 0, 1),
(418, 6, 0, 1),
(419, 6, 0, 1),
(420, 6, 0, 1),
(421, 6, 0, 1),
(16, 6, 0, 1),
(422, 6, 0, 1),
(423, 6, 0, 1),
(163, 6, 0, 1),
(424, 6, 0, 1),
(222, 6, 0, 1),
(271, 6, 0, 1),
(425, 6, 0, 1),
(426, 6, 0, 1),
(119, 6, 0, 1),
(12, 6, 0, 1),
(427, 6, 0, 1),
(428, 6, 0, 1),
(429, 6, 0, 1),
(78, 6, 0, 1),
(79, 6, 0, 1),
(66, 6, 0, 1),
(430, 6, 0, 1),
(105, 6, 0, 1),
(186, 6, 0, 1),
(431, 6, 0, 1),
(432, 6, 0, 1),
(433, 6, 0, 1),
(26, 6, 0, 1),
(201, 6, 0, 1),
(145, 6, 0, 1),
(123, 6, 0, 1),
(434, 6, 0, 1),
(435, 6, 0, 1),
(282, 6, 0, 1),
(436, 6, 0, 1),
(205, 6, 0, 1),
(437, 6, 0, 1),
(247, 6, 0, 1),
(438, 7, 0, 0),
(439, 7, 0, 0),
(440, 7, 0, 1),
(441, 7, 0, 1),
(40, 7, 0, 1),
(31, 7, 0, 1),
(93, 7, 0, 1),
(442, 7, 0, 1),
(56, 7, 0, 1),
(443, 7, 0, 1),
(296, 7, 0, 1),
(136, 7, 0, 1),
(13, 7, 0, 1),
(32, 7, 0, 1),
(27, 7, 0, 1),
(165, 7, 0, 1),
(163, 7, 0, 1),
(12, 7, 0, 1),
(9, 7, 0, 1),
(49, 7, 0, 1),
(444, 7, 0, 1),
(218, 7, 0, 1),
(230, 7, 0, 1),
(98, 7, 0, 1),
(2, 7, 0, 1),
(150, 7, 0, 1),
(445, 7, 0, 1),
(1, 7, 0, 1),
(250, 7, 0, 1),
(446, 7, 0, 1),
(407, 7, 0, 1),
(408, 7, 0, 1),
(447, 7, 0, 1),
(210, 7, 0, 1),
(448, 8, 0, 0),
(449, 8, 0, 0),
(450, 8, 0, 1),
(451, 8, 0, 1),
(452, 8, 0, 1),
(115, 8, 0, 1),
(215, 8, 0, 1),
(2, 8, 0, 1),
(56, 8, 0, 1),
(30, 8, 0, 1),
(154, 8, 0, 1),
(136, 8, 0, 1),
(139, 8, 0, 1),
(453, 8, 0, 1),
(454, 8, 0, 1),
(455, 8, 0, 1),
(45, 8, 0, 1),
(186, 8, 0, 1),
(94, 8, 0, 1),
(80, 8, 0, 1),
(456, 8, 0, 1),
(132, 8, 0, 1),
(457, 8, 0, 1),
(458, 8, 0, 1),
(161, 8, 0, 1),
(459, 8, 0, 1),
(23, 8, 0, 1),
(460, 8, 0, 1),
(461, 8, 0, 1),
(285, 8, 0, 1),
(462, 8, 0, 1),
(463, 8, 0, 1),
(6, 8, 0, 1),
(325, 8, 0, 1),
(49, 8, 0, 1),
(464, 8, 0, 1),
(9, 8, 0, 1),
(465, 8, 0, 1),
(250, 8, 0, 1),
(32, 8, 0, 1),
(119, 8, 0, 1),
(447, 8, 0, 1),
(145, 8, 0, 1),
(466, 8, 0, 1),
(143, 8, 0, 1),
(467, 8, 0, 1),
(468, 8, 0, 1),
(256, 8, 0, 1),
(469, 8, 0, 1),
(391, 8, 0, 1),
(10, 8, 0, 1),
(147, 8, 0, 1),
(470, 8, 0, 1),
(210, 8, 0, 1),
(471, 9, 0, 0),
(472, 9, 0, 0),
(473, 9, 0, 1),
(474, 9, 0, 1),
(323, 9, 0, 1),
(107, 9, 0, 1),
(10, 9, 0, 1),
(475, 9, 0, 1),
(419, 9, 0, 1),
(1, 9, 0, 1),
(250, 9, 0, 1),
(45, 9, 0, 1),
(476, 9, 0, 1),
(477, 9, 0, 1),
(186, 9, 0, 1),
(23, 9, 0, 1),
(478, 9, 0, 1),
(479, 9, 0, 1),
(480, 9, 0, 1),
(73, 9, 0, 1),
(481, 9, 0, 1),
(127, 9, 0, 1),
(74, 9, 0, 1),
(378, 9, 0, 1),
(154, 9, 0, 1),
(482, 9, 0, 1),
(408, 9, 0, 1),
(483, 9, 0, 1),
(484, 9, 0, 1),
(485, 9, 0, 1),
(486, 9, 0, 1),
(190, 9, 0, 1),
(130, 9, 0, 1),
(32, 9, 0, 1),
(201, 9, 0, 1),
(487, 9, 0, 1),
(488, 9, 0, 1),
(80, 9, 0, 1),
(224, 9, 0, 1),
(453, 9, 0, 1),
(71, 9, 0, 1),
(489, 9, 0, 1),
(99, 9, 0, 1),
(56, 9, 0, 1),
(490, 9, 0, 1),
(9, 9, 0, 1),
(63, 9, 0, 1),
(491, 9, 0, 1),
(492, 9, 0, 1),
(493, 9, 0, 1),
(494, 9, 0, 1),
(215, 9, 0, 1),
(495, 9, 0, 1),
(496, 9, 0, 1),
(362, 9, 0, 1),
(497, 9, 0, 1),
(498, 9, 0, 1),
(499, 9, 0, 1),
(500, 9, 0, 1),
(92, 9, 0, 1),
(501, 9, 0, 1),
(325, 9, 0, 1),
(502, 9, 0, 1),
(503, 9, 0, 1),
(504, 9, 0, 1),
(505, 9, 0, 1),
(506, 9, 0, 1),
(507, 9, 0, 1),
(49, 9, 0, 1),
(218, 9, 0, 1),
(508, 9, 0, 1),
(509, 9, 0, 1),
(22, 9, 0, 1),
(510, 9, 0, 1),
(139, 9, 0, 1),
(138, 9, 0, 1),
(69, 9, 0, 1),
(123, 9, 0, 1),
(511, 9, 0, 1),
(94, 9, 0, 1),
(89, 9, 0, 1),
(335, 9, 0, 1),
(363, 9, 0, 1),
(168, 9, 0, 1),
(512, 9, 0, 1),
(140, 9, 0, 1),
(12, 9, 0, 1),
(13, 9, 0, 1),
(150, 9, 0, 1),
(513, 9, 0, 1),
(14, 9, 0, 1),
(514, 9, 0, 1),
(147, 9, 0, 1),
(151, 9, 0, 1),
(515, 9, 0, 1),
(183, 9, 0, 1),
(46, 9, 0, 1),
(516, 9, 0, 1),
(31, 9, 0, 1),
(517, 9, 0, 1),
(136, 9, 0, 1),
(518, 9, 0, 1),
(519, 9, 0, 1),
(520, 9, 0, 1),
(521, 9, 0, 1),
(70, 9, 0, 1),
(285, 9, 0, 1),
(286, 9, 0, 1),
(522, 9, 0, 1),
(523, 9, 0, 1),
(195, 9, 0, 1),
(524, 9, 0, 1),
(525, 9, 0, 1),
(526, 9, 0, 1),
(527, 9, 0, 1),
(528, 9, 0, 1),
(319, 9, 0, 1),
(193, 9, 0, 1),
(331, 9, 0, 1),
(529, 9, 0, 1),
(530, 9, 0, 1),
(163, 9, 0, 1),
(47, 9, 0, 1),
(52, 9, 0, 1),
(76, 9, 0, 1),
(82, 9, 0, 1),
(6, 9, 0, 1),
(531, 9, 0, 1),
(532, 9, 0, 1),
(533, 9, 0, 1),
(406, 9, 0, 1),
(534, 9, 0, 1),
(172, 9, 0, 1),
(198, 9, 0, 1),
(254, 9, 0, 1),
(65, 9, 0, 1),
(535, 9, 0, 1),
(536, 9, 0, 1),
(237, 9, 0, 1),
(537, 9, 0, 1),
(538, 9, 0, 1),
(166, 9, 0, 1),
(539, 9, 0, 1),
(131, 9, 0, 1),
(210, 9, 0, 1),
(540, 10, 0, 0),
(541, 10, 0, 0),
(542, 10, 0, 1),
(543, 10, 0, 1),
(21, 10, 0, 1),
(423, 10, 0, 1),
(202, 10, 0, 1),
(544, 10, 0, 1),
(143, 10, 0, 1),
(56, 10, 0, 1),
(545, 10, 0, 1),
(546, 10, 0, 1),
(9, 10, 0, 1),
(266, 10, 0, 1),
(193, 10, 0, 1),
(547, 10, 0, 1),
(230, 10, 0, 1),
(83, 10, 0, 1),
(32, 10, 0, 1),
(548, 10, 0, 1),
(549, 10, 0, 1),
(550, 10, 0, 1),
(46, 10, 0, 1),
(432, 10, 0, 1),
(94, 10, 0, 1),
(551, 10, 0, 1),
(552, 10, 0, 1),
(553, 10, 0, 1),
(16, 10, 0, 1),
(554, 10, 0, 1),
(555, 10, 0, 1),
(275, 10, 0, 1),
(78, 10, 0, 1),
(79, 10, 0, 1),
(525, 10, 0, 1),
(556, 10, 0, 1),
(557, 10, 0, 1),
(558, 10, 0, 1),
(421, 10, 0, 1),
(362, 10, 0, 1),
(405, 10, 0, 1),
(163, 10, 0, 1),
(75, 10, 0, 1),
(45, 10, 0, 1),
(454, 10, 0, 1),
(505, 10, 0, 1),
(74, 10, 0, 1),
(559, 10, 0, 1),
(222, 10, 0, 1),
(6, 10, 0, 1),
(258, 10, 0, 1),
(560, 10, 0, 1),
(168, 10, 0, 1),
(255, 10, 0, 1),
(561, 10, 0, 1),
(429, 10, 0, 1),
(562, 10, 0, 1),
(238, 10, 0, 1),
(348, 10, 0, 1),
(226, 10, 0, 1),
(27, 10, 0, 1),
(563, 10, 0, 1),
(73, 10, 0, 1),
(224, 10, 0, 1),
(1, 10, 0, 1),
(250, 10, 0, 1),
(136, 10, 0, 1),
(392, 10, 0, 1),
(359, 10, 0, 1),
(240, 10, 0, 1),
(12, 10, 0, 1),
(40, 10, 0, 1),
(69, 10, 0, 1),
(239, 10, 0, 1),
(564, 10, 0, 1),
(565, 10, 0, 1),
(150, 10, 0, 1),
(566, 10, 0, 1),
(117, 10, 0, 1),
(567, 10, 0, 1),
(568, 10, 0, 1),
(569, 10, 0, 1),
(285, 10, 0, 1),
(286, 10, 0, 1),
(98, 10, 0, 1),
(570, 10, 0, 1),
(571, 10, 0, 1),
(572, 10, 0, 1),
(573, 11, 0, 0),
(574, 11, 0, 0),
(575, 11, 0, 1),
(576, 11, 0, 1),
(573, 11, 0, 1),
(6, 11, 0, 1),
(577, 11, 0, 1),
(163, 11, 0, 1),
(578, 11, 0, 1),
(56, 11, 0, 1),
(529, 11, 0, 1),
(579, 11, 0, 1),
(127, 11, 0, 1),
(160, 11, 0, 1),
(275, 11, 0, 1),
(65, 11, 0, 1),
(75, 11, 0, 1),
(580, 11, 0, 1),
(581, 11, 0, 1),
(74, 11, 0, 1),
(172, 11, 0, 1),
(582, 11, 0, 1),
(9, 11, 0, 1),
(405, 11, 0, 1),
(488, 11, 0, 1),
(456, 11, 0, 1),
(162, 11, 0, 1),
(583, 11, 0, 1),
(401, 11, 0, 1),
(464, 11, 0, 1),
(12, 11, 0, 1),
(584, 11, 0, 1),
(240, 11, 0, 1),
(396, 11, 0, 1),
(165, 11, 0, 1),
(40, 11, 0, 1),
(46, 11, 0, 1),
(45, 11, 0, 1),
(325, 11, 0, 1),
(84, 11, 0, 1),
(1, 11, 0, 1),
(585, 11, 0, 1),
(202, 11, 0, 1),
(490, 11, 0, 1),
(278, 11, 0, 1),
(331, 11, 0, 1),
(323, 11, 0, 1),
(254, 11, 0, 1),
(257, 11, 0, 1),
(586, 11, 0, 1),
(39, 11, 0, 1),
(156, 11, 0, 1),
(265, 11, 0, 1),
(587, 11, 0, 1),
(94, 11, 0, 1),
(588, 11, 0, 1),
(589, 11, 0, 1),
(191, 11, 0, 1),
(143, 11, 0, 1),
(359, 11, 0, 1),
(590, 11, 0, 1),
(591, 11, 0, 1),
(592, 11, 0, 1),
(593, 11, 0, 1),
(247, 11, 0, 1),
(594, 12, 0, 0),
(595, 12, 0, 1),
(9, 12, 0, 1),
(596, 12, 0, 1),
(597, 12, 0, 1),
(107, 12, 0, 1),
(447, 12, 0, 1),
(56, 12, 0, 1),
(121, 12, 0, 1),
(598, 12, 0, 1),
(599, 12, 0, 1),
(41, 12, 0, 1),
(120, 12, 0, 1),
(192, 12, 0, 1),
(148, 12, 0, 1),
(139, 12, 0, 1),
(154, 12, 0, 1),
(326, 12, 0, 1),
(600, 12, 0, 1),
(45, 12, 0, 1),
(601, 12, 0, 1),
(602, 12, 0, 1),
(433, 12, 0, 1),
(553, 12, 0, 1),
(196, 12, 0, 1),
(30, 12, 0, 1),
(603, 12, 0, 1),
(268, 12, 0, 1),
(357, 12, 0, 1),
(361, 12, 0, 1),
(403, 12, 0, 1),
(168, 12, 0, 1),
(604, 12, 0, 1),
(605, 12, 0, 1),
(606, 12, 0, 1),
(607, 12, 0, 1),
(145, 12, 0, 1),
(186, 12, 0, 1),
(608, 12, 0, 1),
(609, 12, 0, 1),
(610, 12, 0, 1),
(611, 12, 0, 1),
(256, 12, 0, 1),
(612, 12, 0, 1),
(613, 12, 0, 1),
(614, 12, 0, 1),
(615, 12, 0, 1),
(559, 12, 0, 1),
(195, 12, 0, 1),
(616, 12, 0, 1),
(617, 12, 0, 1),
(174, 12, 0, 1),
(618, 12, 0, 1),
(92, 12, 0, 1),
(176, 12, 0, 1),
(619, 12, 0, 1),
(620, 12, 0, 1),
(10, 12, 0, 1),
(621, 12, 0, 1),
(622, 12, 0, 1),
(27, 12, 0, 1),
(183, 12, 0, 1),
(623, 12, 0, 1),
(199, 12, 0, 1),
(80, 12, 0, 1),
(563, 12, 0, 1),
(624, 12, 0, 1),
(625, 12, 0, 1),
(626, 12, 0, 1),
(627, 12, 0, 1),
(546, 12, 0, 1),
(628, 12, 0, 1),
(127, 12, 0, 1),
(23, 12, 0, 1),
(40, 12, 0, 1),
(629, 12, 0, 1),
(122, 12, 0, 1),
(477, 12, 0, 1),
(456, 12, 0, 1),
(630, 12, 0, 1),
(12, 12, 0, 1),
(94, 12, 0, 1),
(150, 12, 0, 1),
(274, 12, 0, 1),
(11, 12, 0, 1),
(631, 12, 0, 1),
(210, 12, 0, 1),
(632, 13, 0, 0),
(633, 13, 0, 0),
(634, 13, 0, 0),
(635, 13, 0, 1),
(633, 13, 0, 1),
(634, 13, 0, 1),
(636, 13, 0, 1),
(250, 13, 0, 1),
(637, 13, 0, 1),
(145, 13, 0, 1),
(608, 13, 0, 1),
(192, 13, 0, 1),
(186, 13, 0, 1),
(23, 13, 0, 1),
(638, 13, 0, 1),
(326, 13, 0, 1),
(148, 13, 0, 1),
(496, 13, 0, 1),
(98, 13, 0, 1),
(9, 13, 0, 1),
(629, 13, 0, 1),
(74, 13, 0, 1),
(639, 13, 0, 1),
(172, 13, 0, 1),
(253, 13, 0, 1),
(640, 13, 0, 1),
(478, 13, 0, 1),
(641, 13, 0, 1),
(642, 13, 0, 1),
(643, 13, 0, 1),
(362, 13, 0, 1),
(191, 13, 0, 1),
(166, 13, 0, 1),
(644, 13, 0, 1),
(209, 13, 0, 1),
(335, 13, 0, 1),
(361, 13, 0, 1),
(254, 13, 0, 1),
(1, 13, 0, 1),
(56, 13, 0, 1),
(645, 13, 0, 1),
(646, 13, 0, 1),
(258, 13, 0, 1),
(402, 13, 0, 1),
(39, 13, 0, 1),
(447, 13, 0, 1),
(415, 13, 0, 1),
(139, 13, 0, 1),
(647, 13, 0, 1),
(45, 13, 0, 1),
(648, 13, 0, 1),
(205, 13, 0, 1),
(649, 13, 0, 1),
(650, 13, 0, 1),
(288, 13, 0, 1),
(10, 13, 0, 1),
(456, 13, 0, 1),
(651, 13, 0, 1),
(652, 13, 0, 1),
(227, 13, 0, 1),
(551, 13, 0, 1),
(653, 13, 0, 1),
(327, 13, 0, 1),
(121, 13, 0, 1),
(374, 13, 0, 1),
(654, 13, 0, 1),
(655, 13, 0, 1),
(656, 13, 0, 1),
(218, 13, 0, 1),
(117, 13, 0, 1),
(21, 13, 0, 1),
(168, 13, 0, 1),
(491, 13, 0, 1),
(657, 13, 0, 1),
(658, 13, 0, 1),
(516, 13, 0, 1),
(659, 13, 0, 1),
(660, 13, 0, 1),
(661, 13, 0, 1),
(128, 13, 0, 1),
(582, 13, 0, 1),
(515, 13, 0, 1),
(662, 13, 0, 1),
(663, 13, 0, 1),
(73, 13, 0, 1),
(664, 13, 0, 1),
(665, 13, 0, 1),
(553, 13, 0, 1),
(72, 13, 0, 1),
(666, 13, 0, 1),
(667, 13, 0, 1),
(668, 13, 0, 1),
(669, 13, 0, 1),
(163, 13, 0, 1),
(165, 13, 0, 1),
(670, 13, 0, 1),
(671, 13, 0, 1),
(32, 13, 0, 1),
(63, 13, 0, 1),
(672, 13, 0, 1),
(174, 13, 0, 1),
(673, 13, 0, 1),
(674, 13, 0, 1),
(675, 13, 0, 1),
(676, 13, 0, 1),
(27, 13, 0, 1),
(30, 13, 0, 1),
(677, 13, 0, 1),
(401, 13, 0, 1),
(40, 13, 0, 1),
(678, 13, 0, 1),
(210, 13, 0, 1),
(679, 14, 0, 0),
(680, 14, 0, 0),
(681, 14, 0, 0),
(682, 14, 0, 1),
(680, 14, 0, 1),
(683, 14, 0, 1),
(92, 14, 0, 1),
(433, 14, 0, 1),
(684, 14, 0, 1),
(56, 14, 0, 1),
(1, 14, 0, 1),
(447, 14, 0, 1),
(200, 14, 0, 1),
(186, 14, 0, 1),
(23, 14, 0, 1),
(297, 14, 0, 1),
(41, 14, 0, 1),
(10, 14, 0, 1),
(685, 14, 0, 1),
(140, 14, 0, 1),
(127, 14, 0, 1),
(160, 14, 0, 1),
(553, 14, 0, 1),
(27, 14, 0, 1),
(686, 14, 0, 1),
(687, 14, 0, 1),
(688, 14, 0, 1),
(148, 14, 0, 1),
(73, 14, 0, 1),
(675, 14, 0, 1),
(629, 14, 0, 1),
(689, 14, 0, 1),
(65, 14, 0, 1),
(690, 14, 0, 1),
(262, 14, 0, 1),
(255, 14, 0, 1),
(691, 14, 0, 1),
(559, 14, 0, 1),
(131, 14, 0, 1),
(164, 14, 0, 1),
(692, 14, 0, 1),
(494, 14, 0, 1),
(143, 14, 0, 1),
(693, 14, 0, 1),
(443, 14, 0, 1),
(694, 14, 0, 1),
(695, 14, 0, 1),
(696, 14, 0, 1),
(697, 14, 0, 1),
(139, 14, 0, 1),
(9, 14, 0, 1),
(258, 14, 0, 1),
(268, 14, 0, 1),
(698, 14, 0, 1),
(163, 14, 0, 1),
(699, 14, 0, 1),
(168, 14, 0, 1),
(274, 14, 0, 1),
(98, 14, 0, 1),
(700, 14, 0, 1),
(701, 14, 0, 1),
(19, 14, 0, 1),
(402, 14, 0, 1),
(340, 14, 0, 1),
(21, 14, 0, 1),
(702, 14, 0, 1),
(703, 14, 0, 1),
(167, 14, 0, 1),
(69, 14, 0, 1),
(288, 14, 0, 1),
(704, 14, 0, 1),
(705, 14, 0, 1),
(706, 14, 0, 1),
(45, 14, 0, 1),
(239, 14, 0, 1),
(146, 14, 0, 1),
(147, 14, 0, 1),
(546, 14, 0, 1),
(6, 14, 0, 1),
(577, 14, 0, 1),
(74, 14, 0, 1),
(172, 14, 0, 1),
(203, 14, 0, 1),
(415, 14, 0, 1),
(707, 14, 0, 1),
(94, 14, 0, 1),
(325, 14, 0, 1),
(105, 14, 0, 1),
(708, 14, 0, 1),
(26, 14, 0, 1),
(709, 14, 0, 1),
(710, 14, 0, 1),
(711, 14, 0, 1),
(37, 14, 0, 1),
(712, 14, 0, 1),
(378, 14, 0, 1),
(174, 14, 0, 1),
(362, 14, 0, 1),
(608, 14, 0, 1),
(612, 14, 0, 1),
(197, 14, 0, 1),
(326, 14, 0, 1),
(713, 14, 0, 1),
(39, 14, 0, 1),
(123, 14, 0, 1),
(714, 14, 0, 1),
(715, 14, 0, 1),
(716, 14, 0, 1),
(681, 14, 0, 1),
(717, 14, 0, 1),
(718, 14, 0, 1),
(226, 14, 0, 1),
(198, 14, 0, 1),
(719, 14, 0, 1),
(720, 14, 0, 1),
(210, 14, 0, 1),
(721, 15, 0, 0),
(722, 15, 0, 0),
(723, 15, 0, 0),
(724, 15, 0, 1),
(584, 15, 0, 1),
(725, 15, 0, 1),
(147, 15, 0, 1),
(151, 15, 0, 1),
(726, 15, 0, 1),
(163, 15, 0, 1),
(40, 15, 0, 1),
(388, 15, 0, 1),
(392, 15, 0, 1),
(45, 15, 0, 1),
(46, 15, 0, 1),
(727, 15, 0, 1),
(148, 15, 0, 1),
(277, 15, 0, 1),
(380, 15, 0, 1),
(27, 15, 0, 1),
(414, 15, 0, 1),
(423, 15, 0, 1),
(296, 15, 0, 1),
(456, 15, 0, 1),
(205, 15, 0, 1),
(331, 15, 0, 1),
(459, 15, 0, 1),
(16, 15, 0, 1),
(728, 15, 0, 1),
(28, 15, 0, 1),
(387, 15, 0, 1),
(687, 15, 0, 1),
(33, 15, 0, 1),
(729, 15, 0, 1),
(68, 15, 0, 1),
(47, 15, 0, 1),
(730, 15, 0, 1),
(731, 15, 0, 1),
(66, 15, 0, 1),
(732, 15, 0, 1),
(733, 15, 0, 1),
(734, 15, 0, 1),
(396, 15, 0, 1),
(591, 15, 0, 1),
(69, 15, 0, 1),
(32, 15, 0, 1),
(19, 15, 0, 1),
(735, 15, 0, 1),
(644, 15, 0, 1),
(736, 15, 0, 1),
(737, 15, 0, 1),
(738, 15, 0, 1),
(739, 15, 0, 1),
(740, 15, 0, 1),
(741, 15, 0, 1),
(742, 15, 0, 1),
(285, 15, 0, 1),
(743, 15, 0, 1),
(744, 15, 0, 1),
(745, 15, 0, 1),
(695, 15, 0, 1),
(568, 15, 0, 1),
(746, 15, 0, 1),
(275, 15, 0, 1),
(192, 15, 0, 1),
(747, 15, 0, 1),
(748, 15, 0, 1),
(52, 15, 0, 1),
(94, 15, 0, 1),
(433, 15, 0, 1),
(2, 15, 0, 1),
(56, 15, 0, 1),
(35, 15, 0, 1),
(10, 15, 0, 1),
(506, 15, 0, 1),
(12, 15, 0, 1),
(328, 15, 0, 1),
(749, 15, 0, 1),
(750, 15, 0, 1),
(74, 15, 0, 1),
(751, 15, 0, 1),
(222, 15, 0, 1),
(573, 15, 0, 1),
(6, 15, 0, 1),
(210, 15, 0, 1),
(752, 2, 1, 0),
(753, 2, 1, 0),
(754, 2, 3, 0),
(755, 2, 3, 0),
(756, 16, 0, 0),
(757, 16, 0, 1),
(758, 16, 0, 1),
(759, 16, 0, 1),
(760, 16, 0, 1),
(761, 16, 0, 1),
(762, 16, 0, 1),
(763, 16, 0, 1),
(764, 16, 0, 1),
(765, 16, 0, 1),
(766, 16, 0, 1),
(752, 16, 0, 1),
(767, 16, 0, 1),
(768, 16, 0, 1),
(769, 16, 0, 1),
(73, 16, 0, 1),
(770, 16, 0, 1),
(771, 16, 0, 1),
(44, 16, 0, 1),
(297, 16, 0, 1),
(772, 16, 0, 1),
(773, 16, 0, 1),
(163, 16, 0, 1),
(774, 16, 0, 1),
(775, 16, 0, 1),
(56, 16, 0, 1),
(454, 16, 0, 1),
(776, 16, 0, 1),
(777, 16, 0, 1),
(639, 16, 0, 1),
(778, 16, 0, 1),
(779, 16, 0, 1),
(780, 16, 0, 1),
(161, 16, 0, 1),
(498, 16, 0, 1),
(781, 16, 0, 1),
(782, 16, 0, 1),
(539, 16, 0, 1),
(783, 16, 0, 1),
(251, 16, 0, 1),
(148, 16, 0, 1),
(784, 16, 0, 1),
(258, 16, 0, 1),
(150, 16, 0, 1),
(158, 16, 0, 1),
(785, 16, 0, 1),
(218, 16, 0, 1),
(786, 16, 0, 1),
(787, 16, 0, 1),
(788, 16, 0, 1),
(789, 16, 0, 1),
(268, 16, 0, 1),
(790, 16, 0, 1),
(791, 16, 0, 1),
(792, 16, 0, 1),
(793, 16, 0, 1),
(794, 16, 0, 1),
(391, 16, 0, 1),
(795, 16, 0, 1),
(796, 16, 0, 1),
(583, 16, 0, 1),
(797, 16, 0, 1),
(798, 16, 0, 1),
(799, 16, 0, 1),
(317, 16, 0, 1),
(800, 16, 0, 1),
(147, 16, 0, 1),
(801, 16, 0, 1),
(802, 16, 0, 1),
(803, 16, 0, 1),
(804, 16, 0, 1),
(805, 16, 0, 1),
(9, 16, 0, 1),
(806, 16, 0, 1),
(807, 16, 0, 1),
(808, 16, 0, 1),
(145, 16, 0, 1),
(809, 16, 0, 1),
(810, 16, 0, 1),
(119, 16, 0, 1),
(811, 16, 0, 1),
(45, 16, 0, 1),
(292, 16, 0, 1),
(121, 16, 0, 1),
(812, 16, 0, 1),
(813, 16, 0, 1),
(814, 16, 0, 1),
(39, 16, 0, 1),
(815, 16, 0, 1),
(816, 16, 0, 1),
(817, 16, 0, 1),
(325, 16, 0, 1),
(286, 16, 0, 1),
(818, 16, 0, 1),
(819, 16, 0, 1),
(118, 16, 0, 1),
(820, 16, 0, 1),
(821, 16, 0, 1),
(822, 16, 0, 1),
(823, 16, 0, 1),
(824, 16, 0, 1),
(825, 16, 0, 1),
(826, 16, 0, 1),
(827, 16, 0, 1),
(828, 16, 0, 1),
(71, 16, 0, 1),
(829, 16, 0, 1),
(830, 16, 0, 1),
(831, 16, 0, 1),
(832, 16, 0, 1),
(833, 16, 0, 1),
(834, 16, 0, 1),
(835, 16, 0, 1),
(836, 16, 0, 1),
(837, 16, 0, 1),
(838, 16, 0, 1),
(839, 16, 0, 1),
(399, 16, 0, 1),
(840, 16, 0, 1),
(132, 16, 0, 1),
(841, 16, 0, 1),
(842, 16, 0, 1),
(843, 16, 0, 1),
(844, 16, 0, 1),
(845, 16, 0, 1),
(846, 16, 0, 1),
(309, 16, 0, 1),
(847, 16, 0, 1),
(848, 16, 0, 1),
(849, 16, 0, 1),
(850, 16, 0, 1),
(851, 16, 0, 1),
(139, 16, 0, 1),
(852, 16, 0, 1),
(853, 16, 0, 1),
(854, 16, 0, 1),
(855, 16, 0, 1),
(548, 16, 0, 1),
(856, 16, 0, 1),
(857, 16, 0, 1),
(858, 16, 0, 1),
(131, 16, 0, 1),
(859, 16, 0, 1),
(19, 16, 0, 1),
(860, 16, 0, 1),
(567, 16, 0, 1),
(861, 16, 0, 1),
(27, 16, 0, 1),
(862, 16, 0, 1),
(36, 16, 0, 1),
(863, 16, 0, 1),
(65, 16, 0, 1),
(864, 16, 0, 1),
(865, 16, 0, 1),
(866, 16, 0, 1),
(867, 16, 0, 1),
(868, 16, 0, 1),
(869, 16, 0, 1),
(82, 16, 0, 1),
(870, 16, 0, 1),
(871, 16, 0, 1),
(494, 16, 0, 1),
(872, 16, 0, 1),
(287, 16, 0, 1),
(873, 16, 0, 1),
(643, 16, 0, 1),
(89, 16, 0, 1),
(87, 16, 0, 1),
(181, 16, 0, 1),
(874, 16, 0, 1),
(875, 16, 0, 1),
(876, 16, 0, 1),
(877, 16, 0, 1),
(878, 16, 0, 1),
(879, 16, 0, 1),
(880, 16, 0, 1),
(881, 16, 0, 1),
(882, 16, 0, 1),
(883, 16, 0, 1),
(884, 16, 0, 1),
(885, 16, 0, 1),
(886, 16, 0, 1),
(525, 16, 0, 1),
(887, 16, 0, 1),
(888, 16, 0, 1),
(272, 16, 0, 1),
(889, 16, 0, 1),
(890, 16, 0, 1),
(891, 16, 0, 1),
(892, 16, 0, 1),
(893, 16, 0, 1),
(315, 16, 0, 1),
(735, 16, 0, 1),
(894, 16, 0, 1),
(895, 16, 0, 1),
(587, 16, 0, 1),
(896, 16, 0, 1),
(897, 16, 0, 1),
(898, 16, 0, 1),
(899, 16, 0, 1),
(900, 16, 0, 1),
(462, 16, 0, 1),
(901, 16, 0, 1),
(902, 16, 0, 1),
(903, 16, 0, 1),
(580, 16, 0, 1),
(198, 16, 0, 1),
(199, 16, 0, 1),
(616, 16, 0, 1),
(657, 16, 0, 1),
(127, 16, 0, 1),
(904, 16, 0, 1),
(196, 16, 0, 1),
(905, 16, 0, 1),
(138, 16, 0, 1),
(403, 16, 0, 1),
(32, 16, 0, 1),
(136, 16, 0, 1),
(599, 16, 0, 1),
(906, 16, 0, 1),
(907, 16, 0, 1),
(41, 16, 0, 1),
(908, 16, 0, 1),
(909, 16, 0, 1),
(910, 16, 0, 1),
(911, 16, 0, 1),
(912, 16, 0, 1),
(913, 16, 0, 1),
(914, 16, 0, 1),
(915, 16, 0, 1),
(916, 16, 0, 1),
(917, 16, 0, 1),
(918, 16, 0, 1),
(919, 16, 0, 1),
(920, 16, 0, 1),
(921, 16, 0, 1),
(922, 16, 0, 1),
(923, 16, 0, 1),
(924, 16, 0, 1),
(925, 16, 0, 1),
(926, 16, 0, 1),
(601, 16, 0, 1),
(712, 16, 0, 1),
(927, 16, 0, 1),
(928, 16, 0, 1),
(929, 16, 0, 1),
(930, 16, 0, 1),
(931, 16, 0, 1),
(932, 16, 0, 1),
(933, 16, 0, 1),
(702, 16, 0, 1),
(934, 16, 0, 1),
(935, 16, 0, 1),
(936, 16, 0, 1),
(937, 16, 0, 1),
(938, 16, 0, 1),
(939, 16, 0, 1),
(940, 16, 0, 1),
(323, 16, 0, 1),
(941, 16, 0, 1),
(942, 16, 0, 1),
(943, 16, 0, 1),
(464, 16, 0, 1),
(944, 16, 0, 1),
(945, 16, 0, 1),
(946, 16, 0, 1),
(947, 16, 0, 1),
(49, 16, 0, 1),
(948, 16, 0, 1),
(949, 16, 0, 1),
(950, 17, 0, 0),
(951, 17, 0, 1),
(27, 17, 0, 1),
(391, 17, 0, 1),
(952, 17, 0, 1),
(953, 17, 0, 1),
(752, 17, 0, 1),
(954, 17, 0, 1),
(65, 17, 0, 1),
(955, 17, 0, 1),
(753, 17, 0, 1),
(956, 17, 0, 1),
(957, 17, 0, 1),
(958, 17, 0, 1),
(959, 17, 0, 1),
(960, 17, 0, 1),
(961, 17, 0, 1),
(962, 17, 0, 1),
(963, 17, 0, 1),
(500, 17, 0, 1),
(56, 17, 0, 1),
(964, 17, 0, 1),
(9, 17, 0, 1),
(965, 17, 0, 1),
(966, 17, 0, 1),
(32, 17, 0, 1),
(967, 17, 0, 1),
(968, 17, 0, 1),
(45, 17, 0, 1),
(969, 17, 0, 1),
(163, 17, 0, 1),
(970, 17, 0, 1),
(147, 17, 0, 1),
(894, 17, 0, 1),
(258, 17, 0, 1),
(971, 17, 0, 1),
(972, 17, 0, 1),
(973, 17, 0, 1),
(974, 17, 0, 1),
(975, 17, 0, 1),
(976, 17, 0, 1),
(977, 17, 0, 1),
(978, 17, 0, 1),
(979, 17, 0, 1),
(980, 17, 0, 1),
(981, 17, 0, 1),
(399, 17, 0, 1),
(982, 17, 0, 1),
(983, 17, 0, 1),
(344, 17, 0, 1),
(515, 17, 0, 1),
(984, 17, 0, 1),
(255, 17, 0, 1),
(985, 17, 0, 1),
(986, 17, 0, 1),
(599, 17, 0, 1),
(987, 17, 0, 1),
(988, 17, 0, 1),
(989, 17, 0, 1),
(990, 17, 0, 1),
(991, 17, 0, 1),
(992, 17, 0, 1),
(993, 17, 0, 1),
(994, 17, 0, 1),
(995, 17, 0, 1),
(996, 17, 0, 1),
(997, 17, 0, 1),
(998, 17, 0, 1),
(791, 17, 0, 1),
(44, 17, 0, 1),
(297, 17, 0, 1),
(999, 17, 0, 1),
(1000, 17, 0, 1),
(1001, 17, 0, 1),
(73, 17, 0, 1),
(226, 17, 0, 1),
(1002, 17, 0, 1),
(404, 17, 0, 1),
(1003, 17, 0, 1),
(1004, 17, 0, 1),
(118, 17, 0, 1),
(125, 17, 0, 1),
(319, 17, 0, 1),
(1005, 17, 0, 1),
(1006, 17, 0, 1),
(161, 17, 0, 1),
(174, 17, 0, 1),
(1007, 17, 0, 1),
(1008, 17, 0, 1),
(914, 17, 0, 1),
(1009, 17, 0, 1),
(1010, 17, 0, 1),
(219, 17, 0, 1),
(321, 17, 0, 1),
(1011, 17, 0, 1),
(1012, 17, 0, 1),
(1013, 17, 0, 1),
(1014, 17, 0, 1),
(558, 17, 0, 1),
(1015, 17, 0, 1),
(1016, 17, 0, 1),
(1017, 17, 0, 1),
(1018, 17, 0, 1),
(1019, 17, 0, 1),
(177, 17, 0, 1),
(1020, 17, 0, 1),
(810, 17, 0, 1),
(1021, 17, 0, 1),
(1022, 17, 0, 1),
(1023, 17, 0, 1),
(1024, 17, 0, 1),
(769, 17, 0, 1),
(179, 17, 0, 1),
(1025, 17, 0, 1),
(1026, 17, 0, 1),
(922, 17, 0, 1),
(41, 17, 0, 1),
(1027, 17, 0, 1),
(256, 17, 0, 1),
(198, 17, 0, 1),
(131, 17, 0, 1),
(199, 17, 0, 1),
(1028, 17, 0, 1),
(1029, 18, 0, 0),
(1030, 18, 0, 1),
(1031, 18, 0, 1),
(1032, 18, 0, 1),
(163, 18, 0, 1),
(183, 18, 0, 1),
(1033, 18, 0, 1),
(1034, 18, 0, 1),
(752, 18, 0, 1),
(215, 18, 0, 1),
(133, 18, 0, 1),
(1035, 18, 0, 1),
(560, 18, 0, 1),
(1036, 18, 0, 1),
(150, 18, 0, 1),
(987, 18, 0, 1),
(258, 18, 0, 1),
(1037, 18, 0, 1),
(1038, 18, 0, 1),
(1039, 18, 0, 1),
(1040, 18, 0, 1),
(733, 18, 0, 1),
(1041, 18, 0, 1),
(413, 18, 0, 1),
(131, 18, 0, 1),
(1042, 18, 0, 1),
(1043, 18, 0, 1),
(530, 18, 0, 1),
(1044, 18, 0, 1),
(1045, 18, 0, 1),
(1046, 18, 0, 1),
(361, 18, 0, 1),
(174, 18, 0, 1),
(649, 18, 0, 1),
(1047, 18, 0, 1),
(1048, 18, 0, 1),
(196, 18, 0, 1),
(219, 18, 0, 1),
(454, 18, 0, 1),
(269, 18, 0, 1),
(568, 18, 0, 1),
(458, 18, 0, 1),
(1017, 18, 0, 1),
(1049, 18, 0, 1),
(1050, 18, 0, 1),
(850, 18, 0, 1),
(918, 18, 0, 1),
(1051, 18, 0, 1),
(397, 18, 0, 1),
(1052, 18, 0, 1),
(553, 18, 0, 1),
(753, 18, 0, 1),
(32, 18, 0, 1),
(1053, 18, 0, 1),
(1054, 18, 0, 1),
(1055, 18, 0, 1),
(1056, 18, 0, 1),
(1057, 18, 0, 1),
(1058, 18, 0, 1),
(1059, 18, 0, 1),
(913, 18, 0, 1),
(914, 18, 0, 1),
(198, 18, 0, 1),
(199, 18, 0, 1),
(45, 18, 0, 1),
(1060, 18, 0, 1),
(1061, 18, 0, 1),
(1062, 18, 0, 1),
(1063, 18, 0, 1),
(9, 18, 0, 1),
(884, 18, 0, 1),
(713, 18, 0, 1),
(1064, 18, 0, 1),
(44, 18, 0, 1),
(251, 18, 0, 1),
(1065, 18, 0, 1),
(1066, 18, 0, 1),
(56, 18, 0, 1),
(46, 18, 0, 1),
(1067, 18, 0, 1),
(172, 18, 0, 1),
(1068, 18, 0, 1),
(74, 18, 0, 1),
(1069, 18, 0, 1),
(1070, 18, 0, 1),
(624, 18, 0, 1),
(1071, 18, 0, 1),
(1072, 18, 0, 1),
(72, 18, 0, 1),
(464, 18, 0, 1),
(92, 18, 0, 1),
(1073, 18, 0, 1),
(929, 18, 0, 1),
(1074, 18, 0, 1),
(1075, 18, 0, 1),
(613, 18, 0, 1),
(1076, 18, 0, 1),
(147, 18, 0, 1),
(457, 18, 0, 1),
(1077, 18, 0, 1),
(949, 18, 0, 1),
(1078, 19, 0, 0),
(1079, 19, 0, 1),
(752, 19, 0, 1),
(1078, 19, 0, 1),
(1036, 19, 0, 1),
(121, 19, 0, 1),
(49, 19, 0, 1),
(1080, 19, 0, 1),
(32, 19, 0, 1),
(1081, 19, 0, 1),
(1082, 19, 0, 1),
(807, 19, 0, 1),
(1083, 19, 0, 1),
(138, 19, 0, 1),
(1084, 19, 0, 1),
(1085, 19, 0, 1),
(1086, 19, 0, 1),
(118, 19, 0, 1),
(1087, 19, 0, 1),
(1088, 19, 0, 1),
(198, 19, 0, 1),
(1089, 19, 0, 1),
(1090, 19, 0, 1),
(56, 19, 0, 1),
(1091, 19, 0, 1),
(1092, 19, 0, 1),
(1093, 19, 0, 1),
(979, 19, 0, 1),
(1094, 19, 0, 1),
(65, 19, 0, 1),
(1095, 19, 0, 1),
(1096, 19, 0, 1),
(119, 19, 0, 1),
(1097, 19, 0, 1),
(219, 19, 0, 1),
(1098, 19, 0, 1),
(1099, 19, 0, 1),
(1100, 19, 0, 1),
(695, 19, 0, 1),
(1101, 19, 0, 1),
(199, 19, 0, 1),
(1102, 19, 0, 1),
(582, 19, 0, 1),
(1103, 19, 0, 1),
(1104, 19, 0, 1),
(1105, 19, 0, 1),
(323, 19, 0, 1),
(1106, 19, 0, 1),
(622, 19, 0, 1),
(599, 19, 0, 1),
(954, 19, 0, 1),
(1107, 19, 0, 1),
(1108, 19, 0, 1),
(1109, 19, 0, 1),
(1110, 19, 0, 1),
(73, 19, 0, 1),
(1111, 19, 0, 1),
(44, 19, 0, 1),
(391, 19, 0, 1),
(1112, 19, 0, 1),
(1113, 19, 0, 1),
(1114, 19, 0, 1),
(1115, 19, 0, 1),
(1041, 19, 0, 1),
(1116, 19, 0, 1),
(1117, 19, 0, 1),
(90, 19, 0, 1),
(1118, 19, 0, 1),
(713, 19, 0, 1),
(9, 19, 0, 1),
(1119, 19, 0, 1),
(1047, 19, 0, 1),
(183, 19, 0, 1),
(1120, 19, 0, 1),
(1039, 19, 0, 1),
(1121, 19, 0, 1),
(1122, 19, 0, 1),
(45, 19, 0, 1),
(1123, 19, 0, 1),
(98, 19, 0, 1),
(1124, 19, 0, 1),
(1125, 19, 0, 1),
(1126, 19, 0, 1),
(1127, 19, 0, 1),
(1128, 19, 0, 1),
(1129, 19, 0, 1),
(1130, 19, 0, 1),
(27, 19, 0, 1),
(1131, 19, 0, 1),
(1132, 19, 0, 1),
(218, 19, 0, 1),
(1133, 19, 0, 1),
(1134, 19, 0, 1),
(1135, 19, 0, 1),
(1136, 19, 0, 1),
(1137, 19, 0, 1),
(14, 19, 0, 1),
(1138, 19, 0, 1),
(161, 19, 0, 1),
(536, 19, 0, 1),
(1139, 19, 0, 1),
(1140, 19, 0, 1),
(1141, 19, 0, 1),
(1142, 19, 0, 1),
(1143, 19, 0, 1),
(1144, 19, 0, 1),
(1145, 19, 0, 1),
(1146, 19, 0, 1),
(1147, 19, 0, 1),
(156, 19, 0, 1),
(1148, 19, 0, 1),
(1149, 19, 0, 1),
(1150, 19, 0, 1),
(1033, 19, 0, 1),
(1151, 19, 0, 1),
(1152, 19, 0, 1),
(176, 19, 0, 1),
(258, 19, 0, 1),
(593, 19, 0, 1),
(525, 19, 0, 1),
(1153, 19, 0, 1),
(1154, 19, 0, 1),
(79, 19, 0, 1),
(80, 19, 0, 1),
(1155, 19, 0, 1),
(1156, 19, 0, 1),
(1157, 19, 0, 1),
(1158, 19, 0, 1),
(1159, 19, 0, 1),
(1160, 19, 0, 1),
(287, 19, 0, 1),
(891, 19, 0, 1),
(921, 19, 0, 1),
(1161, 19, 0, 1),
(1162, 19, 0, 1),
(1163, 19, 0, 1),
(1164, 19, 0, 1),
(676, 19, 0, 1),
(1165, 19, 0, 1),
(957, 19, 0, 1),
(1166, 19, 0, 1),
(1167, 19, 0, 1),
(1168, 19, 0, 1),
(1169, 19, 0, 1),
(1170, 19, 0, 1),
(1171, 19, 0, 1),
(1172, 19, 0, 1),
(1173, 19, 0, 1),
(1174, 19, 0, 1),
(325, 19, 0, 1),
(1175, 19, 0, 1),
(1176, 19, 0, 1),
(1177, 19, 0, 1),
(1178, 19, 0, 1),
(1179, 19, 0, 1),
(1180, 19, 0, 1),
(209, 19, 0, 1),
(1181, 19, 0, 1),
(1182, 19, 0, 1),
(1183, 19, 0, 1),
(821, 19, 0, 1),
(1184, 19, 0, 1),
(1185, 19, 0, 1),
(157, 19, 0, 1),
(1186, 19, 0, 1),
(1187, 19, 0, 1),
(1188, 19, 0, 1),
(1189, 19, 0, 1),
(1190, 19, 0, 1),
(1191, 19, 0, 1),
(1192, 19, 0, 1),
(810, 19, 0, 1),
(362, 19, 0, 1),
(1193, 19, 0, 1),
(1194, 19, 0, 1),
(777, 19, 0, 1),
(1195, 19, 0, 1),
(1196, 19, 0, 1),
(1197, 19, 0, 1),
(1198, 19, 0, 1),
(1199, 19, 0, 1),
(1200, 19, 0, 1),
(150, 19, 0, 1),
(269, 19, 0, 1),
(1201, 19, 0, 1),
(1202, 19, 0, 1),
(1203, 19, 0, 1),
(1204, 19, 0, 1),
(1205, 19, 0, 1),
(1206, 19, 0, 1),
(1207, 19, 0, 1),
(579, 19, 0, 1),
(145, 19, 0, 1),
(1208, 19, 0, 1),
(1209, 19, 0, 1),
(1210, 19, 0, 1),
(1032, 19, 0, 1),
(1211, 19, 0, 1),
(1212, 19, 0, 1),
(1213, 19, 0, 1),
(420, 19, 0, 1),
(1214, 19, 0, 1),
(1215, 19, 0, 1),
(1216, 19, 0, 1),
(1217, 19, 0, 1),
(1218, 19, 0, 1),
(1219, 19, 0, 1),
(1220, 19, 0, 1),
(1221, 19, 0, 1),
(397, 19, 0, 1),
(1222, 19, 0, 1),
(1223, 19, 0, 1),
(265, 19, 0, 1),
(1014, 19, 0, 1),
(1224, 19, 0, 1),
(1225, 19, 0, 1),
(839, 19, 0, 1),
(392, 19, 0, 1),
(1226, 19, 0, 1),
(1227, 19, 0, 1),
(341, 19, 0, 1),
(1228, 19, 0, 1),
(1229, 19, 0, 1),
(1230, 19, 0, 1),
(1231, 19, 0, 1),
(1232, 19, 0, 1),
(1233, 19, 0, 1),
(1234, 19, 0, 1),
(823, 19, 0, 1),
(1235, 19, 0, 1),
(1236, 19, 0, 1),
(445, 19, 0, 1),
(1237, 19, 0, 1),
(71, 19, 0, 1),
(712, 19, 0, 1),
(1238, 19, 0, 1),
(1013, 19, 0, 1),
(1239, 19, 0, 1),
(1240, 19, 0, 1),
(1241, 19, 0, 1),
(1242, 19, 0, 1),
(367, 19, 0, 1),
(1243, 19, 0, 1),
(462, 19, 0, 1),
(1244, 19, 0, 1),
(799, 19, 0, 1),
(1245, 19, 0, 1),
(346, 19, 0, 1),
(1246, 19, 0, 1),
(1247, 19, 0, 1),
(875, 19, 0, 1),
(988, 19, 0, 1),
(1026, 19, 0, 1),
(1248, 19, 0, 1),
(1249, 19, 0, 1),
(1250, 19, 0, 1),
(1251, 19, 0, 1),
(1252, 19, 0, 1),
(1253, 19, 0, 1),
(1254, 19, 0, 1),
(1255, 19, 0, 1),
(1256, 19, 0, 1),
(1257, 19, 0, 1),
(1258, 19, 0, 1),
(1259, 19, 0, 1),
(1260, 19, 0, 1),
(1261, 19, 0, 1),
(583, 19, 0, 1),
(1262, 19, 0, 1),
(1263, 19, 0, 1),
(1264, 19, 0, 1),
(1265, 19, 0, 1),
(1266, 19, 0, 1),
(1267, 19, 0, 1),
(295, 19, 0, 1),
(37, 19, 0, 1),
(21, 19, 0, 1),
(1268, 19, 0, 1),
(1269, 19, 0, 1),
(928, 19, 0, 1),
(1270, 19, 0, 1),
(929, 19, 0, 1),
(1271, 19, 0, 1),
(163, 19, 0, 1),
(403, 19, 0, 1),
(1063, 19, 0, 1),
(950, 19, 0, 1),
(824, 19, 0, 1),
(1272, 19, 0, 1),
(764, 19, 0, 1),
(366, 19, 0, 1),
(1273, 19, 0, 1),
(1274, 19, 0, 1),
(1275, 19, 0, 1),
(1276, 19, 0, 1),
(1277, 19, 0, 1),
(818, 19, 0, 1),
(1278, 19, 0, 1),
(1279, 19, 0, 1),
(361, 19, 0, 1),
(1280, 19, 0, 1),
(1281, 19, 0, 1),
(1282, 19, 0, 1),
(1283, 19, 0, 1),
(1284, 19, 0, 1),
(1285, 19, 0, 1),
(1286, 19, 0, 1),
(1287, 19, 0, 1),
(1288, 19, 0, 1),
(1289, 19, 0, 1),
(1290, 19, 0, 1),
(1291, 19, 0, 1),
(1292, 19, 0, 1),
(1293, 19, 0, 1),
(1294, 19, 0, 1),
(1295, 19, 0, 1),
(1296, 19, 0, 1),
(1297, 19, 0, 1),
(832, 19, 0, 1),
(123, 19, 0, 1),
(1298, 19, 0, 1),
(1299, 19, 0, 1),
(288, 19, 0, 1),
(376, 19, 0, 1),
(1300, 19, 0, 1),
(1301, 19, 0, 1),
(1302, 19, 0, 1),
(1303, 19, 0, 1),
(1304, 19, 0, 1),
(915, 19, 0, 1),
(1069, 19, 0, 1),
(613, 19, 0, 1),
(72, 19, 0, 1),
(654, 19, 0, 1),
(1305, 19, 0, 1),
(1306, 19, 0, 1),
(251, 19, 0, 1),
(1307, 19, 0, 1),
(1308, 19, 0, 1),
(1309, 19, 0, 1),
(147, 19, 0, 1),
(1310, 19, 0, 1),
(1311, 19, 0, 1),
(1312, 19, 0, 1),
(1313, 19, 0, 1),
(1314, 19, 0, 1),
(1315, 19, 0, 1),
(1020, 19, 0, 1),
(78, 19, 0, 1),
(255, 19, 0, 1),
(1316, 19, 0, 1),
(1317, 19, 0, 1),
(1318, 19, 0, 1),
(1319, 19, 0, 1),
(1320, 19, 0, 1),
(1321, 19, 0, 1),
(1322, 19, 0, 1),
(1323, 19, 0, 1),
(500, 19, 0, 1),
(92, 19, 0, 1),
(1324, 19, 0, 1),
(1325, 19, 0, 1),
(874, 19, 0, 1),
(1326, 19, 0, 1),
(1327, 19, 0, 1),
(1328, 19, 0, 1),
(1329, 19, 0, 1),
(1330, 19, 0, 1),
(1331, 19, 0, 1),
(1332, 19, 0, 1),
(1333, 19, 0, 1),
(205, 19, 0, 1),
(1334, 19, 0, 1),
(64, 19, 0, 1),
(517, 19, 0, 1),
(1335, 19, 0, 1),
(625, 19, 0, 1),
(1336, 19, 0, 1),
(1337, 19, 0, 1),
(1338, 19, 0, 1),
(1339, 19, 0, 1),
(459, 19, 0, 1),
(1340, 19, 0, 1),
(1341, 19, 0, 1),
(498, 19, 0, 1),
(1342, 19, 0, 1),
(762, 19, 0, 1),
(1343, 19, 0, 1),
(1344, 19, 0, 1),
(1345, 19, 0, 1),
(1346, 19, 0, 1),
(321, 19, 0, 1),
(831, 19, 0, 1),
(1347, 19, 0, 1),
(1348, 19, 0, 1),
(1349, 19, 0, 1),
(454, 19, 0, 1),
(1350, 19, 0, 1),
(165, 19, 0, 1),
(1351, 19, 0, 1),
(1352, 19, 0, 1),
(1353, 19, 0, 1),
(1354, 19, 0, 1),
(1355, 19, 0, 1),
(1356, 19, 0, 1),
(1357, 19, 0, 1),
(1358, 19, 0, 1),
(1359, 19, 0, 1),
(148, 19, 0, 1),
(169, 19, 0, 1),
(393, 19, 0, 1),
(1360, 19, 0, 1),
(1044, 19, 0, 1),
(1361, 19, 0, 1),
(698, 19, 0, 1),
(1362, 19, 0, 1),
(1363, 19, 0, 1),
(1364, 19, 0, 1),
(1365, 19, 0, 1),
(1366, 19, 0, 1),
(1367, 19, 0, 1),
(1368, 19, 0, 1),
(1369, 19, 0, 1),
(1370, 19, 0, 1),
(1371, 19, 0, 1),
(1372, 19, 0, 1),
(1373, 19, 0, 1),
(1374, 19, 0, 1),
(1028, 19, 0, 1),
(1375, 20, 0, 0),
(1376, 20, 0, 1),
(1377, 20, 0, 1),
(1378, 20, 0, 1),
(548, 20, 0, 1),
(1072, 20, 0, 1),
(1375, 20, 0, 1),
(752, 20, 0, 1),
(1379, 20, 0, 1),
(599, 20, 0, 1),
(1300, 20, 0, 1),
(1380, 20, 0, 1),
(121, 20, 0, 1),
(118, 20, 0, 1),
(1381, 20, 0, 1),
(285, 20, 0, 1),
(1382, 20, 0, 1),
(1383, 20, 0, 1),
(1384, 20, 0, 1),
(1385, 20, 0, 1),
(32, 20, 0, 1),
(432, 20, 0, 1),
(1386, 20, 0, 1),
(921, 20, 0, 1),
(1363, 20, 0, 1),
(1387, 20, 0, 1),
(150, 20, 0, 1),
(1388, 20, 0, 1),
(988, 20, 0, 1),
(45, 20, 0, 1),
(41, 20, 0, 1),
(161, 20, 0, 1),
(973, 20, 0, 1),
(1389, 20, 0, 1),
(1390, 20, 0, 1),
(1391, 20, 0, 1),
(1392, 20, 0, 1),
(829, 20, 0, 1),
(1393, 20, 0, 1),
(27, 20, 0, 1),
(1394, 20, 0, 1),
(1395, 20, 0, 1),
(136, 20, 0, 1),
(391, 20, 0, 1),
(325, 20, 0, 1),
(215, 20, 0, 1),
(613, 20, 0, 1),
(1396, 20, 0, 1),
(939, 20, 0, 1),
(1397, 20, 0, 1),
(79, 20, 0, 1),
(1398, 20, 0, 1),
(1354, 20, 0, 1),
(1266, 20, 0, 1),
(1399, 20, 0, 1),
(1063, 20, 0, 1),
(74, 20, 0, 1),
(1400, 20, 0, 1),
(1070, 20, 0, 1),
(910, 20, 0, 1),
(1401, 20, 0, 1),
(44, 20, 0, 1),
(1402, 20, 0, 1),
(1403, 20, 0, 1),
(1021, 20, 0, 1),
(1404, 20, 0, 1),
(295, 20, 0, 1),
(1405, 20, 0, 1),
(1406, 20, 0, 1),
(1407, 20, 0, 1),
(787, 20, 0, 1),
(1408, 20, 0, 1),
(1409, 20, 0, 1),
(713, 20, 0, 1),
(1410, 20, 0, 1),
(1411, 20, 0, 1),
(1032, 20, 0, 1),
(1122, 20, 0, 1),
(1412, 20, 0, 1),
(1413, 20, 0, 1),
(1414, 20, 0, 1),
(1415, 20, 0, 1),
(695, 20, 0, 1),
(1416, 20, 0, 1),
(1417, 20, 0, 1),
(1418, 20, 0, 1),
(1419, 20, 0, 1),
(1420, 20, 0, 1),
(1421, 20, 0, 1),
(1422, 20, 0, 1),
(1423, 20, 0, 1),
(1054, 20, 0, 1),
(1424, 20, 0, 1),
(1425, 20, 0, 1),
(37, 20, 0, 1),
(1426, 20, 0, 1),
(1427, 20, 0, 1),
(1428, 20, 0, 1),
(362, 20, 0, 1),
(245, 20, 0, 1),
(1429, 20, 0, 1),
(1430, 20, 0, 1),
(258, 20, 0, 1),
(807, 20, 0, 1),
(753, 20, 0, 1),
(1431, 20, 0, 1),
(1432, 20, 0, 1),
(125, 20, 0, 1),
(1433, 20, 0, 1),
(1211, 20, 0, 1),
(1434, 20, 0, 1),
(1435, 20, 0, 1),
(1121, 20, 0, 1),
(1436, 20, 0, 1),
(1437, 20, 0, 1),
(1438, 20, 0, 1),
(1439, 20, 0, 1),
(1440, 20, 0, 1),
(1441, 20, 0, 1),
(1442, 20, 0, 1),
(1443, 20, 0, 1),
(1444, 20, 0, 1),
(1445, 20, 0, 1),
(1446, 20, 0, 1),
(1447, 20, 0, 1),
(1448, 20, 0, 1),
(127, 20, 0, 1),
(1449, 20, 0, 1),
(1450, 20, 0, 1),
(1451, 20, 0, 1),
(893, 20, 0, 1),
(1452, 20, 0, 1),
(1453, 20, 0, 1),
(1454, 20, 0, 1),
(1455, 20, 0, 1),
(1456, 20, 0, 1),
(593, 20, 0, 1),
(1457, 20, 0, 1),
(1458, 20, 0, 1),
(317, 20, 0, 1),
(1459, 20, 0, 1),
(1460, 20, 0, 1),
(1461, 20, 0, 1),
(1056, 20, 0, 1),
(1462, 20, 0, 1),
(1463, 20, 0, 1),
(1464, 20, 0, 1),
(1465, 20, 0, 1),
(1466, 20, 0, 1),
(1467, 20, 0, 1),
(143, 20, 0, 1),
(169, 20, 0, 1),
(361, 20, 0, 1),
(128, 20, 0, 1),
(1468, 20, 0, 1),
(1469, 20, 0, 1),
(1470, 20, 0, 1),
(1471, 20, 0, 1),
(156, 20, 0, 1),
(1472, 20, 0, 1),
(1473, 20, 0, 1),
(1474, 20, 0, 1),
(1196, 20, 0, 1),
(1475, 20, 0, 1),
(802, 20, 0, 1),
(1476, 20, 0, 1),
(1477, 20, 0, 1),
(1478, 20, 0, 1),
(309, 20, 0, 1),
(795, 20, 0, 1),
(1479, 20, 0, 1),
(1480, 20, 0, 1),
(1481, 20, 0, 1),
(1482, 20, 0, 1),
(65, 20, 0, 1),
(1269, 20, 0, 1),
(1483, 20, 0, 1),
(1484, 20, 0, 1),
(198, 20, 0, 1),
(1485, 20, 0, 1),
(1486, 20, 0, 1),
(1487, 20, 0, 1),
(658, 20, 0, 1),
(1488, 20, 0, 1),
(1188, 20, 0, 1),
(1489, 20, 0, 1),
(1490, 20, 0, 1),
(340, 20, 0, 1),
(287, 20, 0, 1),
(1491, 20, 0, 1),
(1492, 20, 0, 1),
(1215, 20, 0, 1),
(1493, 20, 0, 1),
(1494, 20, 0, 1),
(398, 20, 0, 1),
(523, 20, 0, 1),
(1495, 20, 0, 1),
(145, 20, 0, 1),
(1496, 20, 0, 1),
(1497, 20, 0, 1),
(1498, 20, 0, 1),
(224, 20, 0, 1),
(1499, 20, 0, 1),
(1500, 20, 0, 1),
(1501, 20, 0, 1),
(359, 20, 0, 1),
(163, 20, 0, 1),
(1502, 20, 0, 1),
(1503, 20, 0, 1),
(1504, 20, 0, 1),
(1149, 20, 0, 1),
(1505, 20, 0, 1),
(1506, 20, 0, 1),
(68, 20, 0, 1),
(1507, 20, 0, 1),
(1508, 20, 0, 1),
(649, 20, 0, 1),
(1509, 20, 0, 1),
(544, 20, 0, 1),
(1510, 20, 0, 1),
(1511, 20, 0, 1),
(1512, 20, 0, 1),
(183, 20, 0, 1),
(1033, 20, 0, 1),
(1513, 20, 0, 1),
(1514, 20, 0, 1),
(1515, 20, 0, 1),
(804, 20, 0, 1),
(1516, 20, 0, 1),
(1517, 20, 0, 1),
(790, 20, 0, 1),
(1518, 20, 0, 1),
(1519, 20, 0, 1),
(1520, 20, 0, 1),
(654, 20, 0, 1),
(1521, 20, 0, 1),
(1522, 20, 0, 1),
(769, 20, 0, 1),
(1523, 20, 0, 1),
(1524, 20, 0, 1),
(311, 20, 0, 1),
(1525, 20, 0, 1),
(1526, 20, 0, 1),
(1527, 20, 0, 1),
(454, 20, 0, 1),
(443, 20, 0, 1),
(1528, 20, 0, 1),
(1113, 20, 0, 1),
(1529, 20, 0, 1),
(1530, 20, 0, 1),
(1531, 20, 0, 1),
(1532, 20, 0, 1),
(663, 20, 0, 1),
(9, 20, 0, 1),
(1304, 20, 0, 1),
(672, 20, 0, 1),
(1533, 20, 0, 1),
(1534, 20, 0, 1),
(201, 20, 0, 1),
(1192, 20, 0, 1),
(1535, 20, 0, 1),
(401, 20, 0, 1),
(1536, 20, 0, 1),
(1537, 20, 0, 1),
(1538, 20, 0, 1),
(1539, 20, 0, 1),
(1540, 20, 0, 1),
(1541, 20, 0, 1),
(869, 20, 0, 1),
(1542, 20, 0, 1),
(1543, 20, 0, 1),
(1544, 20, 0, 1),
(1545, 20, 0, 1),
(1546, 20, 0, 1),
(1547, 20, 0, 1),
(1548, 20, 0, 1),
(1549, 20, 0, 1),
(1550, 20, 0, 1),
(1551, 20, 0, 1),
(1552, 20, 0, 1),
(1553, 20, 0, 1),
(1554, 20, 0, 1),
(1555, 20, 0, 1),
(1556, 20, 0, 1),
(1557, 20, 0, 1),
(1558, 20, 0, 1),
(135, 20, 0, 1),
(1559, 20, 0, 1),
(1355, 20, 0, 1),
(256, 20, 0, 1),
(1560, 20, 0, 1),
(1561, 20, 0, 1),
(1562, 20, 0, 1),
(1563, 20, 0, 1),
(261, 20, 0, 1),
(707, 20, 0, 1),
(1564, 20, 0, 1),
(567, 20, 0, 1),
(1565, 20, 0, 1),
(1566, 20, 0, 1),
(1195, 20, 0, 1),
(83, 20, 0, 1),
(931, 20, 0, 1),
(1567, 20, 0, 1),
(56, 20, 0, 1),
(1568, 20, 0, 1),
(1569, 20, 0, 1),
(1570, 20, 0, 1),
(1571, 20, 0, 1),
(960, 20, 0, 1),
(1572, 20, 0, 1),
(1573, 20, 0, 1),
(129, 20, 0, 1),
(1574, 20, 0, 1),
(1575, 20, 0, 1),
(1576, 20, 0, 1),
(874, 20, 0, 1),
(1577, 20, 0, 1),
(1578, 20, 0, 1),
(1579, 20, 0, 1),
(1228, 20, 0, 1),
(1580, 20, 0, 1),
(1581, 20, 0, 1),
(281, 20, 0, 1),
(1582, 20, 0, 1),
(1583, 20, 0, 1),
(1584, 20, 0, 1),
(1585, 20, 0, 1),
(766, 20, 0, 1),
(1586, 20, 0, 1),
(1587, 20, 0, 1),
(1588, 20, 0, 1),
(1589, 20, 0, 1),
(1590, 20, 0, 1),
(1591, 20, 0, 1),
(1592, 20, 0, 1),
(1593, 20, 0, 1),
(1594, 20, 0, 1),
(1595, 20, 0, 1),
(1596, 20, 0, 1),
(1597, 20, 0, 1),
(1133, 20, 0, 1),
(1598, 20, 0, 1),
(1599, 20, 0, 1),
(197, 20, 0, 1),
(1600, 20, 0, 1),
(1601, 20, 0, 1),
(1602, 20, 0, 1),
(1603, 20, 0, 1),
(1604, 20, 0, 1),
(1605, 20, 0, 1),
(1606, 20, 0, 1),
(1607, 20, 0, 1),
(494, 20, 0, 1),
(954, 20, 0, 1),
(1608, 20, 0, 1),
(395, 20, 0, 1),
(1609, 20, 0, 1),
(1610, 20, 0, 1),
(1611, 20, 0, 1),
(119, 20, 0, 1),
(1612, 20, 0, 1),
(218, 20, 0, 1),
(367, 20, 0, 1),
(1613, 20, 0, 1),
(1614, 20, 0, 1),
(1212, 20, 0, 1),
(1615, 20, 0, 1),
(1616, 20, 0, 1),
(199, 20, 0, 1),
(1617, 20, 0, 1),
(1618, 20, 0, 1),
(1619, 20, 0, 1),
(1620, 20, 0, 1),
(1621, 20, 0, 1),
(1069, 20, 0, 1),
(1622, 20, 0, 1),
(1623, 20, 0, 1),
(192, 20, 0, 1),
(771, 20, 0, 1),
(1624, 20, 0, 1),
(1625, 20, 0, 1),
(1626, 20, 0, 1),
(363, 20, 0, 1),
(1627, 20, 0, 1),
(1628, 20, 0, 1),
(1629, 20, 0, 1),
(1630, 20, 0, 1),
(1631, 20, 0, 1),
(1632, 20, 0, 1),
(1633, 20, 0, 1),
(1634, 20, 0, 1),
(1635, 20, 0, 1),
(1636, 20, 0, 1),
(1637, 20, 0, 1),
(814, 20, 0, 1),
(1638, 20, 0, 1),
(1639, 20, 0, 1),
(1640, 20, 0, 1),
(1028, 20, 0, 1),
(1641, 20, 0, 1),
(1057, 20, 0, 1),
(1642, 20, 0, 1),
(459, 20, 0, 1),
(460, 20, 0, 1),
(1643, 20, 0, 1),
(1169, 20, 0, 1),
(147, 20, 0, 1),
(1364, 20, 0, 1),
(1644, 20, 0, 1),
(1645, 20, 0, 1),
(1646, 20, 0, 1),
(1647, 20, 0, 1),
(582, 20, 0, 1),
(280, 20, 0, 1),
(643, 20, 0, 1),
(1648, 20, 0, 1),
(1649, 20, 0, 1),
(592, 20, 0, 1),
(165, 20, 0, 1),
(1650, 20, 0, 1),
(1651, 20, 0, 1),
(1652, 20, 0, 1),
(1653, 20, 0, 1),
(1654, 20, 0, 1),
(1655, 20, 0, 1),
(1656, 20, 0, 1),
(1657, 20, 0, 1),
(1658, 20, 0, 1),
(1659, 20, 0, 1),
(1660, 20, 0, 1),
(712, 20, 0, 1),
(148, 20, 0, 1),
(1161, 20, 0, 1),
(894, 20, 0, 1),
(989, 20, 0, 1),
(1661, 20, 0, 1),
(187, 20, 0, 1),
(1017, 20, 0, 1),
(1662, 20, 0, 1),
(1023, 20, 0, 1),
(1663, 20, 0, 1),
(1664, 20, 0, 1),
(1665, 20, 0, 1),
(832, 20, 0, 1),
(1666, 20, 0, 1),
(1667, 20, 0, 1),
(1668, 20, 0, 1),
(107, 20, 0, 1),
(1669, 20, 0, 1),
(1154, 20, 0, 1),
(1011, 20, 0, 1),
(1670, 20, 0, 1),
(1671, 20, 0, 1),
(21, 20, 0, 1),
(1672, 20, 0, 1),
(1673, 20, 0, 1),
(1674, 20, 0, 1),
(1675, 20, 0, 1),
(1676, 20, 0, 1),
(1677, 20, 0, 1),
(1678, 20, 0, 1),
(1281, 20, 0, 1),
(1679, 20, 0, 1),
(63, 20, 0, 1),
(1680, 20, 0, 1),
(1681, 20, 0, 1),
(1682, 20, 0, 1),
(1683, 20, 0, 1),
(1107, 20, 0, 1),
(1684, 20, 0, 1),
(552, 20, 0, 1),
(1685, 20, 0, 1),
(1686, 20, 0, 1),
(1687, 20, 0, 1),
(1688, 20, 0, 1),
(1689, 20, 0, 1),
(1690, 20, 0, 1),
(1691, 20, 0, 1),
(1692, 20, 0, 1),
(1693, 20, 0, 1),
(1081, 20, 0, 1),
(1694, 20, 0, 1),
(1695, 20, 0, 1),
(1696, 20, 0, 1),
(1697, 20, 0, 1),
(1698, 20, 0, 1),
(217, 20, 0, 1),
(1699, 20, 0, 1),
(1700, 20, 0, 1),
(1701, 20, 0, 1),
(1702, 20, 0, 1),
(1703, 20, 0, 1),
(1321, 20, 0, 1),
(992, 20, 0, 1),
(1704, 20, 0, 1),
(1705, 20, 0, 1),
(1706, 20, 0, 1),
(1707, 20, 0, 1),
(1708, 20, 0, 1),
(1709, 20, 0, 1),
(786, 20, 0, 1),
(808, 20, 0, 1),
(1710, 20, 0, 1),
(918, 20, 0, 1),
(922, 20, 0, 1),
(1711, 20, 0, 1),
(1712, 20, 0, 1),
(1713, 20, 0, 1),
(1714, 20, 0, 1),
(1715, 20, 0, 1),
(553, 20, 0, 1),
(1716, 20, 0, 1),
(1717, 20, 0, 1),
(1718, 20, 0, 1),
(952, 20, 0, 1),
(1024, 20, 0, 1),
(1719, 20, 0, 1),
(1720, 20, 0, 1),
(830, 20, 0, 1),
(831, 20, 0, 1),
(1721, 20, 0, 1),
(1722, 20, 0, 1),
(1723, 20, 0, 1),
(1724, 20, 0, 1),
(1725, 20, 0, 1),
(1726, 20, 0, 1),
(1727, 20, 0, 1),
(392, 20, 0, 1),
(1728, 20, 0, 1),
(1729, 20, 0, 1),
(296, 20, 0, 1),
(1730, 20, 0, 1),
(1731, 20, 0, 1),
(339, 20, 0, 1),
(80, 20, 0, 1),
(1732, 20, 0, 1),
(1733, 20, 0, 1),
(1734, 21, 0, 0),
(1735, 21, 0, 1),
(1736, 21, 0, 1),
(1152, 21, 0, 1),
(1734, 21, 0, 1),
(921, 21, 0, 1),
(32, 21, 0, 1),
(1737, 21, 0, 1),
(1170, 21, 0, 1),
(1073, 21, 0, 1),
(929, 21, 0, 1),
(1738, 21, 0, 1),
(1454, 21, 0, 1),
(1161, 21, 0, 1),
(1166, 21, 0, 1),
(1739, 21, 0, 1),
(1740, 21, 0, 1),
(1741, 21, 0, 1),
(1742, 21, 0, 1),
(926, 21, 0, 1),
(752, 21, 0, 1),
(125, 21, 0, 1),
(1743, 21, 0, 1),
(1455, 21, 0, 1),
(1744, 21, 0, 1),
(1745, 21, 0, 1),
(176, 21, 0, 1),
(1746, 21, 0, 1),
(391, 21, 0, 1),
(41, 21, 0, 1),
(988, 21, 0, 1),
(9, 21, 0, 1),
(44, 21, 0, 1),
(1747, 21, 0, 1),
(1748, 21, 0, 1),
(1749, 21, 0, 1),
(1750, 21, 0, 1),
(1751, 21, 0, 1),
(676, 21, 0, 1),
(1163, 21, 0, 1),
(1752, 21, 0, 1),
(1319, 21, 0, 1),
(1753, 21, 0, 1),
(1754, 21, 0, 1),
(464, 21, 0, 1),
(1755, 21, 0, 1),
(1756, 21, 0, 1),
(128, 21, 0, 1),
(147, 21, 0, 1),
(420, 21, 0, 1),
(1757, 21, 0, 1),
(549, 21, 0, 1),
(1758, 21, 0, 1),
(218, 21, 0, 1),
(56, 21, 0, 1),
(198, 21, 0, 1),
(1759, 21, 0, 1),
(524, 21, 0, 1),
(622, 21, 0, 1),
(1760, 21, 0, 1),
(1761, 21, 0, 1),
(1171, 21, 0, 1),
(65, 21, 0, 1),
(1456, 21, 0, 1),
(1762, 21, 0, 1),
(928, 21, 0, 1),
(1270, 21, 0, 1),
(894, 21, 0, 1),
(69, 21, 0, 1),
(1763, 21, 0, 1),
(593, 21, 0, 1),
(1764, 21, 0, 1),
(1765, 21, 0, 1),
(1766, 21, 0, 1),
(1114, 21, 0, 1),
(1767, 21, 0, 1),
(1768, 21, 0, 1),
(1769, 21, 0, 1),
(883, 21, 0, 1),
(1770, 21, 0, 1),
(1237, 21, 0, 1),
(1771, 21, 0, 1),
(1772, 21, 0, 1),
(592, 21, 0, 1),
(403, 21, 0, 1),
(1773, 21, 0, 1),
(1774, 21, 0, 1),
(1683, 21, 0, 1),
(525, 21, 0, 1),
(907, 21, 0, 1),
(258, 21, 0, 1),
(1730, 21, 0, 1),
(1775, 21, 0, 1),
(150, 21, 0, 1),
(119, 21, 0, 1),
(1776, 21, 0, 1),
(1333, 21, 0, 1),
(1390, 21, 0, 1),
(832, 21, 0, 1),
(1777, 21, 0, 1),
(613, 21, 0, 1),
(1778, 21, 0, 1),
(940, 21, 0, 1),
(1779, 21, 0, 1),
(1780, 21, 0, 1),
(1687, 21, 0, 1),
(1781, 21, 0, 1),
(1782, 21, 0, 1),
(1783, 21, 0, 1),
(1784, 21, 0, 1),
(1785, 21, 0, 1),
(1100, 21, 0, 1),
(1786, 21, 0, 1),
(1787, 21, 0, 1),
(1788, 21, 0, 1),
(1789, 21, 0, 1),
(1240, 21, 0, 1),
(1790, 21, 0, 1),
(939, 21, 0, 1),
(1791, 21, 0, 1),
(1792, 21, 0, 1),
(1793, 21, 0, 1),
(1794, 21, 0, 1),
(1283, 21, 0, 1),
(1795, 21, 0, 1),
(1669, 21, 0, 1),
(1796, 21, 0, 1),
(1797, 21, 0, 1),
(1719, 21, 0, 1),
(1798, 21, 0, 1),
(1799, 21, 0, 1),
(1800, 22, 0, 0),
(1801, 22, 0, 0),
(1761, 22, 0, 1),
(1802, 22, 0, 1),
(676, 22, 0, 1),
(258, 22, 0, 1),
(21, 22, 0, 1),
(1803, 22, 0, 1),
(1784, 22, 0, 1),
(1171, 22, 0, 1),
(1804, 22, 0, 1),
(148, 22, 0, 1),
(1373, 22, 0, 1),
(1805, 22, 0, 1),
(752, 22, 0, 1),
(1806, 22, 0, 1),
(1807, 22, 0, 1),
(1808, 22, 0, 1),
(1455, 22, 0, 1),
(1809, 22, 0, 1),
(1810, 22, 0, 1),
(939, 22, 0, 1),
(9, 22, 0, 1),
(1811, 22, 0, 1),
(462, 22, 0, 1),
(1812, 22, 0, 1),
(1813, 22, 0, 1),
(1183, 22, 0, 1),
(218, 22, 0, 1),
(174, 22, 0, 1),
(1814, 22, 0, 1),
(1815, 22, 0, 1),
(1816, 22, 0, 1),
(1817, 22, 0, 1),
(1818, 22, 0, 1),
(32, 22, 0, 1),
(1819, 22, 0, 1),
(649, 22, 0, 1),
(391, 22, 0, 1),
(1070, 22, 0, 1),
(255, 22, 0, 1),
(1493, 22, 0, 1),
(1820, 22, 0, 1),
(1821, 22, 0, 1),
(1687, 22, 0, 1),
(1822, 22, 0, 1),
(1823, 22, 0, 1),
(1824, 22, 0, 1),
(1825, 22, 0, 1),
(762, 22, 0, 1),
(763, 22, 0, 1),
(1826, 22, 0, 1),
(27, 22, 0, 1),
(1217, 22, 0, 1),
(1407, 22, 0, 1),
(672, 22, 0, 1),
(56, 22, 0, 1),
(129, 22, 0, 1),
(1827, 22, 0, 1),
(1828, 22, 0, 1),
(1829, 22, 0, 1),
(1830, 22, 0, 1),
(1831, 22, 0, 1),
(1832, 22, 0, 1),
(1064, 22, 0, 1),
(1833, 22, 0, 1),
(899, 22, 0, 1),
(1652, 22, 0, 1),
(1834, 22, 0, 1),
(1424, 22, 0, 1),
(1449, 22, 0, 1),
(1835, 22, 0, 1),
(1509, 22, 0, 1),
(599, 22, 0, 1),
(1614, 22, 0, 1),
(1836, 22, 0, 1),
(118, 22, 0, 1),
(44, 22, 0, 1),
(1837, 22, 0, 1),
(1838, 22, 0, 1),
(1440, 22, 0, 1),
(1839, 22, 0, 1),
(1840, 22, 0, 1),
(1841, 22, 0, 1),
(1559, 22, 0, 1),
(1495, 22, 0, 1),
(145, 22, 0, 1),
(1842, 22, 0, 1),
(1843, 22, 0, 1),
(713, 22, 0, 1),
(1683, 22, 0, 1),
(1844, 22, 0, 1),
(161, 22, 0, 1),
(245, 22, 0, 1),
(19, 22, 0, 1),
(1845, 22, 0, 1),
(1846, 22, 0, 1),
(1847, 22, 0, 1),
(454, 22, 0, 1),
(1848, 22, 0, 1),
(1849, 22, 0, 1),
(1850, 22, 0, 1),
(1851, 22, 0, 1),
(883, 22, 0, 1),
(1852, 22, 0, 1),
(1853, 22, 0, 1),
(1114, 22, 0, 1),
(329, 22, 0, 1),
(1789, 22, 0, 1),
(1748, 22, 0, 1),
(1854, 22, 0, 1),
(1775, 22, 0, 1),
(1767, 22, 0, 1),
(128, 22, 0, 1),
(1788, 22, 0, 1),
(1855, 22, 0, 1),
(1856, 22, 0, 1),
(1568, 22, 0, 1),
(464, 22, 0, 1),
(1269, 22, 0, 1),
(1857, 22, 0, 1),
(929, 22, 0, 1),
(95, 22, 0, 1),
(1858, 22, 0, 1),
(1859, 22, 0, 1),
(1860, 22, 0, 1),
(1302, 22, 0, 1),
(1861, 22, 0, 1),
(1862, 22, 0, 1),
(1863, 23, 0, 0),
(1864, 23, 0, 0),
(1407, 23, 0, 1),
(1865, 23, 0, 1),
(363, 23, 0, 1),
(1488, 23, 0, 1),
(752, 23, 0, 1),
(1854, 23, 0, 1),
(592, 23, 0, 1),
(1866, 23, 0, 1),
(1867, 23, 0, 1),
(1868, 23, 0, 1),
(1869, 23, 0, 1),
(1870, 23, 0, 1),
(1871, 23, 0, 1),
(1872, 23, 0, 1),
(1406, 23, 0, 1),
(119, 23, 0, 1),
(1873, 23, 0, 1),
(766, 23, 0, 1),
(1874, 23, 0, 1),
(145, 23, 0, 1),
(1791, 23, 0, 1),
(44, 23, 0, 1),
(459, 23, 0, 1),
(198, 23, 0, 1),
(199, 23, 0, 1),
(1730, 23, 0, 1),
(128, 23, 0, 1),
(163, 23, 0, 1),
(1875, 23, 0, 1),
(1047, 23, 0, 1),
(1533, 23, 0, 1),
(1876, 23, 0, 1),
(1104, 23, 0, 1),
(27, 23, 0, 1),
(1537, 23, 0, 1),
(56, 23, 0, 1),
(316, 23, 0, 1),
(1877, 23, 0, 1),
(1808, 23, 0, 1),
(1878, 23, 0, 1),
(1879, 23, 0, 1),
(1687, 23, 0, 1),
(201, 23, 0, 1),
(1835, 23, 0, 1),
(1880, 23, 0, 1),
(1881, 23, 0, 1),
(420, 23, 0, 1),
(45, 23, 0, 1),
(698, 23, 0, 1),
(1882, 23, 0, 1),
(1883, 23, 0, 1),
(1186, 23, 0, 1),
(1343, 23, 0, 1),
(1510, 23, 0, 1),
(692, 23, 0, 1),
(773, 23, 0, 1),
(1109, 23, 0, 1),
(1752, 23, 0, 1),
(1884, 23, 0, 1),
(1451, 23, 0, 1),
(1333, 23, 0, 1),
(1390, 23, 0, 1),
(1885, 23, 0, 1),
(1886, 23, 0, 1),
(1887, 23, 0, 1),
(934, 23, 0, 1),
(1888, 23, 0, 1),
(49, 23, 0, 1),
(1889, 23, 0, 1),
(1890, 23, 0, 1),
(658, 23, 0, 1),
(1891, 23, 0, 1),
(1892, 23, 0, 1),
(1893, 23, 0, 1),
(1894, 23, 0, 1),
(647, 23, 0, 1),
(1895, 23, 0, 1),
(1896, 23, 0, 1),
(1897, 23, 0, 1),
(1898, 23, 0, 1),
(1899, 23, 0, 1),
(765, 23, 0, 1),
(118, 23, 0, 1),
(1900, 23, 0, 1),
(1901, 23, 0, 1),
(32, 23, 0, 1),
(1902, 23, 0, 1),
(464, 23, 0, 1),
(1772, 23, 0, 1),
(288, 23, 0, 1),
(1036, 23, 0, 1),
(929, 23, 0, 1),
(9, 23, 0, 1),
(1903, 23, 0, 1),
(1057, 23, 0, 1),
(1904, 23, 0, 1),
(1269, 23, 0, 1),
(1133, 23, 0, 1),
(1905, 23, 0, 1),
(1906, 23, 0, 1),
(1455, 23, 0, 1),
(883, 23, 0, 1),
(1907, 23, 0, 1),
(391, 23, 0, 1),
(156, 23, 0, 1),
(1908, 23, 0, 1),
(1909, 23, 0, 1),
(1321, 23, 0, 1),
(71, 23, 0, 1),
(1910, 23, 0, 1),
(1911, 23, 0, 1),
(1912, 23, 0, 1),
(256, 23, 0, 1),
(69, 23, 0, 1),
(454, 23, 0, 1),
(1166, 23, 0, 1),
(1913, 23, 0, 1),
(855, 23, 0, 1),
(1914, 23, 0, 1),
(362, 23, 0, 1),
(79, 23, 0, 1),
(1915, 23, 0, 1),
(1916, 23, 0, 1),
(1917, 23, 0, 1),
(1918, 23, 0, 1),
(218, 23, 0, 1),
(821, 23, 0, 1),
(1919, 23, 0, 1),
(1920, 23, 0, 1),
(1921, 23, 0, 1),
(1518, 23, 0, 1),
(1922, 23, 0, 1),
(1710, 23, 0, 1),
(800, 23, 0, 1),
(1923, 23, 0, 1),
(1924, 23, 0, 1),
(1925, 23, 0, 1),
(1926, 23, 0, 1),
(1927, 23, 0, 1),
(1928, 23, 0, 1),
(1929, 23, 0, 1),
(1930, 23, 0, 1),
(1931, 23, 0, 1),
(1094, 23, 0, 1),
(309, 23, 0, 1),
(1112, 23, 0, 1),
(1932, 23, 0, 1),
(1933, 23, 0, 1),
(1534, 23, 0, 1),
(1934, 23, 0, 1),
(1935, 23, 0, 1),
(1401, 23, 0, 1),
(1936, 23, 0, 1),
(1477, 23, 0, 1),
(1476, 23, 0, 1),
(771, 23, 0, 1),
(1937, 23, 0, 1),
(1938, 23, 0, 1),
(264, 23, 0, 1),
(150, 23, 0, 1),
(1939, 23, 0, 1),
(1940, 23, 0, 1),
(1941, 23, 0, 1),
(1942, 23, 0, 1),
(42, 23, 0, 1),
(1943, 23, 0, 1),
(1724, 23, 0, 1),
(1944, 23, 0, 1),
(1945, 23, 0, 1),
(1946, 23, 0, 1),
(1947, 23, 0, 1),
(1948, 23, 0, 1),
(1949, 23, 0, 1),
(1950, 23, 0, 1),
(1951, 23, 0, 1),
(1952, 23, 0, 1),
(1111, 23, 0, 1),
(1641, 23, 0, 1),
(1953, 23, 0, 1),
(125, 23, 0, 1),
(64, 23, 0, 1),
(952, 23, 0, 1),
(1954, 23, 0, 1),
(1955, 23, 0, 1),
(1956, 23, 0, 1),
(1726, 23, 0, 1),
(1957, 23, 0, 1),
(1958, 23, 0, 1),
(1064, 23, 0, 1),
(992, 23, 0, 1),
(1563, 23, 0, 1),
(1959, 23, 0, 1),
(1960, 23, 0, 1),
(1961, 23, 0, 1),
(1304, 23, 0, 1),
(1729, 23, 0, 1),
(192, 23, 0, 1),
(1962, 23, 0, 1),
(1963, 23, 0, 1),
(1964, 23, 0, 1),
(1965, 23, 0, 1),
(1966, 23, 0, 1),
(1967, 23, 0, 1),
(1968, 23, 0, 1),
(1969, 23, 0, 1),
(1970, 23, 0, 1),
(1161, 23, 0, 1),
(1971, 23, 0, 1),
(143, 23, 0, 1),
(1972, 23, 0, 1),
(1973, 23, 0, 1),
(608, 23, 0, 1),
(1974, 23, 0, 1),
(1975, 23, 0, 1),
(1976, 23, 0, 1),
(174, 23, 0, 1),
(1977, 23, 0, 1),
(1978, 23, 0, 1),
(1979, 23, 0, 1),
(1980, 23, 0, 1),
(1981, 23, 0, 1),
(1982, 24, 0, 1),
(363, 24, 0, 1),
(1488, 24, 0, 1),
(752, 24, 0, 1),
(1854, 24, 0, 1),
(592, 24, 0, 1),
(1866, 24, 0, 1),
(1867, 24, 0, 1),
(1868, 24, 0, 1),
(1869, 24, 0, 1);
INSERT INTO `search_keywords` (`keyword`, `foreign_ID`, `table_name`, `position`) VALUES
(1870, 24, 0, 1),
(1871, 24, 0, 1),
(1872, 24, 0, 1),
(1406, 24, 0, 1),
(119, 24, 0, 1),
(1873, 24, 0, 1),
(766, 24, 0, 1),
(1874, 24, 0, 1),
(145, 24, 0, 1),
(1791, 24, 0, 1),
(44, 24, 0, 1),
(459, 24, 0, 1),
(198, 24, 0, 1),
(199, 24, 0, 1),
(1730, 24, 0, 1),
(128, 24, 0, 1),
(163, 24, 0, 1),
(1875, 24, 0, 1),
(1047, 24, 0, 1),
(1533, 24, 0, 1),
(1876, 24, 0, 1),
(1104, 24, 0, 1),
(27, 24, 0, 1),
(1537, 24, 0, 1),
(56, 24, 0, 1),
(316, 24, 0, 1),
(1877, 24, 0, 1),
(1808, 24, 0, 1),
(1878, 24, 0, 1),
(1879, 24, 0, 1),
(1687, 24, 0, 1),
(201, 24, 0, 1),
(1835, 24, 0, 1),
(1983, 24, 0, 1),
(1881, 24, 0, 1),
(420, 24, 0, 1),
(45, 24, 0, 1),
(698, 24, 0, 1),
(1882, 24, 0, 1),
(1883, 24, 0, 1),
(1186, 24, 0, 1),
(1343, 24, 0, 1),
(1510, 24, 0, 1),
(1407, 24, 0, 1),
(692, 24, 0, 1),
(773, 24, 0, 1),
(1109, 24, 0, 1),
(1752, 24, 0, 1),
(1884, 24, 0, 1),
(1451, 24, 0, 1),
(1333, 24, 0, 1),
(1390, 24, 0, 1),
(1885, 24, 0, 1),
(1886, 24, 0, 1),
(1887, 24, 0, 1),
(934, 24, 0, 1),
(1888, 24, 0, 1),
(49, 24, 0, 1),
(1889, 24, 0, 1),
(1890, 24, 0, 1),
(658, 24, 0, 1),
(1891, 24, 0, 1),
(1892, 24, 0, 1),
(1893, 24, 0, 1),
(1894, 24, 0, 1),
(647, 24, 0, 1),
(1895, 24, 0, 1),
(1896, 24, 0, 1),
(1897, 24, 0, 1),
(1898, 24, 0, 1),
(1899, 24, 0, 1),
(765, 24, 0, 1),
(118, 24, 0, 1),
(1900, 24, 0, 1),
(1901, 24, 0, 1),
(32, 24, 0, 1),
(1902, 24, 0, 1),
(464, 24, 0, 1),
(1772, 24, 0, 1),
(288, 24, 0, 1),
(1036, 24, 0, 1),
(929, 24, 0, 1),
(9, 24, 0, 1),
(1903, 24, 0, 1),
(1057, 24, 0, 1),
(1904, 24, 0, 1),
(1269, 24, 0, 1),
(1133, 24, 0, 1),
(1905, 24, 0, 1),
(1906, 24, 0, 1),
(1455, 24, 0, 1),
(883, 24, 0, 1),
(1907, 24, 0, 1),
(391, 24, 0, 1),
(156, 24, 0, 1),
(1908, 24, 0, 1),
(1909, 24, 0, 1),
(1321, 24, 0, 1),
(71, 24, 0, 1),
(1910, 24, 0, 1),
(1911, 24, 0, 1),
(1912, 24, 0, 1),
(256, 24, 0, 1),
(69, 24, 0, 1),
(454, 24, 0, 1),
(1166, 24, 0, 1),
(1913, 24, 0, 1),
(855, 24, 0, 1),
(1984, 24, 0, 1),
(362, 24, 0, 1),
(79, 24, 0, 1),
(1915, 24, 0, 1),
(1916, 24, 0, 1),
(1917, 24, 0, 1),
(1918, 24, 0, 1),
(218, 24, 0, 1),
(821, 24, 0, 1),
(1919, 24, 0, 1),
(1920, 24, 0, 1),
(1921, 24, 0, 1),
(1518, 24, 0, 1),
(1922, 24, 0, 1),
(1710, 24, 0, 1),
(800, 24, 0, 1),
(1923, 24, 0, 1),
(1924, 24, 0, 1),
(1925, 24, 0, 1),
(1926, 24, 0, 1),
(1927, 24, 0, 1),
(1928, 24, 0, 1),
(1929, 24, 0, 1),
(1930, 24, 0, 1),
(1931, 24, 0, 1),
(1094, 24, 0, 1),
(309, 24, 0, 1),
(1112, 24, 0, 1),
(1932, 24, 0, 1),
(1933, 24, 0, 1),
(1534, 24, 0, 1),
(1934, 24, 0, 1),
(1935, 24, 0, 1),
(1401, 24, 0, 1),
(1936, 24, 0, 1),
(1477, 24, 0, 1),
(1476, 24, 0, 1),
(771, 24, 0, 1),
(1937, 24, 0, 1),
(1938, 24, 0, 1),
(264, 24, 0, 1),
(150, 24, 0, 1),
(1939, 24, 0, 1),
(1940, 24, 0, 1),
(1941, 24, 0, 1),
(1942, 24, 0, 1),
(42, 24, 0, 1),
(1943, 24, 0, 1),
(1724, 24, 0, 1),
(1985, 24, 0, 1),
(1945, 24, 0, 1),
(1946, 24, 0, 1),
(1947, 24, 0, 1),
(1948, 24, 0, 1),
(1949, 24, 0, 1),
(1950, 24, 0, 1),
(1951, 24, 0, 1),
(1952, 24, 0, 1),
(1111, 24, 0, 1),
(1641, 24, 0, 1),
(1953, 24, 0, 1),
(125, 24, 0, 1),
(64, 24, 0, 1),
(952, 24, 0, 1),
(1954, 24, 0, 1),
(1955, 24, 0, 1),
(1956, 24, 0, 1),
(1726, 24, 0, 1),
(1957, 24, 0, 1),
(1958, 24, 0, 1),
(1064, 24, 0, 1),
(992, 24, 0, 1),
(1563, 24, 0, 1),
(1959, 24, 0, 1),
(1960, 24, 0, 1),
(1961, 24, 0, 1),
(1304, 24, 0, 1),
(1729, 24, 0, 1),
(192, 24, 0, 1),
(1962, 24, 0, 1),
(1963, 24, 0, 1),
(1964, 24, 0, 1),
(1965, 24, 0, 1),
(1966, 24, 0, 1),
(1967, 24, 0, 1),
(1968, 24, 0, 1),
(1969, 24, 0, 1),
(1970, 24, 0, 1),
(1161, 24, 0, 1),
(1971, 24, 0, 1),
(143, 24, 0, 1),
(1972, 24, 0, 1),
(1973, 24, 0, 1),
(608, 24, 0, 1),
(1974, 24, 0, 1),
(1975, 24, 0, 1),
(1976, 24, 0, 1),
(174, 24, 0, 1),
(1977, 24, 0, 1),
(1978, 24, 0, 1),
(1979, 24, 0, 1),
(1980, 24, 0, 1),
(1986, 24, 0, 1),
(1584, 24, 0, 1),
(1987, 24, 0, 1),
(1988, 24, 0, 1),
(1989, 24, 0, 1),
(1990, 24, 0, 1),
(1991, 24, 0, 1),
(1992, 25, 0, 0),
(1488, 25, 0, 1),
(1993, 25, 0, 1),
(921, 25, 0, 1),
(1994, 25, 0, 1),
(1995, 25, 0, 1),
(423, 25, 0, 1),
(1490, 25, 0, 1),
(340, 25, 0, 1),
(1996, 25, 0, 1),
(1997, 25, 0, 1),
(1926, 25, 0, 1),
(1041, 25, 0, 1),
(979, 25, 0, 1),
(1998, 25, 0, 1),
(1999, 25, 0, 1),
(1738, 25, 0, 1),
(2000, 25, 0, 1),
(1790, 25, 0, 1),
(2001, 25, 0, 1),
(2002, 25, 0, 1),
(454, 25, 0, 1),
(1039, 25, 0, 1),
(2003, 25, 0, 1),
(2004, 25, 0, 1),
(2005, 25, 0, 1),
(2006, 25, 0, 1),
(1646, 25, 0, 1),
(1424, 25, 0, 1),
(1449, 25, 0, 1),
(1765, 25, 0, 1),
(9, 25, 0, 1),
(369, 25, 0, 1),
(2007, 25, 0, 1),
(125, 25, 0, 1),
(1414, 25, 0, 1),
(1988, 25, 0, 1),
(2008, 25, 0, 1),
(2009, 25, 0, 1),
(150, 25, 0, 1),
(1533, 25, 0, 1),
(119, 25, 0, 1),
(2010, 25, 0, 1),
(1671, 25, 0, 1),
(2011, 25, 0, 1),
(2012, 25, 0, 1),
(136, 25, 0, 1),
(1459, 25, 0, 1),
(1170, 25, 0, 1),
(1980, 25, 0, 1),
(2013, 25, 0, 1),
(1454, 25, 0, 1),
(752, 25, 0, 1),
(1743, 25, 0, 1),
(2014, 25, 0, 1),
(2015, 25, 0, 1),
(205, 25, 0, 1),
(973, 25, 0, 1),
(148, 25, 0, 1),
(1169, 25, 0, 1),
(1161, 25, 0, 1),
(145, 25, 0, 1),
(2016, 25, 0, 1),
(2017, 25, 0, 1),
(2018, 25, 0, 1),
(1749, 25, 0, 1),
(791, 25, 0, 1),
(118, 25, 0, 1),
(1609, 25, 0, 1),
(1196, 25, 0, 1),
(1385, 25, 0, 1),
(1444, 25, 0, 1),
(258, 25, 0, 1),
(790, 25, 0, 1),
(2019, 25, 0, 1),
(1641, 25, 0, 1),
(1321, 25, 0, 1),
(1645, 25, 0, 1),
(2020, 25, 0, 1),
(1948, 25, 0, 1),
(894, 25, 0, 1),
(654, 25, 0, 1),
(1390, 25, 0, 1),
(1894, 25, 0, 1),
(2021, 25, 0, 1),
(183, 25, 0, 1),
(41, 25, 0, 1),
(1333, 25, 0, 1),
(1257, 25, 0, 1),
(1630, 25, 0, 1),
(1195, 25, 0, 1),
(2022, 25, 0, 1),
(459, 25, 0, 1),
(49, 25, 0, 1),
(1198, 25, 0, 1),
(131, 25, 0, 1),
(2023, 25, 0, 1),
(2024, 25, 0, 1),
(218, 25, 0, 1),
(56, 25, 0, 1),
(2025, 25, 0, 1),
(2026, 25, 0, 1),
(163, 25, 0, 1),
(2027, 25, 0, 1),
(810, 25, 0, 1),
(2028, 25, 0, 1),
(2029, 25, 0, 1),
(2030, 25, 0, 1),
(2031, 25, 0, 1),
(2032, 25, 0, 1),
(2033, 25, 0, 1),
(1266, 25, 0, 1),
(2034, 25, 0, 1),
(2035, 25, 0, 1),
(599, 25, 0, 1),
(1033, 25, 0, 1),
(2036, 25, 0, 1),
(1112, 25, 0, 1),
(1513, 25, 0, 1),
(1151, 25, 0, 1),
(1769, 25, 0, 1),
(883, 25, 0, 1),
(2037, 25, 0, 1),
(1852, 25, 0, 1),
(395, 25, 0, 1),
(198, 25, 0, 1),
(2038, 25, 0, 1),
(2039, 25, 0, 1),
(168, 25, 0, 1),
(2040, 25, 0, 1),
(80, 25, 0, 1),
(1842, 25, 0, 1),
(32, 25, 0, 1),
(2041, 25, 0, 1),
(1536, 25, 0, 1),
(2042, 25, 0, 1),
(1747, 25, 0, 1),
(1748, 25, 0, 1),
(2043, 25, 0, 1),
(908, 25, 0, 1),
(2044, 25, 0, 1),
(2045, 25, 0, 1),
(2046, 25, 0, 1),
(2047, 25, 0, 1),
(2048, 25, 0, 1),
(2049, 25, 0, 1),
(2050, 25, 0, 1),
(2051, 25, 0, 1),
(2052, 26, 0, 0),
(2053, 26, 0, 0),
(1891, 26, 0, 1),
(2054, 26, 0, 1),
(1144, 26, 0, 1),
(1280, 26, 0, 1),
(752, 26, 0, 1),
(753, 26, 0, 1),
(119, 26, 0, 1),
(894, 26, 0, 1),
(1878, 26, 0, 1),
(1211, 26, 0, 1),
(1454, 26, 0, 1),
(883, 26, 0, 1),
(2055, 26, 0, 1),
(1784, 26, 0, 1),
(1112, 26, 0, 1),
(2056, 26, 0, 1),
(2057, 26, 0, 1),
(940, 26, 0, 1),
(2058, 26, 0, 1),
(2059, 26, 0, 1),
(938, 26, 0, 1),
(2060, 26, 0, 1),
(1790, 26, 0, 1),
(1957, 26, 0, 1),
(1789, 26, 0, 1),
(1396, 26, 0, 1),
(2061, 26, 0, 1),
(1455, 26, 0, 1),
(1809, 26, 0, 1),
(2062, 26, 0, 1),
(2063, 26, 0, 1),
(2064, 26, 0, 1),
(1948, 26, 0, 1),
(2065, 26, 0, 1),
(1121, 26, 0, 1),
(2066, 26, 0, 1),
(1704, 26, 0, 1),
(1434, 26, 0, 1),
(1902, 26, 0, 1),
(32, 26, 0, 1),
(2067, 26, 0, 1),
(2002, 26, 0, 1),
(2068, 26, 0, 1),
(2069, 26, 0, 1),
(2070, 26, 0, 1),
(1453, 26, 0, 1),
(2071, 26, 0, 1),
(2072, 26, 0, 1),
(2073, 26, 0, 1),
(2074, 26, 0, 1),
(2075, 26, 0, 1),
(2000, 26, 0, 1),
(2076, 26, 0, 1),
(2077, 26, 0, 1),
(2078, 26, 0, 1),
(2079, 26, 0, 1),
(45, 26, 0, 1),
(2080, 26, 0, 1),
(2081, 26, 0, 1),
(791, 26, 0, 1),
(1212, 26, 0, 1),
(519, 26, 0, 1),
(593, 26, 0, 1),
(823, 26, 0, 1),
(2082, 26, 0, 1),
(22, 26, 0, 1),
(2083, 26, 0, 1),
(939, 26, 0, 1),
(1743, 26, 0, 1),
(973, 26, 0, 1),
(2084, 26, 0, 1),
(2085, 26, 0, 1),
(196, 26, 0, 1),
(1412, 26, 0, 1),
(2086, 26, 0, 1),
(1776, 26, 0, 1),
(2087, 26, 0, 1),
(2088, 26, 0, 1),
(1326, 26, 0, 1),
(2089, 26, 0, 1),
(1460, 26, 0, 1),
(2090, 26, 0, 1),
(321, 26, 0, 1),
(2091, 26, 0, 1),
(2092, 27, 0, 0),
(2093, 28, 0, 0),
(987, 28, 0, 1),
(2094, 28, 0, 1),
(752, 28, 0, 1),
(894, 28, 0, 1),
(1848, 28, 0, 1),
(2095, 28, 0, 1),
(1111, 28, 0, 1),
(1737, 28, 0, 1),
(2096, 28, 0, 1),
(21, 28, 0, 1),
(2014, 28, 0, 1),
(2097, 28, 0, 1),
(1949, 28, 0, 1),
(44, 28, 0, 1),
(1493, 28, 0, 1),
(457, 28, 0, 1),
(2098, 28, 0, 1),
(2099, 28, 0, 1),
(1784, 28, 0, 1),
(2100, 28, 0, 1),
(2101, 28, 0, 1),
(9, 28, 0, 1),
(63, 28, 0, 1),
(73, 28, 0, 1),
(119, 28, 0, 1),
(1170, 28, 0, 1),
(1739, 28, 0, 1),
(2102, 28, 0, 1),
(2103, 28, 0, 1),
(594, 28, 0, 1),
(1200, 28, 0, 1),
(1370, 28, 0, 1),
(1357, 28, 0, 1),
(2104, 28, 0, 1),
(2105, 28, 0, 1),
(952, 28, 0, 1),
(2106, 28, 0, 1),
(340, 28, 0, 1),
(1620, 28, 0, 1),
(1375, 28, 0, 1),
(2107, 28, 0, 1),
(1115, 28, 0, 1),
(1660, 28, 0, 1),
(145, 28, 0, 1),
(96, 28, 0, 1),
(195, 28, 0, 1),
(2108, 28, 0, 1),
(2109, 28, 0, 1),
(56, 28, 0, 1),
(174, 28, 0, 1),
(2110, 28, 0, 1),
(1384, 28, 0, 1),
(1385, 28, 0, 1),
(1184, 28, 0, 1),
(2111, 28, 0, 1),
(1269, 28, 0, 1),
(1291, 28, 0, 1),
(974, 28, 0, 1),
(1980, 28, 0, 1),
(2112, 28, 0, 1),
(2113, 28, 0, 1),
(1790, 28, 0, 1),
(1743, 28, 0, 1),
(2114, 28, 0, 1),
(1690, 28, 0, 1),
(1776, 28, 0, 1),
(2115, 28, 0, 1),
(41, 28, 0, 1),
(988, 28, 0, 1),
(973, 28, 0, 1),
(2116, 28, 0, 1),
(2117, 28, 0, 1),
(2118, 28, 0, 1),
(2119, 28, 0, 1),
(150, 28, 0, 1),
(1593, 28, 0, 1),
(1484, 28, 0, 1),
(1454, 28, 0, 1),
(287, 28, 0, 1),
(654, 28, 0, 1),
(161, 28, 0, 1),
(1487, 28, 0, 1),
(487, 28, 0, 1),
(1726, 28, 0, 1),
(930, 28, 0, 1),
(361, 28, 0, 1),
(1161, 28, 0, 1),
(2120, 28, 0, 1),
(2121, 28, 0, 1),
(2122, 28, 0, 1),
(391, 28, 0, 1),
(2123, 28, 0, 1),
(92, 28, 0, 1),
(2124, 28, 0, 1),
(2125, 28, 0, 1),
(2126, 28, 0, 1),
(2127, 28, 0, 1),
(1280, 28, 0, 1),
(2128, 28, 0, 1),
(1033, 28, 0, 1),
(1034, 28, 0, 1),
(1134, 28, 0, 1),
(1965, 28, 0, 1),
(2061, 28, 0, 1),
(2129, 28, 0, 1),
(2130, 28, 0, 1),
(1832, 28, 0, 1),
(1396, 28, 0, 1),
(2131, 28, 0, 1),
(2132, 28, 0, 1),
(599, 28, 0, 1),
(979, 28, 0, 1),
(1041, 28, 0, 1),
(1505, 28, 0, 1),
(2133, 28, 0, 1),
(2134, 28, 0, 1),
(2015, 28, 0, 1),
(45, 28, 0, 1),
(2036, 28, 0, 1),
(2135, 28, 0, 1),
(2136, 28, 0, 1),
(2137, 28, 0, 1),
(2138, 29, 0, 0),
(2139, 29, 0, 0),
(752, 29, 0, 1),
(2140, 29, 0, 1),
(753, 29, 0, 1),
(1033, 29, 0, 1),
(2141, 29, 0, 1),
(65, 29, 0, 1),
(119, 29, 0, 1),
(393, 29, 0, 1),
(1039, 29, 0, 1),
(1225, 29, 0, 1),
(1099, 29, 0, 1),
(1095, 29, 0, 1),
(1155, 29, 0, 1),
(395, 29, 0, 1),
(1378, 29, 0, 1),
(1926, 29, 0, 1),
(1375, 29, 0, 1),
(2142, 29, 0, 1),
(616, 29, 0, 1),
(1017, 29, 0, 1),
(1120, 29, 0, 1),
(1848, 29, 0, 1),
(1493, 29, 0, 1),
(287, 29, 0, 1),
(987, 29, 0, 1),
(921, 29, 0, 1),
(599, 29, 0, 1),
(161, 29, 0, 1),
(828, 29, 0, 1),
(258, 29, 0, 1),
(2143, 29, 0, 1),
(1738, 29, 0, 1),
(1488, 29, 0, 1),
(1744, 29, 0, 1),
(1211, 29, 0, 1),
(1734, 29, 0, 1),
(464, 29, 0, 1),
(1158, 29, 0, 1),
(1171, 29, 0, 1),
(423, 29, 0, 1),
(118, 29, 0, 1),
(2144, 29, 0, 1),
(2145, 29, 0, 1),
(2146, 29, 0, 1),
(407, 29, 0, 1),
(821, 29, 0, 1),
(1096, 29, 0, 1),
(791, 29, 0, 1),
(2147, 29, 0, 1),
(1443, 29, 0, 1),
(163, 29, 0, 1),
(183, 29, 0, 1),
(1034, 29, 0, 1),
(1964, 29, 0, 1),
(1441, 29, 0, 1),
(2148, 29, 0, 1),
(2127, 29, 0, 1),
(2149, 29, 0, 1),
(45, 29, 0, 1),
(1739, 29, 0, 1),
(1784, 29, 0, 1),
(2150, 29, 0, 1),
(145, 29, 0, 1),
(1078, 29, 0, 1),
(2151, 29, 0, 1),
(1063, 29, 0, 1),
(2152, 29, 0, 1),
(2153, 29, 0, 1),
(713, 29, 0, 1),
(131, 29, 0, 1),
(930, 29, 0, 1),
(982, 29, 0, 1),
(883, 29, 0, 1),
(1852, 29, 0, 1),
(198, 29, 0, 1),
(199, 29, 0, 1),
(2107, 29, 0, 1),
(2154, 29, 0, 1),
(32, 29, 0, 1),
(894, 29, 0, 1),
(663, 29, 0, 1),
(926, 29, 0, 1),
(80, 29, 0, 1),
(56, 29, 0, 1),
(832, 29, 0, 1),
(209, 29, 0, 1),
(2035, 29, 0, 1),
(2155, 29, 0, 1),
(1616, 29, 0, 1),
(66, 29, 0, 1),
(1742, 29, 0, 1),
(1183, 29, 0, 1),
(1832, 29, 0, 1),
(1900, 29, 0, 1),
(1901, 29, 0, 1),
(2156, 29, 0, 1),
(73, 29, 0, 1),
(1163, 29, 0, 1),
(1818, 29, 0, 1),
(2157, 29, 0, 1),
(2158, 29, 0, 1),
(2159, 29, 0, 1),
(2160, 29, 0, 1),
(525, 29, 0, 1),
(2161, 29, 0, 1),
(2162, 29, 0, 1),
(2163, 29, 0, 1),
(2164, 29, 0, 1),
(2165, 29, 0, 1),
(2166, 29, 0, 1),
(2167, 29, 0, 1),
(2168, 29, 0, 1),
(2169, 29, 0, 1),
(2170, 29, 0, 1),
(1509, 29, 0, 1),
(695, 29, 0, 1),
(2171, 29, 0, 1),
(1072, 29, 0, 1),
(2172, 29, 0, 1),
(582, 29, 0, 1),
(875, 29, 0, 1),
(2173, 29, 0, 1),
(2174, 29, 0, 1),
(1098, 29, 0, 1),
(1605, 29, 0, 1),
(2175, 29, 0, 1),
(2176, 29, 0, 1),
(2177, 29, 0, 1),
(1093, 29, 0, 1),
(2178, 29, 0, 1),
(2179, 29, 0, 1),
(2180, 29, 0, 1),
(2181, 29, 0, 1),
(2182, 29, 0, 1),
(2183, 29, 0, 1),
(2184, 29, 0, 1),
(2185, 29, 0, 1),
(2186, 29, 0, 1),
(2187, 29, 0, 1),
(2188, 29, 0, 1),
(842, 29, 0, 1),
(807, 29, 0, 1),
(2189, 29, 0, 1),
(2190, 30, 0, 0),
(2191, 30, 0, 0),
(2192, 30, 0, 0),
(2194, 3, 1, 0),
(2195, 3, 3, 0),
(2196, 31, 0, 0),
(2197, 31, 0, 0),
(2198, 31, 0, 1),
(2199, 31, 0, 1),
(2200, 31, 0, 1),
(960, 31, 0, 1),
(2193, 31, 0, 1),
(21, 31, 0, 1),
(622, 31, 0, 1),
(2201, 31, 0, 1),
(2197, 31, 0, 1),
(2202, 31, 0, 1),
(2203, 31, 0, 1),
(45, 31, 0, 1),
(2204, 31, 0, 1),
(787, 31, 0, 1),
(593, 31, 0, 1),
(559, 31, 0, 1),
(141, 31, 0, 1),
(2205, 31, 0, 1),
(2206, 31, 0, 1),
(2207, 31, 0, 1),
(2208, 31, 0, 1),
(2209, 31, 0, 1),
(2210, 31, 0, 1),
(1471, 31, 0, 1),
(1025, 31, 0, 1),
(2211, 31, 0, 1),
(965, 31, 0, 1),
(2212, 31, 0, 1),
(198, 31, 0, 1),
(2213, 31, 0, 1),
(2214, 31, 0, 1),
(1043, 31, 0, 1),
(2215, 31, 0, 1),
(205, 31, 0, 1),
(2216, 31, 0, 1),
(886, 31, 0, 1),
(1096, 31, 0, 1),
(256, 31, 0, 1),
(2217, 31, 0, 1),
(2218, 31, 0, 1),
(2219, 31, 0, 1),
(1516, 31, 0, 1),
(123, 31, 0, 1),
(2220, 31, 0, 1),
(163, 31, 0, 1),
(2221, 31, 0, 1),
(1225, 31, 0, 1),
(824, 31, 0, 1),
(2222, 31, 0, 1),
(2223, 31, 0, 1),
(2224, 31, 0, 1),
(819, 31, 0, 1),
(2225, 31, 0, 1),
(118, 31, 0, 1),
(9, 31, 0, 1),
(2226, 31, 0, 1),
(2227, 31, 0, 1),
(478, 31, 0, 1),
(2228, 31, 0, 1),
(2229, 31, 0, 1),
(2230, 31, 0, 1),
(2231, 31, 0, 1),
(94, 31, 0, 1),
(2232, 31, 0, 1),
(2233, 31, 0, 1),
(121, 31, 0, 1),
(65, 31, 0, 1),
(689, 31, 0, 1),
(2234, 31, 0, 1),
(2235, 31, 0, 1),
(2236, 31, 0, 1),
(2237, 31, 0, 1),
(92, 31, 0, 1),
(2238, 31, 0, 1),
(2239, 31, 0, 1),
(1683, 31, 0, 1),
(2240, 31, 0, 1),
(2241, 31, 0, 1),
(2242, 31, 0, 1),
(459, 31, 0, 1),
(227, 31, 0, 1),
(27, 31, 0, 1),
(325, 31, 0, 1),
(2243, 31, 0, 1),
(192, 31, 0, 1),
(2244, 31, 0, 1),
(2245, 31, 0, 1),
(2246, 31, 0, 1),
(2247, 31, 0, 1),
(2248, 31, 0, 1),
(2249, 31, 0, 1),
(1378, 31, 0, 1),
(168, 31, 0, 1),
(2250, 31, 0, 1),
(1621, 31, 0, 1),
(2251, 31, 0, 1),
(1075, 31, 0, 1),
(433, 31, 0, 1),
(2252, 31, 0, 1),
(362, 31, 0, 1),
(980, 31, 0, 1),
(2253, 31, 0, 1),
(2254, 31, 0, 1),
(636, 31, 0, 1),
(46, 31, 0, 1),
(391, 31, 0, 1),
(2255, 31, 0, 1),
(2256, 31, 0, 1),
(1594, 31, 0, 1),
(327, 31, 0, 1),
(342, 31, 0, 1),
(2257, 31, 0, 1),
(2258, 31, 0, 1),
(462, 31, 0, 1),
(2259, 31, 0, 1),
(2260, 31, 0, 1),
(2261, 31, 0, 1),
(1757, 31, 0, 1),
(2262, 31, 0, 1),
(2263, 31, 0, 1),
(652, 31, 0, 1),
(34, 31, 0, 1),
(1278, 31, 0, 1),
(2264, 31, 0, 1),
(2265, 31, 0, 1),
(2266, 31, 0, 1),
(494, 31, 0, 1),
(1178, 31, 0, 1),
(2267, 31, 0, 1),
(2268, 31, 0, 1),
(1662, 31, 0, 1),
(599, 31, 0, 1),
(183, 31, 0, 1),
(608, 31, 0, 1),
(2269, 31, 0, 1),
(2270, 31, 0, 1),
(925, 31, 0, 1),
(2271, 31, 0, 1),
(1867, 31, 0, 1),
(55, 31, 0, 1),
(662, 31, 0, 1),
(56, 31, 0, 1),
(1048, 31, 0, 1),
(463, 31, 0, 1),
(2272, 31, 0, 1),
(2273, 31, 0, 1),
(268, 31, 0, 1),
(2274, 31, 0, 1),
(2275, 31, 0, 1),
(1782, 31, 0, 1),
(569, 31, 0, 1),
(1022, 31, 0, 1),
(217, 31, 0, 1),
(161, 31, 0, 1),
(2276, 31, 0, 1),
(2277, 31, 0, 1),
(230, 31, 0, 1),
(1032, 31, 0, 1),
(860, 31, 0, 1),
(2278, 31, 0, 1),
(2279, 31, 0, 1),
(2280, 31, 0, 1),
(2281, 31, 0, 1),
(2282, 31, 0, 1),
(224, 31, 0, 1),
(2283, 31, 0, 1),
(2284, 31, 0, 1),
(2285, 31, 0, 1),
(557, 31, 0, 1),
(2286, 31, 0, 1),
(1215, 31, 0, 1),
(2287, 31, 0, 1),
(2288, 31, 0, 1),
(500, 31, 0, 1),
(2289, 31, 0, 1),
(2290, 31, 0, 1),
(2291, 31, 0, 1),
(869, 31, 0, 1),
(841, 31, 0, 1),
(525, 31, 0, 1),
(1355, 31, 0, 1),
(2292, 31, 0, 1),
(226, 31, 0, 1),
(454, 31, 0, 1),
(2293, 31, 0, 1),
(1566, 31, 0, 1),
(2294, 31, 0, 1),
(41, 31, 0, 1),
(2295, 31, 0, 1),
(1099, 31, 0, 1),
(1738, 31, 0, 1),
(2296, 31, 0, 1),
(73, 31, 0, 1),
(1575, 31, 0, 1),
(39, 31, 0, 1),
(2297, 31, 0, 1),
(564, 31, 0, 1),
(2298, 31, 0, 1),
(2299, 31, 0, 1),
(551, 31, 0, 1),
(2300, 31, 0, 1),
(95, 31, 0, 1),
(2301, 31, 0, 1),
(2302, 31, 0, 1),
(641, 31, 0, 1),
(2303, 31, 0, 1),
(1825, 31, 0, 1),
(361, 31, 0, 1),
(618, 31, 0, 1),
(1078, 31, 0, 1),
(2304, 31, 0, 1),
(866, 31, 0, 1),
(2305, 31, 0, 1),
(2306, 31, 0, 1),
(2307, 31, 0, 1),
(2308, 31, 0, 1),
(447, 31, 0, 1),
(2309, 31, 0, 1),
(2310, 31, 0, 1),
(2311, 31, 0, 1),
(164, 31, 0, 1),
(2312, 31, 0, 1),
(2313, 31, 0, 1),
(2314, 31, 0, 1),
(2315, 31, 0, 1),
(2316, 31, 0, 1),
(2196, 31, 0, 1),
(2317, 31, 0, 1),
(507, 31, 0, 1),
(2318, 31, 0, 1),
(2319, 31, 0, 1),
(2320, 31, 0, 1),
(2321, 31, 0, 1),
(580, 31, 0, 1),
(2322, 31, 0, 1),
(2323, 31, 0, 1),
(2324, 31, 0, 1),
(2325, 31, 0, 1),
(630, 31, 0, 1),
(2326, 31, 0, 1),
(2327, 31, 0, 1),
(2328, 31, 0, 1),
(1489, 31, 0, 1),
(258, 31, 0, 1),
(1303, 31, 0, 1),
(210, 31, 0, 1),
(2329, 32, 0, 0),
(2330, 32, 0, 0),
(2331, 32, 0, 0),
(2332, 32, 0, 0),
(2333, 32, 0, 1),
(2197, 32, 0, 1),
(2330, 32, 0, 1),
(10, 32, 0, 1),
(2334, 32, 0, 1),
(39, 32, 0, 1),
(2335, 32, 0, 1),
(163, 32, 0, 1),
(2336, 32, 0, 1),
(2210, 32, 0, 1),
(693, 32, 0, 1),
(2240, 32, 0, 1),
(2337, 32, 0, 1),
(205, 32, 0, 1),
(581, 32, 0, 1),
(551, 32, 0, 1),
(1594, 32, 0, 1),
(2338, 32, 0, 1),
(445, 32, 0, 1),
(200, 32, 0, 1),
(94, 32, 0, 1),
(2339, 32, 0, 1),
(494, 32, 0, 1),
(462, 32, 0, 1),
(402, 32, 0, 1),
(2340, 32, 0, 1),
(2236, 32, 0, 1),
(164, 32, 0, 1),
(2341, 32, 0, 1),
(2342, 32, 0, 1),
(2343, 32, 0, 1),
(1217, 32, 0, 1),
(492, 32, 0, 1),
(493, 32, 0, 1),
(2344, 32, 0, 1),
(685, 32, 0, 1),
(168, 32, 0, 1),
(1503, 32, 0, 1),
(141, 32, 0, 1),
(45, 32, 0, 1),
(2270, 32, 0, 1),
(2345, 32, 0, 1),
(226, 32, 0, 1),
(2346, 32, 0, 1),
(2347, 32, 0, 1),
(181, 32, 0, 1),
(2348, 32, 0, 1),
(227, 32, 0, 1),
(2349, 32, 0, 1),
(362, 32, 0, 1),
(621, 32, 0, 1),
(2350, 32, 0, 1),
(2351, 32, 0, 1),
(21, 32, 0, 1),
(2352, 32, 0, 1),
(44, 32, 0, 1),
(2353, 32, 0, 1),
(329, 32, 0, 1),
(2354, 32, 0, 1),
(2266, 32, 0, 1),
(32, 32, 0, 1),
(2219, 32, 0, 1),
(2355, 32, 0, 1),
(2356, 32, 0, 1),
(2357, 32, 0, 1),
(2358, 32, 0, 1),
(2359, 32, 0, 1),
(1471, 32, 0, 1),
(2320, 32, 0, 1),
(56, 32, 0, 1),
(2360, 32, 0, 1),
(2361, 32, 0, 1),
(2362, 32, 0, 1),
(2363, 32, 0, 1),
(2364, 32, 0, 1),
(306, 32, 0, 1),
(2365, 32, 0, 1),
(1099, 32, 0, 1),
(1043, 32, 0, 1),
(2366, 32, 0, 1),
(586, 32, 0, 1),
(201, 32, 0, 1),
(145, 32, 0, 1),
(2367, 32, 0, 1),
(2368, 32, 0, 1),
(650, 32, 0, 1),
(1065, 32, 0, 1),
(63, 32, 0, 1),
(73, 32, 0, 1),
(2369, 32, 0, 1),
(162, 32, 0, 1),
(2370, 32, 0, 1),
(2371, 32, 0, 1),
(1047, 32, 0, 1),
(795, 32, 0, 1),
(2372, 32, 0, 1),
(84, 32, 0, 1),
(2373, 32, 0, 1),
(467, 32, 0, 1),
(2374, 32, 0, 1),
(2375, 32, 0, 1),
(118, 32, 0, 1),
(41, 32, 0, 1),
(230, 32, 0, 1),
(323, 32, 0, 1),
(6, 32, 0, 1),
(2376, 32, 0, 1),
(1266, 32, 0, 1),
(866, 32, 0, 1),
(974, 32, 0, 1),
(2377, 32, 0, 1),
(2378, 32, 0, 1),
(72, 32, 0, 1),
(2379, 32, 0, 1),
(2380, 32, 0, 1),
(27, 32, 0, 1),
(2381, 32, 0, 1),
(2382, 32, 0, 1),
(2383, 32, 0, 1),
(966, 32, 0, 1),
(34, 32, 0, 1),
(2384, 32, 0, 1),
(1474, 32, 0, 1),
(139, 32, 0, 1),
(2203, 32, 0, 1),
(2385, 32, 0, 1),
(819, 32, 0, 1),
(74, 32, 0, 1),
(234, 32, 0, 1),
(1757, 32, 0, 1),
(2221, 32, 0, 1),
(2386, 32, 0, 1),
(2387, 32, 0, 1),
(766, 32, 0, 1),
(1484, 32, 0, 1),
(183, 32, 0, 1),
(2388, 32, 0, 1),
(2389, 32, 0, 1),
(2272, 32, 0, 1),
(1048, 32, 0, 1),
(1022, 32, 0, 1),
(217, 32, 0, 1),
(2390, 32, 0, 1),
(2391, 32, 0, 1),
(2148, 32, 0, 1),
(2392, 32, 0, 1),
(2393, 32, 0, 1),
(195, 32, 0, 1),
(2193, 32, 0, 1),
(2394, 32, 0, 1),
(525, 32, 0, 1),
(2226, 32, 0, 1),
(297, 32, 0, 1),
(221, 32, 0, 1),
(2395, 32, 0, 1),
(272, 32, 0, 1),
(2396, 32, 0, 1),
(583, 32, 0, 1),
(30, 32, 0, 1),
(2207, 32, 0, 1),
(2397, 32, 0, 1),
(2398, 32, 0, 1),
(2399, 32, 0, 1),
(208, 32, 0, 1),
(123, 32, 0, 1),
(2400, 32, 0, 1),
(2401, 32, 0, 1),
(1075, 32, 0, 1),
(879, 32, 0, 1),
(197, 32, 0, 1),
(192, 32, 0, 1),
(2402, 32, 0, 1),
(2403, 32, 0, 1),
(2404, 32, 0, 1),
(2405, 32, 0, 1),
(2406, 32, 0, 1),
(255, 32, 0, 1),
(2407, 32, 0, 1),
(2408, 32, 0, 1),
(92, 32, 0, 1),
(2238, 32, 0, 1),
(2409, 32, 0, 1),
(459, 32, 0, 1),
(2410, 32, 0, 1),
(2411, 32, 0, 1),
(2305, 32, 0, 1),
(2412, 32, 0, 1),
(256, 32, 0, 1),
(1129, 32, 0, 1),
(2413, 32, 0, 1),
(198, 32, 0, 1),
(2414, 32, 0, 1),
(2415, 32, 0, 1),
(429, 32, 0, 1),
(93, 32, 0, 1),
(515, 32, 0, 1),
(75, 32, 0, 1),
(2416, 32, 0, 1),
(703, 32, 0, 1),
(55, 32, 0, 1),
(652, 32, 0, 1),
(1283, 32, 0, 1),
(2417, 32, 0, 1),
(1176, 32, 0, 1),
(592, 32, 0, 1),
(708, 32, 0, 1),
(193, 32, 0, 1),
(327, 32, 0, 1),
(143, 32, 0, 1),
(2418, 32, 0, 1),
(658, 32, 0, 1),
(2419, 32, 0, 1),
(210, 32, 0, 1),
(2420, 33, 0, 0),
(2421, 33, 0, 0),
(2333, 33, 0, 1),
(2420, 33, 0, 1),
(2422, 33, 0, 1),
(2423, 33, 0, 1),
(2424, 33, 0, 1),
(2425, 33, 0, 1),
(2426, 33, 0, 1),
(141, 33, 0, 1),
(147, 33, 0, 1),
(559, 33, 0, 1),
(32, 33, 0, 1),
(2427, 33, 0, 1),
(2428, 33, 0, 1),
(563, 33, 0, 1),
(2236, 33, 0, 1),
(205, 33, 0, 1),
(150, 33, 0, 1),
(2429, 33, 0, 1),
(566, 33, 0, 1),
(2430, 33, 0, 1),
(94, 33, 0, 1),
(362, 33, 0, 1),
(2431, 33, 0, 1),
(2221, 33, 0, 1),
(673, 33, 0, 1),
(2432, 33, 0, 1),
(2433, 33, 0, 1),
(192, 33, 0, 1),
(1595, 33, 0, 1),
(1075, 33, 0, 1),
(2434, 33, 0, 1),
(181, 33, 0, 1),
(2219, 33, 0, 1),
(121, 33, 0, 1),
(2435, 33, 0, 1),
(1672, 33, 0, 1),
(1120, 33, 0, 1),
(593, 33, 0, 1),
(2436, 33, 0, 1),
(2230, 33, 0, 1),
(9, 33, 0, 1),
(551, 33, 0, 1),
(139, 33, 0, 1),
(183, 33, 0, 1),
(608, 33, 0, 1),
(569, 33, 0, 1),
(2437, 33, 0, 1),
(1429, 33, 0, 1),
(2206, 33, 0, 1),
(2218, 33, 0, 1),
(505, 33, 0, 1),
(11, 33, 0, 1),
(507, 33, 0, 1),
(1732, 33, 0, 1),
(564, 33, 0, 1),
(45, 33, 0, 1),
(2438, 33, 0, 1),
(2439, 33, 0, 1),
(175, 33, 0, 1),
(2440, 33, 0, 1),
(227, 33, 0, 1),
(553, 33, 0, 1),
(323, 33, 0, 1),
(73, 33, 0, 1),
(370, 33, 0, 1),
(2308, 33, 0, 1),
(2441, 33, 0, 1),
(2442, 33, 0, 1),
(2357, 33, 0, 1),
(65, 33, 0, 1),
(186, 33, 0, 1),
(295, 33, 0, 1),
(2443, 33, 0, 1),
(285, 33, 0, 1),
(2444, 33, 0, 1),
(69, 33, 0, 1),
(1677, 33, 0, 1),
(2445, 33, 0, 1),
(2446, 33, 0, 1),
(2447, 33, 0, 1),
(2412, 33, 0, 1),
(462, 33, 0, 1),
(198, 33, 0, 1),
(199, 33, 0, 1),
(234, 33, 0, 1),
(123, 33, 0, 1),
(2448, 33, 0, 1),
(2449, 33, 0, 1),
(325, 33, 0, 1),
(2450, 33, 0, 1),
(598, 33, 0, 1),
(1217, 33, 0, 1),
(2451, 33, 0, 1),
(2452, 33, 0, 1),
(27, 33, 0, 1),
(2204, 33, 0, 1),
(1047, 33, 0, 1),
(2453, 33, 0, 1),
(621, 33, 0, 1),
(819, 33, 0, 1),
(42, 33, 0, 1),
(2454, 33, 0, 1),
(131, 33, 0, 1),
(1139, 33, 0, 1),
(494, 33, 0, 1),
(693, 33, 0, 1),
(2455, 33, 0, 1),
(2456, 33, 0, 1),
(197, 33, 0, 1),
(1817, 33, 0, 1),
(2383, 33, 0, 1),
(2457, 33, 0, 1),
(422, 33, 0, 1),
(2458, 33, 0, 1),
(622, 33, 0, 1),
(2400, 33, 0, 1),
(2459, 33, 0, 1),
(2460, 33, 0, 1),
(391, 33, 0, 1),
(2461, 33, 0, 1),
(2244, 33, 0, 1),
(2462, 33, 0, 1),
(1549, 33, 0, 1),
(1165, 33, 0, 1),
(2463, 33, 0, 1),
(2464, 33, 0, 1),
(1078, 33, 0, 1),
(485, 33, 0, 1),
(388, 33, 0, 1),
(21, 33, 0, 1),
(727, 33, 0, 1),
(1096, 33, 0, 1),
(2465, 33, 0, 1),
(1036, 33, 0, 1),
(2466, 33, 0, 1),
(210, 33, 0, 1),
(2467, 34, 0, 0),
(2468, 34, 0, 0),
(2333, 34, 0, 1),
(2197, 34, 0, 1),
(224, 34, 0, 1),
(2469, 34, 0, 1),
(2340, 34, 0, 1),
(1078, 34, 0, 1),
(1036, 34, 0, 1),
(45, 34, 0, 1),
(374, 34, 0, 1),
(2345, 34, 0, 1),
(2470, 34, 0, 1),
(2471, 34, 0, 1),
(2472, 34, 0, 1),
(2285, 34, 0, 1),
(196, 34, 0, 1),
(2473, 34, 0, 1),
(195, 34, 0, 1),
(459, 34, 0, 1),
(557, 34, 0, 1),
(2474, 34, 0, 1),
(2475, 34, 0, 1),
(2321, 34, 0, 1),
(2476, 34, 0, 1),
(39, 34, 0, 1),
(258, 34, 0, 1),
(957, 34, 0, 1),
(408, 34, 0, 1),
(2477, 34, 0, 1),
(2478, 34, 0, 1),
(2211, 34, 0, 1),
(2479, 34, 0, 1),
(2480, 34, 0, 1),
(2481, 34, 0, 1),
(693, 34, 0, 1),
(2482, 34, 0, 1),
(2430, 34, 0, 1),
(317, 34, 0, 1),
(141, 34, 0, 1),
(2238, 34, 0, 1),
(505, 34, 0, 1),
(107, 34, 0, 1),
(535, 34, 0, 1),
(823, 34, 0, 1),
(2483, 34, 0, 1),
(2484, 34, 0, 1),
(1334, 34, 0, 1),
(221, 34, 0, 1),
(500, 34, 0, 1),
(92, 34, 0, 1),
(2453, 34, 0, 1),
(2485, 34, 0, 1),
(2444, 34, 0, 1),
(145, 34, 0, 1),
(553, 34, 0, 1),
(2486, 34, 0, 1),
(2487, 34, 0, 1),
(2488, 34, 0, 1),
(2206, 34, 0, 1),
(2489, 34, 0, 1),
(109, 34, 0, 1),
(2284, 34, 0, 1),
(2490, 34, 0, 1),
(1022, 34, 0, 1),
(2491, 34, 0, 1),
(2492, 34, 0, 1),
(73, 34, 0, 1),
(126, 34, 0, 1),
(2493, 34, 0, 1),
(226, 34, 0, 1),
(2494, 34, 0, 1),
(2495, 34, 0, 1),
(143, 34, 0, 1),
(2496, 34, 0, 1),
(120, 34, 0, 1),
(478, 34, 0, 1),
(583, 34, 0, 1),
(2497, 34, 0, 1),
(602, 34, 0, 1),
(2498, 34, 0, 1),
(2221, 34, 0, 1),
(2499, 34, 0, 1),
(2500, 34, 0, 1),
(1659, 34, 0, 1),
(230, 34, 0, 1),
(2351, 34, 0, 1),
(593, 34, 0, 1),
(551, 34, 0, 1),
(2501, 34, 0, 1),
(14, 34, 0, 1),
(2502, 34, 0, 1),
(2503, 34, 0, 1),
(2504, 34, 0, 1),
(2505, 34, 0, 1),
(2506, 34, 0, 1),
(2507, 34, 0, 1),
(2256, 34, 0, 1),
(2508, 34, 0, 1),
(175, 34, 0, 1),
(1179, 34, 0, 1),
(552, 34, 0, 1),
(494, 34, 0, 1),
(2509, 34, 0, 1),
(297, 34, 0, 1),
(1215, 34, 0, 1),
(127, 34, 0, 1),
(1318, 34, 0, 1),
(2510, 34, 0, 1),
(321, 34, 0, 1),
(1757, 34, 0, 1),
(2511, 34, 0, 1),
(2272, 34, 0, 1),
(2512, 34, 0, 1),
(2513, 34, 0, 1),
(2514, 34, 0, 1),
(1621, 34, 0, 1),
(2515, 34, 0, 1),
(2516, 34, 0, 1),
(60, 34, 0, 1),
(2517, 34, 0, 1),
(2518, 34, 0, 1),
(2390, 34, 0, 1),
(148, 34, 0, 1),
(808, 34, 0, 1),
(161, 34, 0, 1),
(2364, 34, 0, 1),
(2519, 34, 0, 1),
(1211, 34, 0, 1),
(2000, 34, 0, 1),
(824, 34, 0, 1),
(1653, 34, 0, 1),
(515, 34, 0, 1),
(2520, 34, 0, 1),
(2521, 34, 0, 1),
(2522, 34, 0, 1),
(2523, 34, 0, 1),
(94, 34, 0, 1),
(65, 34, 0, 1),
(2524, 34, 0, 1),
(845, 34, 0, 1),
(1471, 34, 0, 1),
(2525, 34, 0, 1),
(2526, 34, 0, 1),
(2258, 34, 0, 1),
(1058, 34, 0, 1),
(167, 34, 0, 1),
(362, 34, 0, 1),
(869, 34, 0, 1),
(517, 34, 0, 1),
(2527, 34, 0, 1),
(391, 34, 0, 1),
(2528, 34, 0, 1),
(2236, 34, 0, 1),
(157, 34, 0, 1),
(2233, 34, 0, 1),
(1506, 34, 0, 1),
(2290, 34, 0, 1),
(210, 34, 0, 1),
(2529, 35, 0, 0),
(2530, 35, 0, 0),
(2531, 35, 0, 0),
(2333, 35, 0, 1),
(2321, 35, 0, 1),
(2492, 35, 0, 1),
(2532, 35, 0, 1),
(2238, 35, 0, 1),
(1036, 35, 0, 1),
(2533, 35, 0, 1),
(323, 35, 0, 1),
(2534, 35, 0, 1),
(1303, 35, 0, 1),
(2236, 35, 0, 1),
(256, 35, 0, 1),
(1595, 35, 0, 1),
(2535, 35, 0, 1),
(40, 35, 0, 1),
(2221, 35, 0, 1),
(2536, 35, 0, 1),
(2219, 35, 0, 1),
(94, 35, 0, 1),
(507, 35, 0, 1),
(2537, 35, 0, 1),
(593, 35, 0, 1),
(183, 35, 0, 1),
(2222, 35, 0, 1),
(1120, 35, 0, 1),
(45, 35, 0, 1),
(362, 35, 0, 1),
(1179, 35, 0, 1),
(1821, 35, 0, 1),
(1687, 35, 0, 1),
(2538, 35, 0, 1),
(713, 35, 0, 1),
(2340, 35, 0, 1),
(120, 35, 0, 1),
(582, 35, 0, 1),
(2539, 35, 0, 1),
(107, 35, 0, 1),
(685, 35, 0, 1),
(2540, 35, 0, 1),
(274, 35, 0, 1),
(2541, 35, 0, 1),
(2542, 35, 0, 1),
(255, 35, 0, 1),
(2543, 35, 0, 1),
(2544, 35, 0, 1),
(123, 35, 0, 1),
(2545, 35, 0, 1),
(2395, 35, 0, 1),
(272, 35, 0, 1),
(9, 35, 0, 1),
(2546, 35, 0, 1),
(2283, 35, 0, 1),
(866, 35, 0, 1),
(884, 35, 0, 1),
(192, 35, 0, 1),
(73, 35, 0, 1),
(1495, 35, 0, 1),
(2204, 35, 0, 1),
(960, 35, 0, 1),
(2547, 35, 0, 1),
(2548, 35, 0, 1),
(2549, 35, 0, 1),
(2550, 35, 0, 1),
(174, 35, 0, 1),
(2551, 35, 0, 1),
(29, 35, 0, 1),
(2552, 35, 0, 1),
(2553, 35, 0, 1),
(2554, 35, 0, 1),
(121, 35, 0, 1),
(118, 35, 0, 1),
(2555, 35, 0, 1),
(19, 35, 0, 1),
(506, 35, 0, 1),
(2505, 35, 0, 1),
(2556, 35, 0, 1),
(21, 35, 0, 1),
(172, 35, 0, 1),
(2557, 35, 0, 1),
(2558, 35, 0, 1),
(599, 35, 0, 1),
(2388, 35, 0, 1),
(2559, 35, 0, 1),
(1969, 35, 0, 1),
(2560, 35, 0, 1),
(2561, 35, 0, 1),
(1058, 35, 0, 1),
(2562, 35, 0, 1),
(695, 35, 0, 1),
(1002, 35, 0, 1),
(2563, 35, 0, 1),
(2564, 35, 0, 1),
(2565, 35, 0, 1),
(2000, 35, 0, 1),
(2566, 35, 0, 1),
(39, 35, 0, 1),
(2567, 35, 0, 1),
(92, 35, 0, 1),
(2568, 35, 0, 1),
(2569, 35, 0, 1),
(2570, 35, 0, 1),
(2571, 35, 0, 1),
(2572, 35, 0, 1),
(2573, 35, 0, 1),
(219, 35, 0, 1),
(288, 35, 0, 1),
(376, 35, 0, 1),
(462, 35, 0, 1),
(2240, 35, 0, 1),
(2574, 35, 0, 1),
(2447, 35, 0, 1),
(652, 35, 0, 1),
(227, 35, 0, 1),
(2575, 35, 0, 1),
(2576, 35, 0, 1),
(2577, 35, 0, 1),
(874, 35, 0, 1),
(623, 35, 0, 1),
(2578, 35, 0, 1),
(2488, 35, 0, 1),
(463, 35, 0, 1),
(2579, 35, 0, 1),
(163, 35, 0, 1),
(2580, 35, 0, 1),
(2390, 35, 0, 1),
(726, 35, 0, 1),
(2581, 35, 0, 1),
(2582, 35, 0, 1),
(2583, 35, 0, 1),
(2584, 35, 0, 1),
(2585, 35, 0, 1),
(198, 35, 0, 1),
(199, 35, 0, 1),
(2586, 35, 0, 1),
(2587, 35, 0, 1),
(2588, 35, 0, 1),
(1977, 35, 0, 1),
(2589, 35, 0, 1),
(2590, 35, 0, 1),
(2591, 35, 0, 1),
(2592, 35, 0, 1),
(2593, 35, 0, 1),
(2594, 35, 0, 1),
(2595, 35, 0, 1),
(470, 35, 0, 1),
(2596, 35, 0, 1),
(2597, 35, 0, 1),
(2598, 35, 0, 1),
(2599, 35, 0, 1),
(1089, 35, 0, 1),
(2600, 35, 0, 1),
(186, 35, 0, 1),
(2601, 35, 0, 1),
(2602, 35, 0, 1),
(2603, 35, 0, 1),
(32, 35, 0, 1),
(2604, 35, 0, 1),
(690, 35, 0, 1),
(205, 35, 0, 1),
(2605, 35, 0, 1),
(297, 35, 0, 1),
(2606, 35, 0, 1),
(1278, 35, 0, 1),
(2607, 35, 0, 1),
(2608, 35, 0, 1),
(210, 35, 0, 1),
(2609, 36, 0, 0),
(2610, 36, 0, 0),
(2333, 36, 0, 1),
(2492, 36, 0, 1),
(2611, 36, 0, 1),
(2222, 36, 0, 1),
(680, 36, 0, 1),
(625, 36, 0, 1),
(72, 36, 0, 1),
(2544, 36, 0, 1),
(199, 36, 0, 1),
(454, 36, 0, 1),
(73, 36, 0, 1),
(45, 36, 0, 1),
(2612, 36, 0, 1),
(2613, 36, 0, 1),
(163, 36, 0, 1),
(2614, 36, 0, 1),
(1179, 36, 0, 1),
(481, 36, 0, 1),
(84, 36, 0, 1),
(2615, 36, 0, 1),
(2373, 36, 0, 1),
(839, 36, 0, 1),
(2616, 36, 0, 1),
(2617, 36, 0, 1),
(240, 36, 0, 1),
(23, 36, 0, 1),
(2618, 36, 0, 1),
(517, 36, 0, 1),
(491, 36, 0, 1),
(2379, 36, 0, 1),
(401, 36, 0, 1),
(2619, 36, 0, 1),
(2620, 36, 0, 1),
(713, 36, 0, 1),
(658, 36, 0, 1),
(2621, 36, 0, 1),
(121, 36, 0, 1),
(123, 36, 0, 1),
(2622, 36, 0, 1),
(2623, 36, 0, 1),
(2624, 36, 0, 1),
(230, 36, 0, 1),
(2625, 36, 0, 1),
(297, 36, 0, 1),
(569, 36, 0, 1),
(1036, 36, 0, 1),
(2626, 36, 0, 1),
(395, 36, 0, 1),
(2627, 36, 0, 1),
(30, 36, 0, 1),
(2628, 36, 0, 1),
(309, 36, 0, 1),
(192, 36, 0, 1),
(118, 36, 0, 1),
(1495, 36, 0, 1),
(1969, 36, 0, 1),
(27, 36, 0, 1),
(2629, 36, 0, 1),
(2630, 36, 0, 1),
(388, 36, 0, 1),
(2631, 36, 0, 1),
(65, 36, 0, 1),
(2563, 36, 0, 1),
(86, 36, 0, 1),
(2632, 36, 0, 1),
(693, 36, 0, 1),
(2210, 36, 0, 1),
(255, 36, 0, 1),
(2633, 36, 0, 1),
(2634, 36, 0, 1),
(2635, 36, 0, 1),
(2636, 36, 0, 1),
(507, 36, 0, 1),
(2637, 36, 0, 1),
(979, 36, 0, 1),
(165, 36, 0, 1),
(1008, 36, 0, 1),
(461, 36, 0, 1),
(459, 36, 0, 1),
(9, 36, 0, 1),
(2638, 36, 0, 1),
(109, 36, 0, 1),
(2639, 36, 0, 1),
(2640, 36, 0, 1),
(2219, 36, 0, 1),
(564, 36, 0, 1),
(94, 36, 0, 1),
(618, 36, 0, 1),
(127, 36, 0, 1),
(2641, 36, 0, 1),
(2642, 36, 0, 1),
(874, 36, 0, 1),
(623, 36, 0, 1),
(362, 36, 0, 1),
(2643, 36, 0, 1),
(2644, 36, 0, 1),
(2423, 36, 0, 1),
(2645, 36, 0, 1),
(2646, 36, 0, 1),
(2240, 36, 0, 1),
(175, 36, 0, 1),
(2647, 36, 0, 1),
(2648, 36, 0, 1),
(2649, 36, 0, 1),
(2650, 36, 0, 1),
(2651, 36, 0, 1),
(2652, 36, 0, 1),
(2653, 36, 0, 1),
(2654, 36, 0, 1),
(168, 36, 0, 1),
(2655, 36, 0, 1),
(2656, 36, 0, 1),
(798, 36, 0, 1),
(2657, 36, 0, 1),
(1069, 36, 0, 1),
(1064, 36, 0, 1),
(1637, 36, 0, 1),
(2203, 36, 0, 1),
(145, 36, 0, 1),
(2658, 36, 0, 1),
(2659, 36, 0, 1),
(2660, 36, 0, 1),
(2582, 36, 0, 1),
(263, 36, 0, 1),
(2661, 36, 0, 1),
(236, 36, 0, 1),
(621, 36, 0, 1),
(56, 36, 0, 1),
(2662, 36, 0, 1),
(2663, 36, 0, 1),
(183, 36, 0, 1),
(445, 36, 0, 1),
(973, 36, 0, 1),
(2664, 36, 0, 1),
(2665, 36, 0, 1),
(2666, 36, 0, 1),
(2667, 36, 0, 1),
(2236, 36, 0, 1),
(2364, 36, 0, 1),
(2447, 36, 0, 1),
(1652, 36, 0, 1),
(2390, 36, 0, 1),
(2668, 36, 0, 1),
(2669, 36, 0, 1),
(1109, 36, 0, 1),
(2670, 36, 0, 1),
(2671, 36, 0, 1),
(2672, 36, 0, 1),
(2673, 36, 0, 1),
(1672, 36, 0, 1),
(2674, 36, 0, 1),
(2675, 36, 0, 1),
(462, 36, 0, 1),
(49, 36, 0, 1),
(2676, 36, 0, 1),
(2677, 36, 0, 1),
(2678, 36, 0, 1),
(285, 36, 0, 1),
(2679, 36, 0, 1),
(1334, 36, 0, 1),
(391, 36, 0, 1),
(2680, 36, 0, 1),
(2681, 36, 0, 1),
(226, 36, 0, 1),
(2604, 36, 0, 1),
(2682, 36, 0, 1),
(673, 36, 0, 1),
(2683, 36, 0, 1),
(2684, 36, 0, 1),
(275, 36, 0, 1),
(2685, 36, 0, 1),
(2174, 36, 0, 1),
(2256, 36, 0, 1),
(592, 36, 0, 1),
(1586, 36, 0, 1),
(2686, 36, 0, 1),
(2687, 36, 0, 1),
(2688, 36, 0, 1),
(2541, 36, 0, 1),
(1440, 36, 0, 1),
(2689, 36, 0, 1),
(2690, 36, 0, 1),
(866, 36, 0, 1),
(2193, 36, 0, 1),
(2691, 36, 0, 1),
(1471, 36, 0, 1),
(150, 36, 0, 1),
(2692, 36, 0, 1),
(2693, 36, 0, 1),
(399, 36, 0, 1),
(2694, 36, 0, 1),
(2695, 36, 0, 1),
(2696, 36, 0, 1),
(26, 36, 0, 1),
(2697, 36, 0, 1),
(2698, 36, 0, 1),
(210, 36, 0, 1),
(2699, 37, 0, 0),
(2700, 37, 0, 0),
(2333, 37, 0, 1),
(2699, 37, 0, 1),
(2701, 37, 0, 1),
(2702, 37, 0, 1),
(2703, 37, 0, 1),
(2666, 37, 0, 1),
(2704, 37, 0, 1),
(606, 37, 0, 1),
(45, 37, 0, 1),
(649, 37, 0, 1),
(1266, 37, 0, 1),
(73, 37, 0, 1),
(2264, 37, 0, 1),
(2705, 37, 0, 1),
(2219, 37, 0, 1),
(2706, 37, 0, 1),
(255, 37, 0, 1),
(507, 37, 0, 1),
(2707, 37, 0, 1),
(1179, 37, 0, 1),
(2544, 37, 0, 1),
(2708, 37, 0, 1),
(2709, 37, 0, 1),
(27, 37, 0, 1),
(2420, 37, 0, 1),
(1481, 37, 0, 1),
(174, 37, 0, 1),
(582, 37, 0, 1),
(6, 37, 0, 1),
(156, 37, 0, 1),
(2710, 37, 0, 1),
(317, 37, 0, 1),
(2578, 37, 0, 1),
(2240, 37, 0, 1),
(2711, 37, 0, 1),
(227, 37, 0, 1),
(30, 37, 0, 1),
(2712, 37, 0, 1),
(1111, 37, 0, 1),
(69, 37, 0, 1),
(2713, 37, 0, 1),
(9, 37, 0, 1),
(2714, 37, 0, 1),
(671, 37, 0, 1),
(2715, 37, 0, 1),
(94, 37, 0, 1),
(618, 37, 0, 1),
(65, 37, 0, 1),
(2342, 37, 0, 1),
(2716, 37, 0, 1),
(1429, 37, 0, 1),
(2553, 37, 0, 1),
(127, 37, 0, 1),
(2675, 37, 0, 1),
(2521, 37, 0, 1),
(2717, 37, 0, 1),
(419, 37, 0, 1),
(391, 37, 0, 1),
(2718, 37, 0, 1),
(2719, 37, 0, 1),
(63, 37, 0, 1),
(57, 37, 0, 1),
(2284, 37, 0, 1),
(2720, 37, 0, 1),
(2390, 37, 0, 1),
(2721, 37, 0, 1),
(2722, 37, 0, 1),
(2723, 37, 0, 1),
(2724, 37, 0, 1),
(2372, 37, 0, 1),
(593, 37, 0, 1),
(2725, 37, 0, 1),
(492, 37, 0, 1),
(2505, 37, 0, 1),
(2726, 37, 0, 1),
(429, 37, 0, 1),
(1616, 37, 0, 1),
(199, 37, 0, 1),
(2727, 37, 0, 1),
(2728, 37, 0, 1),
(230, 37, 0, 1),
(40, 37, 0, 1),
(161, 37, 0, 1),
(666, 37, 0, 1),
(1659, 37, 0, 1),
(1036, 37, 0, 1),
(1120, 37, 0, 1),
(2729, 37, 0, 1),
(2730, 37, 0, 1),
(2270, 37, 0, 1),
(2731, 37, 0, 1),
(2732, 37, 0, 1),
(2221, 37, 0, 1),
(623, 37, 0, 1),
(164, 37, 0, 1),
(2733, 37, 0, 1),
(1109, 37, 0, 1),
(1628, 37, 0, 1),
(210, 37, 0, 1),
(2734, 38, 0, 0),
(2735, 38, 0, 0),
(2736, 38, 0, 0),
(2333, 38, 0, 1),
(2499, 38, 0, 1),
(163, 38, 0, 1),
(2737, 38, 0, 1),
(120, 38, 0, 1),
(2738, 38, 0, 1),
(461, 38, 0, 1),
(2739, 38, 0, 1),
(40, 38, 0, 1),
(2740, 38, 0, 1),
(2741, 38, 0, 1),
(9, 38, 0, 1),
(459, 38, 0, 1),
(2742, 38, 0, 1),
(973, 38, 0, 1),
(726, 38, 0, 1),
(2743, 38, 0, 1),
(2744, 38, 0, 1),
(2745, 38, 0, 1),
(183, 38, 0, 1),
(391, 38, 0, 1),
(2730, 38, 0, 1),
(297, 38, 0, 1),
(460, 38, 0, 1),
(2576, 38, 0, 1),
(456, 38, 0, 1),
(2746, 38, 0, 1),
(1036, 38, 0, 1),
(121, 38, 0, 1),
(198, 38, 0, 1),
(180, 38, 0, 1),
(2625, 38, 0, 1),
(199, 38, 0, 1),
(2221, 38, 0, 1),
(2747, 38, 0, 1),
(256, 38, 0, 1),
(6, 38, 0, 1),
(2558, 38, 0, 1),
(2213, 38, 0, 1),
(1588, 38, 0, 1),
(2748, 38, 0, 1),
(2749, 38, 0, 1),
(2750, 38, 0, 1),
(2751, 38, 0, 1),
(2752, 38, 0, 1),
(1212, 38, 0, 1),
(2753, 38, 0, 1),
(2754, 38, 0, 1),
(60, 38, 0, 1),
(537, 38, 0, 1),
(2755, 38, 0, 1),
(2756, 38, 0, 1),
(2757, 38, 0, 1),
(1625, 38, 0, 1),
(21, 38, 0, 1),
(507, 38, 0, 1),
(2758, 38, 0, 1),
(56, 38, 0, 1),
(1022, 38, 0, 1),
(2759, 38, 0, 1),
(2760, 38, 0, 1),
(27, 38, 0, 1),
(65, 38, 0, 1),
(2761, 38, 0, 1),
(2762, 38, 0, 1),
(2763, 38, 0, 1),
(45, 38, 0, 1),
(462, 38, 0, 1),
(227, 38, 0, 1),
(2764, 38, 0, 1),
(2643, 38, 0, 1),
(2765, 38, 0, 1),
(2766, 38, 0, 1),
(1924, 38, 0, 1),
(2256, 38, 0, 1),
(103, 38, 0, 1),
(628, 38, 0, 1),
(2619, 38, 0, 1),
(2767, 38, 0, 1),
(2768, 38, 0, 1),
(470, 38, 0, 1),
(819, 38, 0, 1),
(793, 38, 0, 1),
(2769, 38, 0, 1),
(2770, 38, 0, 1),
(2771, 38, 0, 1),
(2772, 38, 0, 1),
(1845, 38, 0, 1),
(823, 38, 0, 1),
(32, 38, 0, 1),
(258, 38, 0, 1),
(2773, 38, 0, 1),
(2774, 38, 0, 1),
(2633, 38, 0, 1),
(224, 38, 0, 1),
(2775, 38, 0, 1),
(1064, 38, 0, 1),
(2776, 38, 0, 1),
(2777, 38, 0, 1),
(2778, 38, 0, 1),
(1085, 38, 0, 1),
(2026, 38, 0, 1),
(1266, 38, 0, 1),
(362, 38, 0, 1),
(2779, 38, 0, 1),
(2780, 38, 0, 1),
(2781, 38, 0, 1),
(2270, 38, 0, 1),
(2782, 38, 0, 1),
(2783, 38, 0, 1),
(335, 38, 0, 1),
(2784, 38, 0, 1),
(2344, 38, 0, 1),
(139, 38, 0, 1),
(2785, 38, 0, 1),
(1883, 38, 0, 1),
(1288, 38, 0, 1),
(2786, 38, 0, 1),
(2787, 38, 0, 1),
(2788, 38, 0, 1),
(1451, 38, 0, 1),
(2582, 38, 0, 1),
(2789, 38, 0, 1),
(2240, 38, 0, 1),
(195, 38, 0, 1),
(145, 38, 0, 1),
(2790, 38, 0, 1),
(2583, 38, 0, 1),
(2791, 38, 0, 1),
(1057, 38, 0, 1),
(2792, 38, 0, 1),
(2675, 38, 0, 1),
(2793, 38, 0, 1),
(1043, 38, 0, 1),
(693, 38, 0, 1),
(2794, 38, 0, 1),
(210, 38, 0, 1),
(2795, 39, 0, 0),
(2796, 39, 0, 0),
(2333, 39, 0, 1),
(2795, 39, 0, 1),
(2797, 39, 0, 1),
(1841, 39, 0, 1),
(2561, 39, 0, 1),
(45, 39, 0, 1),
(227, 39, 0, 1),
(2798, 39, 0, 1),
(2799, 39, 0, 1),
(317, 39, 0, 1),
(2800, 39, 0, 1),
(94, 39, 0, 1),
(362, 39, 0, 1),
(2400, 39, 0, 1),
(2390, 39, 0, 1),
(2801, 39, 0, 1),
(2802, 39, 0, 1),
(2803, 39, 0, 1),
(1363, 39, 0, 1),
(2804, 39, 0, 1),
(1217, 39, 0, 1),
(2805, 39, 0, 1),
(121, 39, 0, 1),
(49, 39, 0, 1),
(2806, 39, 0, 1),
(2807, 39, 0, 1),
(2808, 39, 0, 1),
(2809, 39, 0, 1),
(2810, 39, 0, 1),
(2811, 39, 0, 1),
(2812, 39, 0, 1),
(226, 39, 0, 1),
(580, 39, 0, 1),
(2813, 39, 0, 1),
(523, 39, 0, 1),
(2814, 39, 0, 1),
(2815, 39, 0, 1),
(2816, 39, 0, 1),
(2696, 39, 0, 1),
(92, 39, 0, 1),
(2817, 39, 0, 1),
(198, 39, 0, 1),
(1278, 39, 0, 1),
(1036, 39, 0, 1),
(2818, 39, 0, 1),
(2819, 39, 0, 1),
(2820, 39, 0, 1),
(2821, 39, 0, 1),
(2822, 39, 0, 1),
(1474, 39, 0, 1),
(478, 39, 0, 1),
(2823, 39, 0, 1),
(169, 39, 0, 1),
(2193, 39, 0, 1),
(2824, 39, 0, 1),
(2825, 39, 0, 1),
(2826, 39, 0, 1),
(2827, 39, 0, 1),
(2203, 39, 0, 1),
(2828, 39, 0, 1),
(2221, 39, 0, 1),
(2502, 39, 0, 1),
(2829, 39, 0, 1),
(2830, 39, 0, 1),
(256, 39, 0, 1),
(163, 39, 0, 1),
(2831, 39, 0, 1),
(1488, 39, 0, 1),
(2832, 39, 0, 1),
(2833, 39, 0, 1),
(2834, 39, 0, 1),
(2835, 39, 0, 1),
(2836, 39, 0, 1),
(2374, 39, 0, 1),
(2420, 39, 0, 1),
(2837, 39, 0, 1),
(181, 39, 0, 1),
(2838, 39, 0, 1),
(2839, 39, 0, 1),
(2840, 39, 0, 1),
(9, 39, 0, 1),
(2841, 39, 0, 1),
(2842, 39, 0, 1),
(2843, 39, 0, 1),
(1170, 39, 0, 1),
(1266, 39, 0, 1),
(2238, 39, 0, 1),
(1120, 39, 0, 1),
(1900, 39, 0, 1),
(2844, 39, 0, 1),
(2845, 39, 0, 1),
(2846, 39, 0, 1),
(2847, 39, 0, 1),
(230, 39, 0, 1),
(2848, 39, 0, 1),
(808, 39, 0, 1),
(2849, 39, 0, 1),
(2505, 39, 0, 1),
(404, 39, 0, 1),
(2850, 39, 0, 1),
(931, 39, 0, 1),
(55, 39, 0, 1),
(713, 39, 0, 1),
(459, 39, 0, 1),
(2851, 39, 0, 1),
(39, 39, 0, 1),
(585, 39, 0, 1),
(2852, 39, 0, 1),
(2853, 39, 0, 1),
(297, 39, 0, 1),
(195, 39, 0, 1),
(693, 39, 0, 1),
(2854, 39, 0, 1),
(2664, 39, 0, 1),
(1027, 39, 0, 1),
(260, 39, 0, 1),
(41, 39, 0, 1),
(197, 39, 0, 1),
(2855, 39, 0, 1),
(42, 39, 0, 1),
(2856, 39, 0, 1),
(1216, 39, 0, 1),
(148, 39, 0, 1),
(2857, 39, 0, 1),
(73, 39, 0, 1),
(161, 39, 0, 1),
(649, 39, 0, 1),
(323, 39, 0, 1),
(2479, 39, 0, 1),
(2858, 39, 0, 1),
(1129, 39, 0, 1),
(2725, 39, 0, 1),
(2275, 39, 0, 1),
(131, 39, 0, 1),
(175, 39, 0, 1),
(2859, 39, 0, 1),
(2613, 39, 0, 1),
(662, 39, 0, 1),
(2860, 39, 0, 1),
(2861, 39, 0, 1),
(462, 39, 0, 1),
(2862, 39, 0, 1),
(2767, 39, 0, 1),
(2544, 39, 0, 1),
(199, 39, 0, 1),
(2668, 39, 0, 1),
(2452, 39, 0, 1),
(2518, 39, 0, 1),
(2863, 39, 0, 1),
(1616, 39, 0, 1),
(2864, 39, 0, 1),
(2865, 39, 0, 1),
(69, 39, 0, 1),
(123, 39, 0, 1),
(598, 39, 0, 1),
(1523, 39, 0, 1),
(2866, 39, 0, 1),
(127, 39, 0, 1),
(2867, 39, 0, 1),
(1471, 39, 0, 1),
(2868, 39, 0, 1),
(788, 39, 0, 1),
(250, 39, 0, 1),
(2869, 39, 0, 1),
(2870, 39, 0, 1),
(601, 39, 0, 1),
(507, 39, 0, 1),
(2360, 39, 0, 1),
(74, 39, 0, 1),
(559, 39, 0, 1),
(2871, 39, 0, 1),
(2872, 39, 0, 1),
(2873, 39, 0, 1),
(2874, 39, 0, 1),
(2875, 39, 0, 1),
(2622, 39, 0, 1),
(122, 39, 0, 1),
(2876, 39, 0, 1),
(491, 39, 0, 1),
(2877, 39, 0, 1),
(2878, 39, 0, 1),
(525, 39, 0, 1),
(145, 39, 0, 1),
(1288, 39, 0, 1),
(2655, 39, 0, 1),
(2879, 39, 0, 1),
(210, 39, 0, 1),
(2880, 40, 0, 0),
(2881, 40, 0, 0),
(2882, 40, 0, 0),
(2883, 40, 0, 0),
(2333, 40, 0, 1),
(2499, 40, 0, 1),
(163, 40, 0, 1),
(2882, 40, 0, 1),
(2884, 40, 0, 1),
(2885, 40, 0, 1),
(2886, 40, 0, 1),
(2675, 40, 0, 1),
(636, 40, 0, 1),
(2887, 40, 0, 1),
(2855, 40, 0, 1),
(1107, 40, 0, 1),
(45, 40, 0, 1),
(2485, 40, 0, 1),
(2888, 40, 0, 1),
(121, 40, 0, 1),
(1570, 40, 0, 1),
(227, 40, 0, 1),
(2889, 40, 0, 1),
(2890, 40, 0, 1),
(2197, 40, 0, 1),
(39, 40, 0, 1),
(30, 40, 0, 1),
(2891, 40, 0, 1),
(676, 40, 0, 1),
(2892, 40, 0, 1),
(2893, 40, 0, 1),
(94, 40, 0, 1),
(2604, 40, 0, 1),
(2894, 40, 0, 1),
(2895, 40, 0, 1),
(323, 40, 0, 1),
(2896, 40, 0, 1),
(2897, 40, 0, 1),
(2898, 40, 0, 1),
(581, 40, 0, 1),
(205, 40, 0, 1),
(494, 40, 0, 1),
(2504, 40, 0, 1),
(65, 40, 0, 1),
(84, 40, 0, 1),
(2403, 40, 0, 1),
(2899, 40, 0, 1),
(2900, 40, 0, 1),
(1318, 40, 0, 1),
(2901, 40, 0, 1),
(56, 40, 0, 1),
(1007, 40, 0, 1),
(2902, 40, 0, 1),
(2903, 40, 0, 1),
(2204, 40, 0, 1),
(342, 40, 0, 1),
(2904, 40, 0, 1),
(1022, 40, 0, 1),
(1942, 40, 0, 1),
(145, 40, 0, 1),
(2905, 40, 0, 1),
(402, 40, 0, 1),
(2906, 40, 0, 1),
(2907, 40, 0, 1),
(2908, 40, 0, 1),
(60, 40, 0, 1),
(1757, 40, 0, 1),
(2909, 40, 0, 1),
(191, 40, 0, 1),
(2910, 40, 0, 1),
(693, 40, 0, 1),
(2911, 40, 0, 1),
(2588, 40, 0, 1),
(2912, 40, 0, 1),
(2913, 40, 0, 1),
(2444, 40, 0, 1),
(316, 40, 0, 1),
(2914, 40, 0, 1),
(2915, 40, 0, 1),
(2290, 40, 0, 1),
(1036, 40, 0, 1),
(480, 40, 0, 1),
(362, 40, 0, 1),
(2916, 40, 0, 1),
(2917, 40, 0, 1),
(2696, 40, 0, 1),
(2487, 40, 0, 1),
(2918, 40, 0, 1),
(2919, 40, 0, 1),
(9, 40, 0, 1),
(1266, 40, 0, 1),
(295, 40, 0, 1),
(2920, 40, 0, 1),
(32, 40, 0, 1),
(1334, 40, 0, 1),
(2921, 40, 0, 1),
(200, 40, 0, 1),
(500, 40, 0, 1),
(2785, 40, 0, 1),
(2772, 40, 0, 1),
(2922, 40, 0, 1),
(649, 40, 0, 1),
(73, 40, 0, 1),
(593, 40, 0, 1),
(69, 40, 0, 1),
(2923, 40, 0, 1),
(2924, 40, 0, 1),
(198, 40, 0, 1),
(910, 40, 0, 1),
(391, 40, 0, 1),
(230, 40, 0, 1),
(2925, 40, 0, 1),
(1684, 40, 0, 1),
(1503, 40, 0, 1),
(2926, 40, 0, 1),
(2773, 40, 0, 1),
(2927, 40, 0, 1),
(1099, 40, 0, 1),
(2928, 40, 0, 1),
(690, 40, 0, 1),
(297, 40, 0, 1),
(2624, 40, 0, 1),
(2929, 40, 0, 1),
(327, 40, 0, 1),
(2930, 40, 0, 1),
(2931, 40, 0, 1),
(141, 40, 0, 1),
(866, 40, 0, 1),
(2932, 40, 0, 1),
(2933, 40, 0, 1),
(1566, 40, 0, 1),
(2934, 40, 0, 1),
(491, 40, 0, 1),
(2935, 40, 0, 1),
(2936, 40, 0, 1),
(2812, 40, 0, 1),
(2819, 40, 0, 1),
(156, 40, 0, 1),
(2937, 40, 0, 1),
(2365, 40, 0, 1),
(2938, 40, 0, 1),
(1593, 40, 0, 1),
(255, 40, 0, 1),
(2634, 40, 0, 1),
(2939, 40, 0, 1),
(1162, 40, 0, 1),
(208, 40, 0, 1),
(2940, 40, 0, 1),
(2941, 40, 0, 1),
(2942, 40, 0, 1),
(2943, 40, 0, 1),
(180, 40, 0, 1),
(2730, 40, 0, 1),
(2832, 40, 0, 1),
(2944, 40, 0, 1),
(2945, 40, 0, 1),
(1283, 40, 0, 1),
(2946, 40, 0, 1),
(2947, 40, 0, 1),
(1047, 40, 0, 1),
(2948, 40, 0, 1),
(2949, 40, 0, 1),
(2950, 40, 0, 1),
(2951, 40, 0, 1),
(2295, 40, 0, 1),
(2952, 40, 0, 1),
(2163, 40, 0, 1),
(461, 40, 0, 1),
(2953, 40, 0, 1),
(2954, 40, 0, 1),
(2955, 40, 0, 1),
(592, 40, 0, 1),
(1069, 40, 0, 1),
(639, 40, 0, 1),
(2956, 40, 0, 1),
(582, 40, 0, 1),
(199, 40, 0, 1),
(2957, 40, 0, 1),
(2958, 40, 0, 1),
(129, 40, 0, 1),
(317, 40, 0, 1),
(161, 40, 0, 1),
(174, 40, 0, 1),
(153, 40, 0, 1),
(2959, 40, 0, 1),
(2960, 40, 0, 1),
(2633, 40, 0, 1),
(221, 40, 0, 1),
(2961, 40, 0, 1),
(2962, 40, 0, 1),
(2963, 40, 0, 1),
(181, 40, 0, 1),
(296, 40, 0, 1),
(2964, 40, 0, 1),
(2965, 40, 0, 1),
(2966, 40, 0, 1),
(2967, 40, 0, 1),
(2379, 40, 0, 1),
(2968, 40, 0, 1),
(2390, 40, 0, 1),
(2349, 40, 0, 1),
(2583, 40, 0, 1),
(92, 40, 0, 1),
(2969, 40, 0, 1),
(884, 40, 0, 1),
(874, 40, 0, 1),
(2970, 40, 0, 1),
(325, 40, 0, 1),
(2348, 40, 0, 1),
(2305, 40, 0, 1),
(858, 40, 0, 1),
(226, 40, 0, 1),
(2971, 40, 0, 1),
(256, 40, 0, 1),
(192, 40, 0, 1),
(2972, 40, 0, 1),
(454, 40, 0, 1),
(117, 40, 0, 1),
(2973, 40, 0, 1),
(2974, 40, 0, 1),
(773, 40, 0, 1),
(2975, 40, 0, 1),
(2222, 40, 0, 1),
(44, 40, 0, 1),
(224, 40, 0, 1),
(2976, 40, 0, 1),
(2516, 40, 0, 1),
(2977, 40, 0, 1),
(1574, 40, 0, 1),
(2978, 40, 0, 1),
(2979, 40, 0, 1),
(2980, 40, 0, 1),
(1677, 40, 0, 1),
(2981, 40, 0, 1),
(2982, 40, 0, 1),
(1648, 40, 0, 1),
(2983, 40, 0, 1),
(2984, 40, 0, 1),
(2985, 40, 0, 1),
(2986, 40, 0, 1),
(1104, 40, 0, 1),
(2221, 40, 0, 1),
(2987, 40, 0, 1),
(2988, 40, 0, 1),
(2989, 40, 0, 1),
(464, 40, 0, 1),
(2990, 40, 0, 1),
(95, 40, 0, 1),
(2991, 40, 0, 1),
(2992, 40, 0, 1),
(259, 40, 0, 1),
(1625, 40, 0, 1),
(395, 40, 0, 1),
(2993, 40, 0, 1),
(2994, 40, 0, 1),
(2301, 40, 0, 1),
(810, 40, 0, 1),
(2995, 40, 0, 1),
(2996, 40, 0, 1),
(2324, 40, 0, 1),
(46, 40, 0, 1),
(2997, 40, 0, 1),
(2998, 40, 0, 1),
(2999, 40, 0, 1),
(1059, 40, 0, 1),
(3000, 40, 0, 1),
(1621, 40, 0, 1),
(80, 40, 0, 1),
(3001, 40, 0, 1),
(1900, 40, 0, 1),
(10, 40, 0, 1),
(3002, 40, 0, 1),
(2321, 40, 0, 1),
(3003, 40, 0, 1),
(210, 40, 0, 1),
(3004, 41, 0, 0),
(3005, 41, 0, 0),
(3006, 41, 0, 0),
(2333, 41, 0, 1),
(2196, 41, 0, 1),
(1471, 41, 0, 1),
(3007, 41, 0, 1),
(2222, 41, 0, 1),
(3008, 41, 0, 1),
(2823, 41, 0, 1),
(3009, 41, 0, 1),
(960, 41, 0, 1),
(3010, 41, 0, 1),
(712, 41, 0, 1),
(3011, 41, 0, 1),
(3012, 41, 0, 1),
(69, 41, 0, 1),
(3013, 41, 0, 1),
(3014, 41, 0, 1),
(676, 41, 0, 1),
(45, 41, 0, 1),
(1175, 41, 0, 1),
(3015, 41, 0, 1),
(3016, 41, 0, 1),
(1588, 41, 0, 1),
(3017, 41, 0, 1),
(123, 41, 0, 1),
(2696, 41, 0, 1),
(2604, 41, 0, 1),
(163, 41, 0, 1),
(592, 41, 0, 1),
(690, 41, 0, 1),
(226, 41, 0, 1),
(95, 41, 0, 1),
(517, 41, 0, 1),
(274, 41, 0, 1),
(3018, 41, 0, 1),
(3019, 41, 0, 1),
(3020, 41, 0, 1),
(3021, 41, 0, 1),
(32, 41, 0, 1),
(2219, 41, 0, 1),
(485, 41, 0, 1),
(3022, 41, 0, 1),
(454, 41, 0, 1),
(3023, 41, 0, 1),
(1877, 41, 0, 1),
(680, 41, 0, 1),
(3024, 41, 0, 1),
(1354, 41, 0, 1),
(183, 41, 0, 1),
(795, 41, 0, 1),
(1140, 41, 0, 1),
(3025, 41, 0, 1),
(2574, 41, 0, 1),
(1070, 41, 0, 1),
(3026, 41, 0, 1),
(3027, 41, 0, 1),
(2193, 41, 0, 1),
(3028, 41, 0, 1),
(3029, 41, 0, 1),
(942, 41, 0, 1),
(3030, 41, 0, 1),
(2785, 41, 0, 1),
(27, 41, 0, 1),
(3031, 41, 0, 1),
(1442, 41, 0, 1),
(2606, 41, 0, 1),
(1484, 41, 0, 1),
(3032, 41, 0, 1),
(3033, 41, 0, 1),
(3034, 41, 0, 1),
(3035, 41, 0, 1),
(1176, 41, 0, 1),
(1301, 41, 0, 1),
(3036, 41, 0, 1),
(362, 41, 0, 1),
(3037, 41, 0, 1),
(1180, 41, 0, 1),
(2256, 41, 0, 1),
(567, 41, 0, 1),
(3038, 41, 0, 1),
(3039, 41, 0, 1),
(227, 41, 0, 1),
(245, 41, 0, 1),
(3040, 41, 0, 1),
(92, 41, 0, 1),
(1109, 41, 0, 1),
(3041, 41, 0, 1),
(210, 41, 0, 1),
(3042, 42, 0, 0),
(3043, 42, 0, 0),
(2333, 42, 0, 1),
(3042, 42, 0, 1),
(3044, 42, 0, 1),
(1269, 42, 0, 1),
(1440, 42, 0, 1),
(3045, 42, 0, 1),
(382, 42, 0, 1),
(3046, 42, 0, 1),
(3047, 42, 0, 1),
(45, 42, 0, 1),
(2559, 42, 0, 1),
(3034, 42, 0, 1),
(3048, 42, 0, 1),
(3049, 42, 0, 1),
(652, 42, 0, 1),
(227, 42, 0, 1),
(3050, 42, 0, 1),
(3051, 42, 0, 1),
(615, 42, 0, 1),
(1919, 42, 0, 1),
(3052, 42, 0, 1),
(3053, 42, 0, 1),
(3054, 42, 0, 1),
(380, 42, 0, 1),
(3055, 42, 0, 1),
(3056, 42, 0, 1),
(3057, 42, 0, 1),
(3058, 42, 0, 1),
(119, 42, 0, 1),
(3059, 42, 0, 1),
(3060, 42, 0, 1),
(3061, 42, 0, 1),
(819, 42, 0, 1),
(2316, 42, 0, 1),
(3062, 42, 0, 1),
(3063, 42, 0, 1),
(3064, 42, 0, 1),
(3065, 42, 0, 1),
(795, 42, 0, 1),
(147, 42, 0, 1),
(3066, 42, 0, 1),
(2578, 42, 0, 1),
(92, 42, 0, 1),
(3067, 42, 0, 1),
(258, 42, 0, 1),
(3068, 42, 0, 1),
(3069, 42, 0, 1),
(3070, 42, 0, 1),
(3071, 42, 0, 1),
(118, 42, 0, 1),
(1043, 42, 0, 1),
(2215, 42, 0, 1),
(3072, 42, 0, 1),
(3073, 42, 0, 1),
(3074, 42, 0, 1),
(494, 42, 0, 1),
(46, 42, 0, 1),
(123, 42, 0, 1),
(1283, 42, 0, 1),
(3075, 42, 0, 1),
(2234, 42, 0, 1),
(196, 42, 0, 1),
(391, 42, 0, 1),
(3076, 42, 0, 1),
(3077, 42, 0, 1),
(1070, 42, 0, 1),
(32, 42, 0, 1),
(3078, 42, 0, 1),
(1625, 42, 0, 1),
(478, 42, 0, 1),
(94, 42, 0, 1),
(3079, 42, 0, 1),
(3080, 42, 0, 1),
(230, 42, 0, 1),
(2301, 42, 0, 1),
(3043, 42, 0, 1),
(362, 42, 0, 1),
(3081, 42, 0, 1),
(3082, 42, 0, 1),
(2845, 42, 0, 1),
(1120, 42, 0, 1),
(163, 42, 0, 1),
(592, 42, 0, 1),
(445, 42, 0, 1),
(3083, 42, 0, 1),
(454, 42, 0, 1),
(2244, 42, 0, 1),
(2245, 42, 0, 1),
(3084, 42, 0, 1),
(3085, 42, 0, 1),
(226, 42, 0, 1),
(27, 42, 0, 1),
(2284, 42, 0, 1),
(2221, 42, 0, 1),
(2643, 42, 0, 1),
(463, 42, 0, 1),
(2602, 42, 0, 1),
(2492, 42, 0, 1),
(1036, 42, 0, 1),
(84, 42, 0, 1),
(582, 42, 0, 1),
(2899, 42, 0, 1),
(3086, 42, 0, 1),
(82, 42, 0, 1),
(641, 42, 0, 1),
(3087, 42, 0, 1),
(1022, 42, 0, 1),
(2289, 42, 0, 1),
(3088, 42, 0, 1),
(2490, 42, 0, 1),
(3089, 42, 0, 1),
(23, 42, 0, 1),
(122, 42, 0, 1),
(3090, 42, 0, 1),
(2453, 42, 0, 1),
(3091, 42, 0, 1),
(2210, 42, 0, 1),
(9, 42, 0, 1),
(3092, 42, 0, 1),
(3093, 42, 0, 1),
(1471, 42, 0, 1),
(3094, 42, 0, 1),
(3008, 42, 0, 1),
(2340, 42, 0, 1),
(3095, 42, 0, 1),
(535, 42, 0, 1),
(3096, 42, 0, 1),
(3097, 42, 0, 1),
(3098, 42, 0, 1),
(297, 42, 0, 1),
(2731, 42, 0, 1),
(2219, 42, 0, 1),
(3099, 42, 0, 1),
(2303, 42, 0, 1),
(3100, 42, 0, 1),
(109, 42, 0, 1),
(3101, 42, 0, 1),
(1176, 42, 0, 1),
(2685, 42, 0, 1),
(1710, 42, 0, 1),
(30, 42, 0, 1),
(2696, 42, 0, 1),
(3102, 42, 0, 1),
(3103, 42, 0, 1),
(3104, 42, 0, 1),
(121, 42, 0, 1),
(583, 42, 0, 1),
(3105, 42, 0, 1),
(127, 42, 0, 1),
(56, 42, 0, 1),
(251, 42, 0, 1),
(3106, 42, 0, 1),
(957, 42, 0, 1),
(689, 42, 0, 1),
(329, 42, 0, 1),
(2320, 42, 0, 1),
(456, 42, 0, 1),
(693, 42, 0, 1),
(3107, 42, 0, 1),
(500, 42, 0, 1),
(139, 42, 0, 1),
(1177, 42, 0, 1),
(2768, 42, 0, 1),
(3108, 42, 0, 1),
(3109, 42, 0, 1),
(1484, 42, 0, 1),
(2457, 42, 0, 1),
(71, 42, 0, 1),
(2383, 42, 0, 1),
(210, 42, 0, 1),
(3110, 43, 0, 0),
(3111, 43, 0, 0),
(3112, 43, 0, 1),
(3110, 43, 0, 1),
(3113, 43, 0, 1),
(1043, 43, 0, 1),
(2222, 43, 0, 1),
(1036, 43, 0, 1),
(3114, 43, 0, 1),
(2379, 43, 0, 1),
(139, 43, 0, 1),
(164, 43, 0, 1),
(65, 43, 0, 1),
(3115, 43, 0, 1),
(1738, 43, 0, 1),
(150, 43, 0, 1),
(1436, 43, 0, 1),
(2245, 43, 0, 1),
(3116, 43, 0, 1),
(3117, 43, 0, 1),
(3118, 43, 0, 1),
(3119, 43, 0, 1),
(3120, 43, 0, 1),
(478, 43, 0, 1),
(3121, 43, 0, 1),
(73, 43, 0, 1),
(3122, 43, 0, 1),
(3123, 43, 0, 1),
(161, 43, 0, 1),
(2207, 43, 0, 1),
(3124, 43, 0, 1),
(2818, 43, 0, 1),
(3125, 43, 0, 1),
(3126, 43, 0, 1),
(395, 43, 0, 1),
(454, 43, 0, 1),
(693, 43, 0, 1),
(400, 43, 0, 1),
(45, 43, 0, 1),
(3127, 43, 0, 1),
(839, 43, 0, 1),
(3128, 43, 0, 1),
(3129, 43, 0, 1),
(3130, 43, 0, 1),
(3131, 43, 0, 1),
(1266, 43, 0, 1),
(94, 43, 0, 1),
(649, 43, 0, 1),
(3132, 43, 0, 1),
(121, 43, 0, 1),
(1185, 43, 0, 1),
(314, 43, 0, 1),
(9, 43, 0, 1),
(3133, 43, 0, 1),
(2357, 43, 0, 1),
(3134, 43, 0, 1),
(123, 43, 0, 1),
(3135, 43, 0, 1),
(3136, 43, 0, 1),
(713, 43, 0, 1),
(174, 43, 0, 1),
(3137, 43, 0, 1),
(3138, 43, 0, 1),
(3139, 43, 0, 1),
(2938, 43, 0, 1),
(226, 43, 0, 1),
(1552, 43, 0, 1),
(3093, 43, 0, 1),
(27, 43, 0, 1),
(3140, 43, 0, 1),
(3141, 43, 0, 1),
(92, 43, 0, 1),
(3142, 43, 0, 1),
(3143, 43, 0, 1),
(795, 43, 0, 1),
(362, 43, 0, 1),
(3144, 43, 0, 1),
(3145, 43, 0, 1),
(2210, 43, 0, 1),
(3146, 43, 0, 1),
(3147, 43, 0, 1),
(1190, 43, 0, 1),
(2204, 43, 0, 1),
(2321, 43, 0, 1),
(10, 43, 0, 1),
(3148, 43, 0, 1),
(3149, 43, 0, 1),
(517, 43, 0, 1),
(2698, 43, 0, 1),
(2948, 43, 0, 1),
(3150, 43, 0, 1),
(287, 43, 0, 1),
(3151, 43, 0, 1),
(3152, 43, 0, 1),
(3153, 43, 0, 1),
(32, 43, 0, 1),
(117, 43, 0, 1),
(1032, 43, 0, 1),
(1113, 43, 0, 1),
(2815, 43, 0, 1),
(597, 43, 0, 1),
(494, 43, 0, 1),
(3154, 43, 0, 1),
(2219, 43, 0, 1),
(2693, 43, 0, 1),
(3155, 43, 0, 1),
(44, 43, 0, 1),
(3156, 43, 0, 1),
(3157, 43, 0, 1),
(3158, 43, 0, 1),
(1140, 43, 0, 1),
(3159, 43, 0, 1),
(567, 43, 0, 1),
(210, 43, 0, 1),
(3160, 44, 0, 0),
(3161, 44, 0, 0),
(3162, 44, 0, 0),
(2333, 44, 0, 1),
(1190, 44, 0, 1),
(408, 44, 0, 1),
(3163, 44, 0, 1),
(2574, 44, 0, 1),
(2340, 44, 0, 1),
(150, 44, 0, 1),
(3164, 44, 0, 1),
(874, 44, 0, 1),
(866, 44, 0, 1),
(399, 44, 0, 1),
(3165, 44, 0, 1),
(73, 44, 0, 1),
(94, 44, 0, 1),
(649, 44, 0, 1),
(507, 44, 0, 1),
(1710, 44, 0, 1),
(314, 44, 0, 1),
(3166, 44, 0, 1),
(431, 44, 0, 1),
(1334, 44, 0, 1),
(2240, 44, 0, 1),
(118, 44, 0, 1),
(3167, 44, 0, 1),
(2357, 44, 0, 1),
(3168, 44, 0, 1),
(3169, 44, 0, 1),
(3170, 44, 0, 1),
(3171, 44, 0, 1),
(3172, 44, 0, 1),
(3173, 44, 0, 1),
(3174, 44, 0, 1),
(3175, 44, 0, 1),
(3176, 44, 0, 1),
(3177, 44, 0, 1),
(3178, 44, 0, 1),
(157, 44, 0, 1),
(227, 44, 0, 1),
(458, 44, 0, 1),
(3179, 44, 0, 1),
(139, 44, 0, 1),
(274, 44, 0, 1),
(2633, 44, 0, 1),
(3180, 44, 0, 1),
(2938, 44, 0, 1),
(1407, 44, 0, 1),
(3181, 44, 0, 1),
(9, 44, 0, 1),
(2473, 44, 0, 1),
(2504, 44, 0, 1),
(727, 44, 0, 1),
(1310, 44, 0, 1),
(391, 44, 0, 1),
(3182, 44, 0, 1),
(693, 44, 0, 1),
(21, 44, 0, 1),
(1806, 44, 0, 1),
(3183, 44, 0, 1),
(297, 44, 0, 1),
(2014, 44, 0, 1),
(3157, 44, 0, 1),
(45, 44, 0, 1),
(622, 44, 0, 1),
(329, 44, 0, 1),
(658, 44, 0, 1),
(2219, 44, 0, 1),
(1225, 44, 0, 1),
(3184, 44, 0, 1),
(3185, 44, 0, 1),
(593, 44, 0, 1),
(3186, 44, 0, 1),
(201, 44, 0, 1),
(3187, 44, 0, 1),
(464, 44, 0, 1),
(3188, 44, 0, 1),
(198, 44, 0, 1),
(199, 44, 0, 1),
(3189, 44, 0, 1),
(2430, 44, 0, 1),
(1059, 44, 0, 1),
(41, 44, 0, 1),
(3190, 44, 0, 1),
(1451, 44, 0, 1),
(2245, 44, 0, 1),
(2845, 44, 0, 1),
(1436, 44, 0, 1),
(3191, 44, 0, 1),
(183, 44, 0, 1),
(1769, 44, 0, 1),
(3192, 44, 0, 1),
(2708, 44, 0, 1),
(127, 44, 0, 1),
(3193, 44, 0, 1),
(3194, 44, 0, 1),
(234, 44, 0, 1),
(3195, 44, 0, 1),
(105, 44, 0, 1),
(2693, 44, 0, 1),
(2230, 44, 0, 1),
(3196, 44, 0, 1),
(224, 44, 0, 1),
(12, 44, 0, 1),
(643, 44, 0, 1),
(3091, 44, 0, 1),
(2305, 44, 0, 1),
(3197, 44, 0, 1),
(3142, 44, 0, 1),
(3198, 44, 0, 1),
(3199, 44, 0, 1),
(3200, 44, 0, 1),
(3201, 44, 0, 1),
(3202, 44, 0, 1),
(3203, 44, 0, 1),
(3204, 44, 0, 1),
(3205, 44, 0, 1),
(3206, 44, 0, 1),
(3207, 44, 0, 1),
(3123, 44, 0, 1),
(3208, 44, 0, 1),
(1066, 44, 0, 1),
(1043, 44, 0, 1),
(221, 44, 0, 1),
(690, 44, 0, 1),
(3209, 44, 0, 1),
(3210, 44, 0, 1),
(517, 44, 0, 1),
(65, 44, 0, 1),
(2954, 44, 0, 1),
(699, 44, 0, 1),
(3211, 44, 0, 1),
(3212, 44, 0, 1),
(3213, 44, 0, 1),
(147, 44, 0, 1),
(623, 44, 0, 1),
(200, 44, 0, 1),
(263, 44, 0, 1),
(494, 44, 0, 1),
(463, 44, 0, 1),
(3214, 44, 0, 1),
(1008, 44, 0, 1),
(1266, 44, 0, 1),
(3215, 44, 0, 1),
(510, 44, 0, 1),
(3216, 44, 0, 1),
(3217, 44, 0, 1),
(3218, 44, 0, 1),
(2256, 44, 0, 1),
(2266, 44, 0, 1),
(3219, 44, 0, 1),
(3220, 44, 0, 1),
(2815, 44, 0, 1),
(1064, 44, 0, 1),
(3221, 44, 0, 1),
(3222, 44, 0, 1),
(3223, 44, 0, 1),
(3224, 44, 0, 1),
(3225, 44, 0, 1),
(165, 44, 0, 1),
(3226, 44, 0, 1),
(3227, 44, 0, 1),
(2974, 44, 0, 1),
(1845, 44, 0, 1),
(3228, 44, 0, 1),
(422, 44, 0, 1),
(3229, 44, 0, 1),
(2598, 44, 0, 1),
(800, 44, 0, 1),
(3230, 44, 0, 1),
(3231, 44, 0, 1),
(140, 44, 0, 1),
(2969, 44, 0, 1),
(3232, 44, 0, 1),
(163, 44, 0, 1),
(599, 44, 0, 1),
(362, 44, 0, 1),
(3233, 44, 0, 1),
(3234, 44, 0, 1),
(3235, 44, 0, 1),
(3236, 44, 0, 1),
(3237, 44, 0, 1),
(3238, 44, 0, 1),
(944, 44, 0, 1),
(3239, 44, 0, 1),
(3240, 44, 0, 1),
(3241, 44, 0, 1),
(2548, 44, 0, 1),
(563, 44, 0, 1),
(2403, 44, 0, 1),
(3242, 44, 0, 1),
(3243, 44, 0, 1),
(3244, 44, 0, 1),
(2206, 44, 0, 1),
(3245, 44, 0, 1),
(601, 44, 0, 1),
(3246, 44, 0, 1),
(3247, 44, 0, 1),
(131, 44, 0, 1),
(2620, 44, 0, 1),
(3248, 44, 0, 1),
(713, 44, 0, 1),
(2374, 44, 0, 1),
(3249, 44, 0, 1),
(3250, 44, 0, 1),
(467, 44, 0, 1),
(245, 44, 0, 1),
(478, 44, 0, 1),
(132, 44, 0, 1),
(3251, 44, 0, 1),
(3252, 44, 0, 1),
(2488, 44, 0, 1),
(795, 44, 0, 1),
(1283, 44, 0, 1),
(3134, 44, 0, 1),
(3253, 44, 0, 1),
(3254, 44, 0, 1),
(2072, 44, 0, 1),
(1583, 44, 0, 1),
(1165, 44, 0, 1),
(2383, 44, 0, 1),
(3255, 44, 0, 1),
(2608, 44, 0, 1),
(3256, 44, 0, 1),
(3257, 44, 0, 1),
(226, 44, 0, 1),
(3258, 44, 0, 1),
(2193, 44, 0, 1),
(3259, 44, 0, 1),
(69, 44, 0, 1),
(3260, 44, 0, 1),
(2215, 44, 0, 1),
(799, 44, 0, 1),
(583, 44, 0, 1),
(288, 44, 0, 1),
(3261, 44, 0, 1),
(3262, 44, 0, 1),
(1061, 44, 0, 1),
(3263, 44, 0, 1),
(1429, 44, 0, 1),
(395, 44, 0, 1),
(3264, 44, 0, 1),
(3265, 44, 0, 1),
(3266, 44, 0, 1),
(3267, 44, 0, 1),
(1495, 44, 0, 1),
(3268, 44, 0, 1),
(3269, 44, 0, 1),
(2712, 44, 0, 1),
(32, 44, 0, 1),
(3270, 44, 0, 1),
(3271, 44, 0, 1),
(3272, 44, 0, 1),
(167, 44, 0, 1),
(27, 44, 0, 1),
(3273, 44, 0, 1),
(3274, 44, 0, 1),
(3275, 44, 0, 1),
(1867, 44, 0, 1),
(3276, 44, 0, 1),
(1570, 44, 0, 1);
INSERT INTO `search_keywords` (`keyword`, `foreign_ID`, `table_name`, `position`) VALUES
(3277, 44, 0, 1),
(205, 44, 0, 1),
(3278, 44, 0, 1),
(3279, 44, 0, 1),
(2855, 44, 0, 1),
(3280, 44, 0, 1),
(145, 44, 0, 1),
(197, 44, 0, 1),
(2365, 44, 0, 1),
(1652, 44, 0, 1),
(3281, 44, 0, 1),
(3282, 44, 0, 1),
(2242, 44, 0, 1),
(2781, 44, 0, 1),
(3283, 44, 0, 1),
(592, 44, 0, 1),
(2270, 44, 0, 1),
(839, 44, 0, 1),
(3284, 44, 0, 1),
(210, 44, 0, 1),
(3285, 45, 0, 0),
(3286, 45, 0, 0),
(2333, 45, 0, 1),
(1190, 45, 0, 1),
(408, 45, 0, 1),
(3287, 45, 0, 1),
(769, 45, 0, 1),
(494, 45, 0, 1),
(175, 45, 0, 1),
(2305, 45, 0, 1),
(3288, 45, 0, 1),
(693, 45, 0, 1),
(30, 45, 0, 1),
(167, 45, 0, 1),
(500, 45, 0, 1),
(92, 45, 0, 1),
(3289, 45, 0, 1),
(2270, 45, 0, 1),
(45, 45, 0, 1),
(3290, 45, 0, 1),
(467, 45, 0, 1),
(3083, 45, 0, 1),
(3291, 45, 0, 1),
(3016, 45, 0, 1),
(3292, 45, 0, 1),
(2523, 45, 0, 1),
(2222, 45, 0, 1),
(2706, 45, 0, 1),
(361, 45, 0, 1),
(148, 45, 0, 1),
(795, 45, 0, 1),
(3293, 45, 0, 1),
(3294, 45, 0, 1),
(3295, 45, 0, 1),
(3296, 45, 0, 1),
(3297, 45, 0, 1),
(1670, 45, 0, 1),
(227, 45, 0, 1),
(3298, 45, 0, 1),
(3299, 45, 0, 1),
(2634, 45, 0, 1),
(3300, 45, 0, 1),
(589, 45, 0, 1),
(3301, 45, 0, 1),
(3302, 45, 0, 1),
(3303, 45, 0, 1),
(3304, 45, 0, 1),
(3305, 45, 0, 1),
(3306, 45, 0, 1),
(1964, 45, 0, 1),
(107, 45, 0, 1),
(957, 45, 0, 1),
(2240, 45, 0, 1),
(2092, 45, 0, 1),
(3307, 45, 0, 1),
(3308, 45, 0, 1),
(2126, 45, 0, 1),
(2557, 45, 0, 1),
(56, 45, 0, 1),
(1301, 45, 0, 1),
(504, 45, 0, 1),
(168, 45, 0, 1),
(2879, 45, 0, 1),
(2196, 45, 0, 1),
(3309, 45, 0, 1),
(3310, 45, 0, 1),
(3311, 45, 0, 1),
(3312, 45, 0, 1),
(823, 45, 0, 1),
(3313, 45, 0, 1),
(1175, 45, 0, 1),
(131, 45, 0, 1),
(643, 45, 0, 1),
(819, 45, 0, 1),
(3314, 45, 0, 1),
(3315, 45, 0, 1),
(3316, 45, 0, 1),
(256, 45, 0, 1),
(41, 45, 0, 1),
(866, 45, 0, 1),
(2344, 45, 0, 1),
(3317, 45, 0, 1),
(2708, 45, 0, 1),
(198, 45, 0, 1),
(73, 45, 0, 1),
(3318, 45, 0, 1),
(3319, 45, 0, 1),
(3320, 45, 0, 1),
(3321, 45, 0, 1),
(3322, 45, 0, 1),
(2528, 45, 0, 1),
(199, 45, 0, 1),
(174, 45, 0, 1),
(649, 45, 0, 1),
(3323, 45, 0, 1),
(658, 45, 0, 1),
(3324, 45, 0, 1),
(1224, 45, 0, 1),
(581, 45, 0, 1),
(156, 45, 0, 1),
(293, 45, 0, 1),
(3325, 45, 0, 1),
(9, 45, 0, 1),
(3326, 45, 0, 1),
(3327, 45, 0, 1),
(1283, 45, 0, 1),
(3328, 45, 0, 1),
(1022, 45, 0, 1),
(3329, 45, 0, 1),
(123, 45, 0, 1),
(325, 45, 0, 1),
(3330, 45, 0, 1),
(553, 45, 0, 1),
(3331, 45, 0, 1),
(1097, 45, 0, 1),
(2846, 45, 0, 1),
(1471, 45, 0, 1),
(2320, 45, 0, 1),
(3332, 45, 0, 1),
(11, 45, 0, 1),
(60, 45, 0, 1),
(2457, 45, 0, 1),
(2574, 45, 0, 1),
(593, 45, 0, 1),
(1651, 45, 0, 1),
(391, 45, 0, 1),
(1377, 45, 0, 1),
(3333, 45, 0, 1),
(3334, 45, 0, 1),
(3335, 45, 0, 1),
(1451, 45, 0, 1),
(26, 45, 0, 1),
(399, 45, 0, 1),
(2545, 45, 0, 1),
(3336, 45, 0, 1),
(2391, 45, 0, 1),
(1036, 45, 0, 1),
(3337, 45, 0, 1),
(3338, 45, 0, 1),
(2582, 45, 0, 1),
(3148, 45, 0, 1),
(2544, 45, 0, 1),
(6, 45, 0, 1),
(1109, 45, 0, 1),
(3339, 45, 0, 1),
(2412, 45, 0, 1),
(3340, 45, 0, 1),
(79, 45, 0, 1),
(1145, 45, 0, 1),
(155, 45, 0, 1),
(1043, 45, 0, 1),
(1282, 45, 0, 1),
(507, 45, 0, 1),
(3341, 45, 0, 1),
(3342, 45, 0, 1),
(65, 45, 0, 1),
(3343, 45, 0, 1),
(3344, 45, 0, 1),
(565, 45, 0, 1),
(1078, 45, 0, 1),
(3345, 45, 0, 1),
(3346, 45, 0, 1),
(1825, 45, 0, 1),
(3347, 45, 0, 1),
(3348, 45, 0, 1),
(3349, 45, 0, 1),
(3350, 45, 0, 1),
(362, 45, 0, 1),
(3351, 45, 0, 1),
(32, 45, 0, 1),
(3352, 45, 0, 1),
(517, 45, 0, 1),
(2219, 45, 0, 1),
(3353, 45, 0, 1),
(3134, 45, 0, 1),
(1571, 45, 0, 1),
(642, 45, 0, 1),
(3354, 45, 0, 1),
(3355, 45, 0, 1),
(650, 45, 0, 1),
(3356, 45, 0, 1),
(3357, 45, 0, 1),
(804, 45, 0, 1),
(2963, 45, 0, 1),
(3358, 45, 0, 1),
(3359, 45, 0, 1),
(3360, 45, 0, 1),
(3361, 45, 0, 1),
(1588, 45, 0, 1),
(297, 45, 0, 1),
(221, 45, 0, 1),
(3362, 45, 0, 1),
(3363, 45, 0, 1),
(3364, 45, 0, 1),
(3365, 45, 0, 1),
(127, 45, 0, 1),
(712, 45, 0, 1),
(1153, 45, 0, 1),
(3366, 45, 0, 1),
(544, 45, 0, 1),
(2861, 45, 0, 1),
(3367, 45, 0, 1),
(94, 45, 0, 1),
(3368, 45, 0, 1),
(210, 45, 0, 1),
(3369, 46, 0, 0),
(3370, 46, 0, 0),
(3371, 46, 0, 0),
(3372, 46, 0, 0),
(2333, 46, 0, 1),
(3369, 46, 0, 1),
(795, 46, 0, 1),
(3373, 46, 0, 1),
(74, 46, 0, 1),
(800, 46, 0, 1),
(147, 46, 0, 1),
(73, 46, 0, 1),
(3374, 46, 0, 1),
(1825, 46, 0, 1),
(2219, 46, 0, 1),
(3375, 46, 0, 1),
(155, 46, 0, 1),
(180, 46, 0, 1),
(3376, 46, 0, 1),
(198, 46, 0, 1),
(199, 46, 0, 1),
(196, 46, 0, 1),
(3377, 46, 0, 1),
(3378, 46, 0, 1),
(3379, 46, 0, 1),
(92, 46, 0, 1),
(839, 46, 0, 1),
(3380, 46, 0, 1),
(1807, 46, 0, 1),
(3381, 46, 0, 1),
(1109, 46, 0, 1),
(2196, 46, 0, 1),
(323, 46, 0, 1),
(3134, 46, 0, 1),
(630, 46, 0, 1),
(9, 46, 0, 1),
(459, 46, 0, 1),
(41, 46, 0, 1),
(3382, 46, 0, 1),
(60, 46, 0, 1),
(3383, 46, 0, 1),
(676, 46, 0, 1),
(224, 46, 0, 1),
(118, 46, 0, 1),
(3384, 46, 0, 1),
(3385, 46, 0, 1),
(258, 46, 0, 1),
(3386, 46, 0, 1),
(3387, 46, 0, 1),
(123, 46, 0, 1),
(3388, 46, 0, 1),
(28, 46, 0, 1),
(499, 46, 0, 1),
(3389, 46, 0, 1),
(2869, 46, 0, 1),
(32, 46, 0, 1),
(3390, 46, 0, 1),
(3391, 46, 0, 1),
(1136, 46, 0, 1),
(45, 46, 0, 1),
(3392, 46, 0, 1),
(693, 46, 0, 1),
(2708, 46, 0, 1),
(2698, 46, 0, 1),
(3393, 46, 0, 1),
(3394, 46, 0, 1),
(3395, 46, 0, 1),
(127, 46, 0, 1),
(3396, 46, 0, 1),
(56, 46, 0, 1),
(174, 46, 0, 1),
(3397, 46, 0, 1),
(874, 46, 0, 1),
(454, 46, 0, 1),
(362, 46, 0, 1),
(1102, 46, 0, 1),
(3398, 46, 0, 1),
(2479, 46, 0, 1),
(3399, 46, 0, 1),
(91, 46, 0, 1),
(666, 46, 0, 1),
(1094, 46, 0, 1),
(3400, 46, 0, 1),
(3338, 46, 0, 1),
(2693, 46, 0, 1),
(3401, 46, 0, 1),
(1179, 46, 0, 1),
(3402, 46, 0, 1),
(3275, 46, 0, 1),
(3403, 46, 0, 1),
(3404, 46, 0, 1),
(1140, 46, 0, 1),
(494, 46, 0, 1),
(230, 46, 0, 1),
(2483, 46, 0, 1),
(86, 46, 0, 1),
(160, 46, 0, 1),
(3405, 46, 0, 1),
(401, 46, 0, 1),
(2680, 46, 0, 1),
(3406, 46, 0, 1),
(1334, 46, 0, 1),
(131, 46, 0, 1),
(3407, 46, 0, 1),
(2740, 46, 0, 1),
(163, 46, 0, 1),
(3108, 46, 0, 1),
(2547, 46, 0, 1),
(3031, 46, 0, 1),
(1903, 46, 0, 1),
(256, 46, 0, 1),
(94, 46, 0, 1),
(40, 46, 0, 1),
(3408, 46, 0, 1),
(1440, 46, 0, 1),
(2499, 46, 0, 1),
(69, 46, 0, 1),
(2635, 46, 0, 1),
(2210, 46, 0, 1),
(3409, 46, 0, 1),
(3410, 46, 0, 1),
(3411, 46, 0, 1),
(1845, 46, 0, 1),
(335, 46, 0, 1),
(3412, 46, 0, 1),
(168, 46, 0, 1),
(3413, 46, 0, 1),
(3414, 46, 0, 1),
(1057, 46, 0, 1),
(3415, 46, 0, 1),
(3416, 46, 0, 1),
(227, 46, 0, 1),
(293, 46, 0, 1),
(3417, 46, 0, 1),
(3418, 46, 0, 1),
(3419, 46, 0, 1),
(3420, 46, 0, 1),
(3421, 46, 0, 1),
(3422, 46, 0, 1),
(39, 46, 0, 1),
(3423, 46, 0, 1),
(2240, 46, 0, 1),
(3424, 46, 0, 1),
(497, 46, 0, 1),
(3425, 46, 0, 1),
(3426, 46, 0, 1),
(391, 46, 0, 1),
(3427, 46, 0, 1),
(3428, 46, 0, 1),
(2270, 46, 0, 1),
(582, 46, 0, 1),
(3429, 46, 0, 1),
(150, 46, 0, 1),
(3100, 46, 0, 1),
(3430, 46, 0, 1),
(197, 46, 0, 1),
(27, 46, 0, 1),
(2229, 46, 0, 1),
(3104, 46, 0, 1),
(3431, 46, 0, 1),
(2457, 46, 0, 1),
(188, 46, 0, 1),
(3136, 46, 0, 1),
(3432, 46, 0, 1),
(3433, 46, 0, 1),
(3434, 46, 0, 1),
(3435, 46, 0, 1),
(866, 46, 0, 1),
(2193, 46, 0, 1),
(205, 46, 0, 1),
(121, 46, 0, 1),
(175, 46, 0, 1),
(3097, 46, 0, 1),
(3436, 46, 0, 1),
(3437, 46, 0, 1),
(3119, 46, 0, 1),
(3438, 46, 0, 1),
(1684, 46, 0, 1),
(2360, 46, 0, 1),
(129, 46, 0, 1),
(314, 46, 0, 1),
(3439, 46, 0, 1),
(2537, 46, 0, 1),
(623, 46, 0, 1),
(3440, 46, 0, 1),
(3441, 46, 0, 1),
(2947, 46, 0, 1),
(592, 46, 0, 1),
(3442, 46, 0, 1),
(3443, 46, 0, 1),
(3444, 46, 0, 1),
(210, 46, 0, 1),
(3445, 47, 0, 0),
(3446, 47, 0, 0),
(2333, 47, 0, 1),
(3445, 47, 0, 1),
(3447, 47, 0, 1),
(3448, 47, 0, 1),
(1176, 47, 0, 1),
(3449, 47, 0, 1),
(3450, 47, 0, 1),
(94, 47, 0, 1),
(3451, 47, 0, 1),
(1175, 47, 0, 1),
(456, 47, 0, 1),
(2314, 47, 0, 1),
(866, 47, 0, 1),
(2245, 47, 0, 1),
(186, 47, 0, 1),
(3125, 47, 0, 1),
(121, 47, 0, 1),
(227, 47, 0, 1),
(2321, 47, 0, 1),
(9, 47, 0, 1),
(39, 47, 0, 1),
(256, 47, 0, 1),
(3452, 47, 0, 1),
(131, 47, 0, 1),
(3453, 47, 0, 1),
(600, 47, 0, 1),
(3454, 47, 0, 1),
(45, 47, 0, 1),
(454, 47, 0, 1),
(2792, 47, 0, 1),
(258, 47, 0, 1),
(2215, 47, 0, 1),
(3455, 47, 0, 1),
(3456, 47, 0, 1),
(3457, 47, 0, 1),
(3206, 47, 0, 1),
(2810, 47, 0, 1),
(3458, 47, 0, 1),
(3459, 47, 0, 1),
(3460, 47, 0, 1),
(623, 47, 0, 1),
(2558, 47, 0, 1),
(147, 47, 0, 1),
(580, 47, 0, 1),
(1594, 47, 0, 1),
(3461, 47, 0, 1),
(565, 47, 0, 1),
(458, 47, 0, 1),
(1190, 47, 0, 1),
(2479, 47, 0, 1),
(73, 47, 0, 1),
(3462, 47, 0, 1),
(265, 47, 0, 1),
(593, 47, 0, 1),
(3463, 47, 0, 1),
(3464, 47, 0, 1),
(3465, 47, 0, 1),
(3466, 47, 0, 1),
(3467, 47, 0, 1),
(819, 47, 0, 1),
(2845, 47, 0, 1),
(649, 47, 0, 1),
(599, 47, 0, 1),
(72, 47, 0, 1),
(2447, 47, 0, 1),
(199, 47, 0, 1),
(3468, 47, 0, 1),
(3469, 47, 0, 1),
(21, 47, 0, 1),
(1078, 47, 0, 1),
(953, 47, 0, 1),
(30, 47, 0, 1),
(1301, 47, 0, 1),
(3470, 47, 0, 1),
(2340, 47, 0, 1),
(3471, 47, 0, 1),
(3472, 47, 0, 1),
(362, 47, 0, 1),
(1844, 47, 0, 1),
(3473, 47, 0, 1),
(3474, 47, 0, 1),
(56, 47, 0, 1),
(123, 47, 0, 1),
(3475, 47, 0, 1),
(86, 47, 0, 1),
(2204, 47, 0, 1),
(3476, 47, 0, 1),
(3477, 47, 0, 1),
(3478, 47, 0, 1),
(1459, 47, 0, 1),
(3479, 47, 0, 1),
(174, 47, 0, 1),
(2210, 47, 0, 1),
(92, 47, 0, 1),
(2753, 47, 0, 1),
(2219, 47, 0, 1),
(3480, 47, 0, 1),
(175, 47, 0, 1),
(3434, 47, 0, 1),
(3481, 47, 0, 1),
(3482, 47, 0, 1),
(2193, 47, 0, 1),
(431, 47, 0, 1),
(966, 47, 0, 1),
(463, 47, 0, 1),
(3483, 47, 0, 1),
(2221, 47, 0, 1),
(296, 47, 0, 1),
(1408, 47, 0, 1),
(2473, 47, 0, 1),
(3484, 47, 0, 1),
(3485, 47, 0, 1),
(3486, 47, 0, 1),
(2423, 47, 0, 1),
(1684, 47, 0, 1),
(119, 47, 0, 1),
(2275, 47, 0, 1),
(3487, 47, 0, 1),
(3488, 47, 0, 1),
(3489, 47, 0, 1),
(65, 47, 0, 1),
(309, 47, 0, 1),
(2206, 47, 0, 1),
(507, 47, 0, 1),
(3490, 47, 0, 1),
(27, 47, 0, 1),
(668, 47, 0, 1),
(3491, 47, 0, 1),
(2802, 47, 0, 1),
(3492, 47, 0, 1),
(3493, 47, 0, 1),
(118, 47, 0, 1),
(608, 47, 0, 1),
(1278, 47, 0, 1),
(3494, 47, 0, 1),
(3495, 47, 0, 1),
(3496, 47, 0, 1),
(1415, 47, 0, 1),
(3497, 47, 0, 1),
(3498, 47, 0, 1),
(2384, 47, 0, 1),
(198, 47, 0, 1),
(3499, 47, 0, 1),
(3500, 47, 0, 1),
(2560, 47, 0, 1),
(1757, 47, 0, 1),
(612, 47, 0, 1),
(208, 47, 0, 1),
(3501, 47, 0, 1),
(3502, 47, 0, 1),
(1102, 47, 0, 1),
(2324, 47, 0, 1),
(117, 47, 0, 1),
(205, 47, 0, 1),
(1793, 47, 0, 1),
(3503, 47, 0, 1),
(494, 47, 0, 1),
(3504, 47, 0, 1),
(3505, 47, 0, 1),
(924, 47, 0, 1),
(155, 47, 0, 1),
(3506, 47, 0, 1),
(512, 47, 0, 1),
(3507, 47, 0, 1),
(3508, 47, 0, 1),
(23, 47, 0, 1),
(3509, 47, 0, 1),
(156, 47, 0, 1),
(163, 47, 0, 1),
(19, 47, 0, 1),
(3510, 47, 0, 1),
(3511, 47, 0, 1),
(592, 47, 0, 1),
(3512, 47, 0, 1),
(3513, 47, 0, 1),
(3514, 47, 0, 1),
(77, 47, 0, 1),
(3515, 47, 0, 1),
(479, 47, 0, 1),
(391, 47, 0, 1),
(1841, 47, 0, 1),
(3516, 47, 0, 1),
(224, 47, 0, 1),
(388, 47, 0, 1),
(420, 47, 0, 1),
(3517, 47, 0, 1),
(3518, 47, 0, 1),
(3519, 47, 0, 1),
(3520, 47, 0, 1),
(3521, 48, 0, 0),
(3522, 48, 0, 0),
(3523, 48, 0, 0),
(3524, 48, 0, 0),
(2333, 48, 0, 1),
(1283, 48, 0, 1),
(163, 48, 0, 1),
(1844, 48, 0, 1),
(3525, 48, 0, 1),
(297, 48, 0, 1),
(1032, 48, 0, 1),
(362, 48, 0, 1),
(2639, 48, 0, 1),
(2221, 48, 0, 1),
(45, 48, 0, 1),
(155, 48, 0, 1),
(581, 48, 0, 1),
(1225, 48, 0, 1),
(3526, 48, 0, 1),
(2673, 48, 0, 1),
(131, 48, 0, 1),
(713, 48, 0, 1),
(464, 48, 0, 1),
(3527, 48, 0, 1),
(258, 48, 0, 1),
(3528, 48, 0, 1),
(454, 48, 0, 1),
(3529, 48, 0, 1),
(3530, 48, 0, 1),
(2240, 48, 0, 1),
(517, 48, 0, 1),
(2379, 48, 0, 1),
(3531, 48, 0, 1),
(2598, 48, 0, 1),
(2373, 48, 0, 1),
(3532, 48, 0, 1),
(3533, 48, 0, 1),
(1139, 48, 0, 1),
(123, 48, 0, 1),
(2321, 48, 0, 1),
(2574, 48, 0, 1),
(1303, 48, 0, 1),
(73, 48, 0, 1),
(3534, 48, 0, 1),
(94, 48, 0, 1),
(89, 48, 0, 1),
(391, 48, 0, 1),
(3535, 48, 0, 1),
(3536, 48, 0, 1),
(3537, 48, 0, 1),
(1175, 48, 0, 1),
(1757, 48, 0, 1),
(157, 48, 0, 1),
(2320, 48, 0, 1),
(117, 48, 0, 1),
(866, 48, 0, 1),
(3445, 48, 0, 1),
(256, 48, 0, 1),
(65, 48, 0, 1),
(2696, 48, 0, 1),
(39, 48, 0, 1),
(3100, 48, 0, 1),
(3538, 48, 0, 1),
(3444, 48, 0, 1),
(274, 48, 0, 1),
(3352, 48, 0, 1),
(643, 48, 0, 1),
(132, 48, 0, 1),
(3539, 48, 0, 1),
(221, 48, 0, 1),
(317, 48, 0, 1),
(2793, 48, 0, 1),
(2633, 48, 0, 1),
(9, 48, 0, 1),
(494, 48, 0, 1),
(174, 48, 0, 1),
(649, 48, 0, 1),
(2466, 48, 0, 1),
(3540, 48, 0, 1),
(463, 48, 0, 1),
(3541, 48, 0, 1),
(156, 48, 0, 1),
(3202, 48, 0, 1),
(623, 48, 0, 1),
(3542, 48, 0, 1),
(1523, 48, 0, 1),
(3543, 48, 0, 1),
(419, 48, 0, 1),
(3497, 48, 0, 1),
(2499, 48, 0, 1),
(3544, 48, 0, 1),
(2204, 48, 0, 1),
(191, 48, 0, 1),
(800, 48, 0, 1),
(3545, 48, 0, 1),
(175, 48, 0, 1),
(3546, 48, 0, 1),
(3547, 48, 0, 1),
(3386, 48, 0, 1),
(3548, 48, 0, 1),
(1190, 48, 0, 1),
(507, 48, 0, 1),
(1825, 48, 0, 1),
(2348, 48, 0, 1),
(227, 48, 0, 1),
(1176, 48, 0, 1),
(3549, 48, 0, 1),
(3550, 48, 0, 1),
(2219, 48, 0, 1),
(3551, 48, 0, 1),
(2974, 48, 0, 1),
(120, 48, 0, 1),
(3243, 48, 0, 1),
(3031, 48, 0, 1),
(41, 48, 0, 1),
(3033, 48, 0, 1),
(3552, 48, 0, 1),
(3553, 48, 0, 1),
(2193, 48, 0, 1),
(147, 48, 0, 1),
(186, 48, 0, 1),
(1355, 48, 0, 1),
(2000, 48, 0, 1),
(2512, 48, 0, 1),
(3471, 48, 0, 1),
(1278, 48, 0, 1),
(2687, 48, 0, 1),
(361, 48, 0, 1),
(1129, 48, 0, 1),
(3554, 48, 0, 1),
(268, 48, 0, 1),
(2479, 48, 0, 1),
(3555, 48, 0, 1),
(3556, 48, 0, 1),
(1471, 48, 0, 1),
(478, 48, 0, 1),
(3557, 48, 0, 1),
(288, 48, 0, 1),
(3558, 48, 0, 1),
(1109, 48, 0, 1),
(1695, 48, 0, 1),
(1271, 48, 0, 1),
(3559, 48, 0, 1),
(3560, 48, 0, 1),
(1038, 48, 0, 1),
(210, 48, 0, 1),
(3561, 49, 0, 0),
(3562, 49, 0, 0),
(3563, 49, 0, 0),
(2333, 49, 0, 1),
(1757, 49, 0, 1),
(2221, 49, 0, 1),
(3564, 49, 0, 1),
(1821, 49, 0, 1),
(1120, 49, 0, 1),
(2795, 49, 0, 1),
(680, 49, 0, 1),
(2207, 49, 0, 1),
(454, 49, 0, 1),
(2793, 49, 0, 1),
(297, 49, 0, 1),
(221, 49, 0, 1),
(3565, 49, 0, 1),
(3566, 49, 0, 1),
(1670, 49, 0, 1),
(3567, 49, 0, 1),
(2643, 49, 0, 1),
(582, 49, 0, 1),
(3568, 49, 0, 1),
(45, 49, 0, 1),
(3569, 49, 0, 1),
(622, 49, 0, 1),
(2522, 49, 0, 1),
(601, 49, 0, 1),
(3570, 49, 0, 1),
(2236, 49, 0, 1),
(3571, 49, 0, 1),
(2608, 49, 0, 1),
(163, 49, 0, 1),
(1036, 49, 0, 1),
(181, 49, 0, 1),
(2497, 49, 0, 1),
(1614, 49, 0, 1),
(3572, 49, 0, 1),
(32, 49, 0, 1),
(3573, 49, 0, 1),
(3574, 49, 0, 1),
(94, 49, 0, 1),
(2587, 49, 0, 1),
(3252, 49, 0, 1),
(2613, 49, 0, 1),
(3091, 49, 0, 1),
(1269, 49, 0, 1),
(3575, 49, 0, 1),
(3386, 49, 0, 1),
(3576, 49, 0, 1),
(227, 49, 0, 1),
(2216, 49, 0, 1),
(3577, 49, 0, 1),
(256, 49, 0, 1),
(3578, 49, 0, 1),
(690, 49, 0, 1),
(1212, 49, 0, 1),
(1552, 49, 0, 1),
(226, 49, 0, 1),
(362, 49, 0, 1),
(1043, 49, 0, 1),
(3106, 49, 0, 1),
(323, 49, 0, 1),
(133, 49, 0, 1),
(713, 49, 0, 1),
(19, 49, 0, 1),
(1440, 49, 0, 1),
(3579, 49, 0, 1),
(3580, 49, 0, 1),
(77, 49, 0, 1),
(3581, 49, 0, 1),
(3582, 49, 0, 1),
(1260, 49, 0, 1),
(127, 49, 0, 1),
(564, 49, 0, 1),
(3583, 49, 0, 1),
(3584, 49, 0, 1),
(3585, 49, 0, 1),
(148, 49, 0, 1),
(2335, 49, 0, 1),
(2210, 49, 0, 1),
(2222, 49, 0, 1),
(3586, 49, 0, 1),
(3587, 49, 0, 1),
(3105, 49, 0, 1),
(1586, 49, 0, 1),
(3390, 49, 0, 1),
(9, 49, 0, 1),
(1710, 49, 0, 1),
(2310, 49, 0, 1),
(335, 49, 0, 1),
(866, 49, 0, 1),
(2344, 49, 0, 1),
(224, 49, 0, 1),
(3588, 49, 0, 1),
(1186, 49, 0, 1),
(1066, 49, 0, 1),
(960, 49, 0, 1),
(3589, 49, 0, 1),
(73, 49, 0, 1),
(3590, 49, 0, 1),
(3591, 49, 0, 1),
(3592, 49, 0, 1),
(49, 49, 0, 1),
(932, 49, 0, 1),
(456, 49, 0, 1),
(120, 49, 0, 1),
(3593, 49, 0, 1),
(581, 49, 0, 1),
(3594, 49, 0, 1),
(2832, 49, 0, 1),
(3595, 49, 0, 1),
(2685, 49, 0, 1),
(2219, 49, 0, 1),
(3596, 49, 0, 1),
(3597, 49, 0, 1),
(3598, 49, 0, 1),
(3599, 49, 0, 1),
(210, 49, 0, 1),
(3600, 50, 0, 0),
(3601, 50, 0, 0),
(2333, 50, 0, 1),
(692, 50, 0, 1),
(3602, 50, 0, 1),
(2845, 50, 0, 1),
(1192, 50, 0, 1),
(2516, 50, 0, 1),
(3603, 50, 0, 1),
(1653, 50, 0, 1),
(3252, 50, 0, 1),
(45, 50, 0, 1),
(2252, 50, 0, 1),
(3604, 50, 0, 1),
(3215, 50, 0, 1),
(2240, 50, 0, 1),
(582, 50, 0, 1),
(32, 50, 0, 1),
(658, 50, 0, 1),
(3012, 50, 0, 1),
(2221, 50, 0, 1),
(3605, 50, 0, 1),
(3606, 50, 0, 1),
(693, 50, 0, 1),
(1176, 50, 0, 1),
(2685, 50, 0, 1),
(109, 50, 0, 1),
(3123, 50, 0, 1),
(256, 50, 0, 1),
(65, 50, 0, 1),
(3607, 50, 0, 1),
(462, 50, 0, 1),
(3608, 50, 0, 1),
(3609, 50, 0, 1),
(3610, 50, 0, 1),
(3611, 50, 0, 1),
(621, 50, 0, 1),
(3612, 50, 0, 1),
(94, 50, 0, 1),
(3613, 50, 0, 1),
(3614, 50, 0, 1),
(9, 50, 0, 1),
(3615, 50, 0, 1),
(243, 50, 0, 1),
(2535, 50, 0, 1),
(327, 50, 0, 1),
(3616, 50, 0, 1),
(3617, 50, 0, 1),
(2303, 50, 0, 1),
(641, 50, 0, 1),
(3618, 50, 0, 1),
(188, 50, 0, 1),
(139, 50, 0, 1),
(3619, 50, 0, 1),
(2453, 50, 0, 1),
(1170, 50, 0, 1),
(3620, 50, 0, 1),
(221, 50, 0, 1),
(766, 50, 0, 1),
(3621, 50, 0, 1),
(3622, 50, 0, 1),
(3623, 50, 0, 1),
(174, 50, 0, 1),
(38, 50, 0, 1),
(362, 50, 0, 1),
(3624, 50, 0, 1),
(230, 50, 0, 1),
(2781, 50, 0, 1),
(408, 50, 0, 1),
(3625, 50, 0, 1),
(1078, 50, 0, 1),
(3626, 50, 0, 1),
(3627, 50, 0, 1),
(3628, 50, 0, 1),
(623, 50, 0, 1),
(199, 50, 0, 1),
(3199, 50, 0, 1),
(258, 50, 0, 1),
(1147, 50, 0, 1),
(210, 50, 0, 1),
(3629, 51, 0, 0),
(3630, 51, 0, 0),
(3631, 51, 0, 0),
(3632, 51, 0, 0),
(3633, 51, 0, 1),
(3630, 51, 0, 1),
(226, 51, 0, 1),
(3634, 51, 0, 1),
(3632, 51, 0, 1),
(649, 51, 0, 1),
(484, 51, 0, 1),
(462, 51, 0, 1),
(3635, 51, 0, 1),
(3393, 51, 0, 1),
(3636, 51, 0, 1),
(3637, 51, 0, 1),
(89, 51, 0, 1),
(90, 51, 0, 1),
(840, 51, 0, 1),
(147, 51, 0, 1),
(3638, 51, 0, 1),
(205, 51, 0, 1),
(323, 51, 0, 1),
(2357, 51, 0, 1),
(3639, 51, 0, 1),
(1726, 51, 0, 1),
(139, 51, 0, 1),
(45, 51, 0, 1),
(2322, 51, 0, 1),
(3640, 51, 0, 1),
(183, 51, 0, 1),
(3641, 51, 0, 1),
(1283, 51, 0, 1),
(210, 51, 0, 1),
(3642, 52, 0, 0),
(3643, 52, 0, 0),
(3644, 52, 0, 0),
(2333, 52, 0, 1),
(3642, 52, 0, 1),
(226, 52, 0, 1),
(3645, 52, 0, 1),
(408, 52, 0, 1),
(3641, 52, 0, 1),
(45, 52, 0, 1),
(150, 52, 0, 1),
(1965, 52, 0, 1),
(3646, 52, 0, 1),
(400, 52, 0, 1),
(1942, 52, 0, 1),
(2395, 52, 0, 1),
(2126, 52, 0, 1),
(3647, 52, 0, 1),
(297, 52, 0, 1),
(874, 52, 0, 1),
(839, 52, 0, 1),
(3648, 52, 0, 1),
(668, 52, 0, 1),
(3649, 52, 0, 1),
(1283, 52, 0, 1),
(840, 52, 0, 1),
(3650, 52, 0, 1),
(615, 52, 0, 1),
(168, 52, 0, 1),
(39, 52, 0, 1),
(3651, 52, 0, 1),
(3652, 52, 0, 1),
(2373, 52, 0, 1),
(3653, 52, 0, 1),
(2215, 52, 0, 1),
(2559, 52, 0, 1),
(3654, 52, 0, 1),
(3655, 52, 0, 1),
(3390, 52, 0, 1),
(227, 52, 0, 1),
(2210, 52, 0, 1),
(3202, 52, 0, 1),
(3656, 52, 0, 1),
(3426, 52, 0, 1),
(2893, 52, 0, 1),
(2969, 52, 0, 1),
(1032, 52, 0, 1),
(3134, 52, 0, 1),
(3657, 52, 0, 1),
(12, 52, 0, 1),
(9, 52, 0, 1),
(46, 52, 0, 1),
(121, 52, 0, 1),
(198, 52, 0, 1),
(199, 52, 0, 1),
(169, 52, 0, 1),
(3658, 52, 0, 1),
(10, 52, 0, 1),
(866, 52, 0, 1),
(2193, 52, 0, 1),
(1793, 52, 0, 1),
(65, 52, 0, 1),
(1683, 52, 0, 1),
(3659, 52, 0, 1),
(395, 52, 0, 1),
(362, 52, 0, 1),
(3644, 52, 0, 1),
(462, 52, 0, 1),
(953, 52, 0, 1),
(3660, 52, 0, 1),
(795, 52, 0, 1),
(27, 52, 0, 1),
(3661, 52, 0, 1),
(3662, 52, 0, 1),
(3663, 52, 0, 1),
(3664, 52, 0, 1),
(3665, 52, 0, 1),
(3666, 52, 0, 1),
(246, 52, 0, 1),
(323, 52, 0, 1),
(3667, 52, 0, 1),
(793, 52, 0, 1),
(960, 52, 0, 1),
(582, 52, 0, 1),
(3668, 52, 0, 1),
(3669, 52, 0, 1),
(481, 52, 0, 1),
(56, 52, 0, 1),
(598, 52, 0, 1),
(3448, 52, 0, 1),
(917, 52, 0, 1),
(3399, 52, 0, 1),
(92, 52, 0, 1),
(293, 52, 0, 1),
(2305, 52, 0, 1),
(3670, 52, 0, 1),
(511, 52, 0, 1),
(3671, 52, 0, 1),
(32, 52, 0, 1),
(3672, 52, 0, 1),
(256, 52, 0, 1),
(2360, 52, 0, 1),
(713, 52, 0, 1),
(3673, 52, 0, 1),
(3674, 52, 0, 1),
(259, 52, 0, 1),
(1179, 52, 0, 1),
(3675, 52, 0, 1),
(3676, 52, 0, 1),
(3677, 52, 0, 1),
(3678, 52, 0, 1),
(693, 52, 0, 1),
(1817, 52, 0, 1),
(3679, 52, 0, 1),
(3680, 52, 0, 1),
(3681, 52, 0, 1),
(3682, 52, 0, 1),
(3269, 52, 0, 1),
(147, 52, 0, 1),
(3275, 52, 0, 1),
(3683, 52, 0, 1),
(3684, 52, 0, 1),
(314, 52, 0, 1),
(3685, 52, 0, 1),
(143, 52, 0, 1),
(413, 52, 0, 1),
(3686, 52, 0, 1),
(3687, 52, 0, 1),
(3100, 52, 0, 1),
(3688, 52, 0, 1),
(3392, 52, 0, 1),
(3689, 52, 0, 1),
(454, 52, 0, 1),
(3690, 52, 0, 1),
(3172, 52, 0, 1),
(3691, 52, 0, 1),
(1069, 52, 0, 1),
(3692, 52, 0, 1),
(1825, 52, 0, 1),
(3693, 52, 0, 1),
(3248, 52, 0, 1),
(139, 52, 0, 1),
(163, 52, 0, 1),
(160, 52, 0, 1),
(2242, 52, 0, 1),
(3694, 52, 0, 1),
(3695, 52, 0, 1),
(494, 52, 0, 1),
(2636, 52, 0, 1),
(2284, 52, 0, 1),
(2196, 52, 0, 1),
(1190, 52, 0, 1),
(2598, 52, 0, 1),
(3696, 52, 0, 1),
(2815, 52, 0, 1),
(200, 52, 0, 1),
(2230, 52, 0, 1),
(3697, 52, 0, 1),
(192, 52, 0, 1),
(3698, 52, 0, 1),
(3252, 52, 0, 1),
(1552, 52, 0, 1),
(2289, 52, 0, 1),
(3699, 52, 0, 1),
(3700, 52, 0, 1),
(11, 52, 0, 1),
(517, 52, 0, 1),
(3701, 52, 0, 1),
(2795, 52, 0, 1),
(258, 52, 0, 1),
(73, 52, 0, 1),
(2207, 52, 0, 1),
(268, 52, 0, 1),
(2479, 52, 0, 1),
(3702, 52, 0, 1),
(3703, 52, 0, 1),
(3704, 52, 0, 1),
(3705, 52, 0, 1),
(3706, 52, 0, 1),
(599, 52, 0, 1),
(30, 52, 0, 1),
(3707, 52, 0, 1),
(186, 52, 0, 1),
(1266, 52, 0, 1),
(3708, 52, 0, 1),
(2721, 52, 0, 1),
(3709, 52, 0, 1),
(3095, 52, 0, 1),
(123, 52, 0, 1),
(3638, 52, 0, 1),
(3081, 52, 0, 1),
(183, 52, 0, 1),
(3710, 52, 0, 1),
(127, 52, 0, 1),
(800, 52, 0, 1),
(2802, 52, 0, 1),
(3711, 52, 0, 1),
(3712, 52, 0, 1),
(2365, 52, 0, 1),
(3713, 52, 0, 1),
(3714, 52, 0, 1),
(2732, 52, 0, 1),
(145, 52, 0, 1),
(3715, 52, 0, 1),
(1066, 52, 0, 1),
(94, 52, 0, 1),
(3716, 52, 0, 1),
(118, 52, 0, 1),
(2307, 52, 0, 1),
(3717, 52, 0, 1),
(3718, 52, 0, 1),
(292, 52, 0, 1),
(2708, 52, 0, 1),
(3719, 52, 0, 1),
(131, 52, 0, 1),
(2262, 52, 0, 1),
(3720, 52, 0, 1),
(3721, 52, 0, 1),
(656, 52, 0, 1),
(3722, 52, 0, 1),
(69, 52, 0, 1),
(1170, 52, 0, 1),
(1570, 52, 0, 1),
(191, 52, 0, 1),
(3723, 52, 0, 1),
(3724, 52, 0, 1),
(2501, 52, 0, 1),
(79, 52, 0, 1),
(2443, 52, 0, 1),
(3725, 52, 0, 1),
(3726, 52, 0, 1),
(3727, 52, 0, 1),
(3728, 52, 0, 1),
(649, 52, 0, 1),
(484, 52, 0, 1),
(3729, 52, 0, 1),
(3730, 52, 0, 1),
(2577, 52, 0, 1),
(3731, 52, 0, 1),
(155, 52, 0, 1),
(3597, 52, 0, 1),
(3732, 52, 0, 1),
(1092, 52, 0, 1),
(3733, 52, 0, 1),
(1363, 52, 0, 1),
(3734, 52, 0, 1),
(3735, 52, 0, 1),
(3736, 52, 0, 1),
(3137, 52, 0, 1),
(3737, 52, 0, 1),
(3738, 52, 0, 1),
(3739, 52, 0, 1),
(3740, 52, 0, 1),
(3741, 52, 0, 1),
(3742, 52, 0, 1),
(3743, 52, 0, 1),
(3744, 52, 0, 1),
(210, 52, 0, 1),
(3745, 53, 0, 0),
(3746, 53, 0, 0),
(3747, 53, 0, 0),
(3748, 53, 0, 0),
(2333, 53, 0, 1),
(2499, 53, 0, 1),
(163, 53, 0, 1),
(122, 53, 0, 1),
(3749, 53, 0, 1),
(94, 53, 0, 1),
(157, 53, 0, 1),
(362, 53, 0, 1),
(795, 53, 0, 1),
(256, 53, 0, 1),
(800, 53, 0, 1),
(2696, 53, 0, 1),
(3750, 53, 0, 1),
(2675, 53, 0, 1),
(3751, 53, 0, 1),
(3752, 53, 0, 1),
(3322, 53, 0, 1),
(1631, 53, 0, 1),
(2449, 53, 0, 1),
(3753, 53, 0, 1),
(3754, 53, 0, 1),
(9, 53, 0, 1),
(3755, 53, 0, 1),
(1283, 53, 0, 1),
(2219, 53, 0, 1),
(3756, 53, 0, 1),
(2690, 53, 0, 1),
(478, 53, 0, 1),
(3757, 53, 0, 1),
(2866, 53, 0, 1),
(3758, 53, 0, 1),
(117, 53, 0, 1),
(297, 53, 0, 1),
(3759, 53, 0, 1),
(391, 53, 0, 1),
(2215, 53, 0, 1),
(2383, 53, 0, 1),
(3760, 53, 0, 1),
(2357, 53, 0, 1),
(3761, 53, 0, 1),
(417, 53, 0, 1),
(890, 53, 0, 1),
(3762, 53, 0, 1),
(131, 53, 0, 1),
(3763, 53, 0, 1),
(3764, 53, 0, 1),
(45, 53, 0, 1),
(221, 53, 0, 1),
(3765, 53, 0, 1),
(121, 53, 0, 1),
(3766, 53, 0, 1),
(2123, 53, 0, 1),
(454, 53, 0, 1),
(401, 53, 0, 1),
(3767, 53, 0, 1),
(3768, 53, 0, 1),
(2501, 53, 0, 1),
(199, 53, 0, 1),
(1459, 53, 0, 1),
(1903, 53, 0, 1),
(3769, 53, 0, 1),
(56, 53, 0, 1),
(198, 53, 0, 1),
(3770, 53, 0, 1),
(11, 53, 0, 1),
(874, 53, 0, 1),
(643, 53, 0, 1),
(3771, 53, 0, 1),
(2372, 53, 0, 1),
(3252, 53, 0, 1),
(226, 53, 0, 1),
(3772, 53, 0, 1),
(123, 53, 0, 1),
(3773, 53, 0, 1),
(2206, 53, 0, 1),
(3774, 53, 0, 1),
(1266, 53, 0, 1),
(568, 53, 0, 1),
(3775, 53, 0, 1),
(3776, 53, 0, 1),
(2307, 53, 0, 1),
(3439, 53, 0, 1),
(2321, 53, 0, 1),
(3777, 53, 0, 1),
(858, 53, 0, 1),
(2597, 53, 0, 1),
(3248, 53, 0, 1),
(1061, 53, 0, 1),
(3778, 53, 0, 1),
(462, 53, 0, 1),
(1574, 53, 0, 1),
(1440, 53, 0, 1),
(3779, 53, 0, 1),
(162, 53, 0, 1),
(3387, 53, 0, 1),
(3780, 53, 0, 1),
(3781, 53, 0, 1),
(227, 53, 0, 1),
(546, 53, 0, 1),
(3782, 53, 0, 1),
(1537, 53, 0, 1),
(3783, 53, 0, 1),
(812, 53, 0, 1),
(676, 53, 0, 1),
(3784, 53, 0, 1),
(3785, 53, 0, 1),
(3100, 53, 0, 1),
(507, 53, 0, 1),
(3342, 53, 0, 1),
(3786, 53, 0, 1),
(3787, 53, 0, 1),
(3444, 53, 0, 1),
(2240, 53, 0, 1),
(3788, 53, 0, 1),
(3789, 53, 0, 1),
(494, 53, 0, 1),
(3790, 53, 0, 1),
(186, 53, 0, 1),
(3341, 53, 0, 1),
(668, 53, 0, 1),
(3791, 53, 0, 1),
(3093, 53, 0, 1),
(3792, 53, 0, 1),
(3793, 53, 0, 1),
(147, 53, 0, 1),
(3794, 53, 0, 1),
(3795, 53, 0, 1),
(652, 53, 0, 1),
(183, 53, 0, 1),
(3796, 53, 0, 1),
(3797, 53, 0, 1),
(564, 53, 0, 1),
(2785, 53, 0, 1),
(2423, 53, 0, 1),
(992, 53, 0, 1),
(3798, 53, 0, 1),
(3799, 53, 0, 1),
(713, 53, 0, 1),
(3800, 53, 0, 1),
(3801, 53, 0, 1),
(3802, 53, 0, 1),
(3803, 53, 0, 1),
(3804, 53, 0, 1),
(74, 53, 0, 1),
(2193, 53, 0, 1),
(1710, 53, 0, 1),
(3805, 53, 0, 1),
(3135, 53, 0, 1),
(3108, 53, 0, 1),
(3806, 53, 0, 1),
(393, 53, 0, 1),
(3807, 53, 0, 1),
(3808, 53, 0, 1),
(3809, 53, 0, 1),
(3810, 53, 0, 1),
(3811, 53, 0, 1),
(210, 53, 0, 1),
(3812, 54, 0, 0),
(3813, 54, 0, 0),
(3814, 54, 0, 0),
(3816, 4, 1, 0),
(3817, 4, 3, 0),
(3818, 55, 0, 0),
(3819, 55, 0, 0),
(3820, 55, 0, 0),
(3821, 55, 0, 0),
(3822, 55, 0, 0),
(3823, 55, 0, 0),
(2333, 55, 0, 1),
(2305, 55, 0, 1),
(226, 55, 0, 1),
(598, 55, 0, 1),
(3821, 55, 0, 1),
(3824, 55, 0, 1),
(3825, 55, 0, 1),
(957, 55, 0, 1),
(92, 55, 0, 1),
(2, 55, 0, 1),
(1022, 55, 0, 1),
(1410, 55, 0, 1),
(1029, 55, 0, 1),
(183, 55, 0, 1),
(3826, 55, 0, 1),
(45, 55, 0, 1),
(118, 55, 0, 1),
(2215, 55, 0, 1),
(1107, 55, 0, 1),
(2340, 55, 0, 1),
(9, 55, 0, 1),
(2292, 55, 0, 1),
(2715, 55, 0, 1),
(3827, 55, 0, 1),
(1212, 55, 0, 1),
(2664, 55, 0, 1),
(27, 55, 0, 1),
(63, 55, 0, 1),
(2625, 55, 0, 1),
(6, 55, 0, 1),
(3828, 55, 0, 1),
(73, 55, 0, 1),
(2547, 55, 0, 1),
(2256, 55, 0, 1),
(3829, 55, 0, 1),
(2582, 55, 0, 1),
(2537, 55, 0, 1),
(1451, 55, 0, 1),
(3646, 55, 0, 1),
(2479, 55, 0, 1),
(3830, 55, 0, 1),
(259, 55, 0, 1),
(1120, 55, 0, 1),
(3338, 55, 0, 1),
(127, 55, 0, 1),
(224, 55, 0, 1),
(297, 55, 0, 1),
(195, 55, 0, 1),
(3831, 55, 0, 1),
(3832, 55, 0, 1),
(2847, 55, 0, 1),
(3833, 55, 0, 1),
(431, 55, 0, 1),
(1964, 55, 0, 1),
(3834, 55, 0, 1),
(788, 55, 0, 1),
(3835, 55, 0, 1),
(693, 55, 0, 1),
(3836, 55, 0, 1),
(1224, 55, 0, 1),
(3837, 55, 0, 1),
(199, 55, 0, 1),
(3838, 55, 0, 1),
(3839, 55, 0, 1),
(462, 55, 0, 1),
(221, 55, 0, 1),
(3840, 55, 0, 1),
(230, 55, 0, 1),
(823, 55, 0, 1),
(41, 55, 0, 1),
(3841, 55, 0, 1),
(631, 55, 0, 1),
(2559, 55, 0, 1),
(3034, 55, 0, 1),
(2344, 55, 0, 1),
(3842, 55, 0, 1),
(395, 55, 0, 1),
(3843, 55, 0, 1),
(2974, 55, 0, 1),
(3844, 55, 0, 1),
(371, 55, 0, 1),
(3845, 55, 0, 1),
(3846, 55, 0, 1),
(40, 55, 0, 1),
(3847, 55, 0, 1),
(2680, 55, 0, 1),
(3144, 55, 0, 1),
(168, 55, 0, 1),
(1845, 55, 0, 1),
(3848, 55, 0, 1),
(1036, 55, 0, 1),
(3849, 55, 0, 1),
(3850, 55, 0, 1),
(94, 55, 0, 1),
(1278, 55, 0, 1),
(109, 55, 0, 1),
(3851, 55, 0, 1),
(3852, 55, 0, 1),
(3853, 55, 0, 1),
(3854, 55, 0, 1),
(3855, 55, 0, 1),
(3281, 55, 0, 1),
(2730, 55, 0, 1),
(3856, 55, 0, 1),
(1782, 55, 0, 1),
(2247, 55, 0, 1),
(69, 55, 0, 1),
(174, 55, 0, 1),
(3857, 55, 0, 1),
(3858, 55, 0, 1),
(3859, 55, 0, 1),
(3860, 55, 0, 1),
(145, 55, 0, 1),
(1924, 55, 0, 1),
(413, 55, 0, 1),
(2204, 55, 0, 1),
(3861, 55, 0, 1),
(181, 55, 0, 1),
(3862, 55, 0, 1),
(157, 55, 0, 1),
(79, 55, 0, 1),
(3351, 55, 0, 1),
(65, 55, 0, 1),
(3863, 55, 0, 1),
(3864, 55, 0, 1),
(3865, 55, 0, 1),
(2193, 55, 0, 1),
(147, 55, 0, 1),
(2383, 55, 0, 1),
(2457, 55, 0, 1),
(3206, 55, 0, 1),
(3866, 55, 0, 1),
(163, 55, 0, 1),
(3867, 55, 0, 1),
(507, 55, 0, 1),
(467, 55, 0, 1),
(210, 55, 0, 1),
(3868, 56, 0, 0),
(3869, 56, 0, 0),
(2333, 56, 0, 1),
(3338, 56, 0, 1),
(3870, 56, 0, 1),
(2215, 56, 0, 1),
(1109, 56, 0, 1),
(1212, 56, 0, 1),
(3871, 56, 0, 1),
(298, 56, 0, 1),
(1965, 56, 0, 1),
(960, 56, 0, 1),
(3872, 56, 0, 1),
(183, 56, 0, 1),
(795, 56, 0, 1),
(9, 56, 0, 1),
(3755, 56, 0, 1),
(45, 56, 0, 1),
(582, 56, 0, 1),
(32, 56, 0, 1),
(3873, 56, 0, 1),
(3874, 56, 0, 1),
(650, 56, 0, 1),
(226, 56, 0, 1),
(2740, 56, 0, 1),
(163, 56, 0, 1),
(3875, 56, 0, 1),
(693, 56, 0, 1),
(551, 56, 0, 1),
(2321, 56, 0, 1),
(3876, 56, 0, 1),
(3877, 56, 0, 1),
(3027, 56, 0, 1),
(3878, 56, 0, 1),
(2291, 56, 0, 1),
(3415, 56, 0, 1),
(2270, 56, 0, 1),
(3879, 56, 0, 1),
(454, 56, 0, 1),
(3880, 56, 0, 1),
(3247, 56, 0, 1),
(1399, 56, 0, 1),
(2795, 56, 0, 1),
(3881, 56, 0, 1),
(2256, 56, 0, 1),
(866, 56, 0, 1),
(1043, 56, 0, 1),
(2372, 56, 0, 1),
(3882, 56, 0, 1),
(3197, 56, 0, 1),
(3883, 56, 0, 1),
(2894, 56, 0, 1),
(3884, 56, 0, 1),
(258, 56, 0, 1),
(1938, 56, 0, 1),
(2690, 56, 0, 1),
(623, 56, 0, 1),
(199, 56, 0, 1),
(3885, 56, 0, 1),
(3886, 56, 0, 1),
(1283, 56, 0, 1),
(205, 56, 0, 1),
(3464, 56, 0, 1),
(2340, 56, 0, 1),
(2675, 56, 0, 1),
(3887, 56, 0, 1),
(3888, 56, 0, 1),
(3387, 56, 0, 1),
(1523, 56, 0, 1),
(3889, 56, 0, 1),
(3890, 56, 0, 1),
(3171, 56, 0, 1),
(3172, 56, 0, 1),
(3891, 56, 0, 1),
(196, 56, 0, 1),
(819, 56, 0, 1),
(3892, 56, 0, 1),
(3893, 56, 0, 1),
(478, 56, 0, 1),
(2204, 56, 0, 1),
(622, 56, 0, 1),
(39, 56, 0, 1),
(1179, 56, 0, 1),
(3894, 56, 0, 1),
(3134, 56, 0, 1),
(69, 56, 0, 1),
(3895, 56, 0, 1),
(2295, 56, 0, 1),
(3896, 56, 0, 1),
(3897, 56, 0, 1),
(362, 56, 0, 1),
(2357, 56, 0, 1),
(3898, 56, 0, 1),
(3899, 56, 0, 1),
(2457, 56, 0, 1),
(3834, 56, 0, 1),
(2262, 56, 0, 1),
(2206, 56, 0, 1),
(3900, 56, 0, 1),
(268, 56, 0, 1),
(1924, 56, 0, 1),
(174, 56, 0, 1),
(649, 56, 0, 1),
(823, 56, 0, 1),
(942, 56, 0, 1),
(19, 56, 0, 1),
(1066, 56, 0, 1),
(676, 56, 0, 1),
(3901, 56, 0, 1),
(3902, 56, 0, 1),
(3903, 56, 0, 1),
(3110, 56, 0, 1),
(395, 56, 0, 1),
(277, 56, 0, 1),
(3904, 56, 0, 1),
(3866, 56, 0, 1),
(131, 56, 0, 1),
(431, 56, 0, 1),
(91, 56, 0, 1),
(2219, 56, 0, 1),
(3252, 56, 0, 1),
(94, 56, 0, 1),
(77, 56, 0, 1),
(3760, 56, 0, 1),
(3905, 56, 0, 1),
(2742, 56, 0, 1),
(3906, 56, 0, 1),
(3461, 56, 0, 1),
(874, 56, 0, 1),
(2587, 56, 0, 1),
(2383, 56, 0, 1),
(92, 56, 0, 1),
(3907, 56, 0, 1),
(2706, 56, 0, 1),
(2574, 56, 0, 1),
(391, 56, 0, 1),
(481, 56, 0, 1),
(553, 56, 0, 1),
(3908, 56, 0, 1),
(1710, 56, 0, 1),
(3271, 56, 0, 1),
(712, 56, 0, 1),
(3909, 56, 0, 1),
(1695, 56, 0, 1),
(14, 56, 0, 1),
(3910, 56, 0, 1),
(256, 56, 0, 1),
(2324, 56, 0, 1),
(3911, 56, 0, 1),
(73, 56, 0, 1),
(3912, 56, 0, 1),
(2483, 56, 0, 1),
(3158, 56, 0, 1),
(3913, 56, 0, 1),
(175, 56, 0, 1),
(3914, 56, 0, 1),
(121, 56, 0, 1),
(118, 56, 0, 1),
(3915, 56, 0, 1),
(3916, 56, 0, 1),
(3917, 56, 0, 1),
(123, 56, 0, 1),
(1111, 56, 0, 1),
(3918, 56, 0, 1),
(3919, 56, 0, 1),
(181, 56, 0, 1),
(227, 56, 0, 1),
(3920, 56, 0, 1),
(3921, 56, 0, 1),
(3922, 56, 0, 1),
(3923, 56, 0, 1),
(3924, 56, 0, 1),
(127, 56, 0, 1),
(3925, 56, 0, 1),
(361, 56, 0, 1),
(3926, 56, 0, 1),
(151, 56, 0, 1),
(3927, 56, 0, 1),
(3928, 56, 0, 1),
(30, 56, 0, 1),
(3141, 56, 0, 1),
(3929, 56, 0, 1),
(3930, 56, 0, 1),
(494, 56, 0, 1),
(3931, 56, 0, 1),
(507, 56, 0, 1),
(2360, 56, 0, 1),
(2689, 56, 0, 1),
(3531, 56, 0, 1),
(2708, 56, 0, 1),
(2314, 56, 0, 1),
(3375, 56, 0, 1),
(2207, 56, 0, 1),
(2343, 56, 0, 1),
(10, 56, 0, 1),
(630, 56, 0, 1),
(3932, 56, 0, 1),
(3933, 56, 0, 1),
(255, 56, 0, 1),
(3934, 56, 0, 1),
(3935, 56, 0, 1),
(3936, 56, 0, 1),
(3091, 56, 0, 1),
(3126, 56, 0, 1),
(3869, 56, 0, 1),
(2818, 56, 0, 1),
(1440, 56, 0, 1),
(3937, 56, 0, 1),
(2196, 56, 0, 1),
(3434, 56, 0, 1),
(3938, 56, 0, 1),
(207, 56, 0, 1),
(168, 56, 0, 1),
(2527, 56, 0, 1),
(3939, 56, 0, 1),
(3940, 56, 0, 1),
(3941, 56, 0, 1),
(143, 56, 0, 1),
(3942, 56, 0, 1),
(3943, 56, 0, 1),
(3944, 56, 0, 1),
(3945, 56, 0, 1),
(459, 56, 0, 1),
(3344, 56, 0, 1),
(2554, 56, 0, 1),
(3946, 56, 0, 1),
(195, 56, 0, 1),
(23, 56, 0, 1),
(2654, 56, 0, 1),
(3947, 56, 0, 1),
(154, 56, 0, 1),
(2210, 56, 0, 1),
(3497, 56, 0, 1),
(3948, 56, 0, 1),
(3949, 56, 0, 1),
(3950, 56, 0, 1),
(3951, 56, 0, 1),
(400, 56, 0, 1),
(3844, 56, 0, 1),
(2412, 56, 0, 1),
(56, 56, 0, 1),
(65, 56, 0, 1),
(3952, 56, 0, 1),
(3953, 56, 0, 1),
(3954, 56, 0, 1),
(3677, 56, 0, 1),
(3955, 56, 0, 1),
(3956, 56, 0, 1),
(3957, 56, 0, 1),
(3958, 56, 0, 1),
(2379, 56, 0, 1),
(3959, 56, 0, 1),
(2504, 56, 0, 1),
(399, 56, 0, 1),
(186, 56, 0, 1),
(138, 56, 0, 1),
(40, 56, 0, 1),
(2680, 56, 0, 1),
(210, 56, 0, 1),
(3960, 57, 0, 0),
(3961, 57, 0, 0),
(2333, 57, 0, 1),
(3851, 57, 0, 1),
(3962, 57, 0, 1),
(631, 57, 0, 1),
(3398, 57, 0, 1),
(140, 57, 0, 1),
(3963, 57, 0, 1),
(3964, 57, 0, 1),
(3965, 57, 0, 1),
(819, 57, 0, 1),
(3966, 57, 0, 1),
(3967, 57, 0, 1),
(3968, 57, 0, 1),
(979, 57, 0, 1),
(3969, 57, 0, 1),
(160, 57, 0, 1),
(147, 57, 0, 1),
(693, 57, 0, 1),
(3970, 57, 0, 1),
(3971, 57, 0, 1),
(3972, 57, 0, 1),
(9, 57, 0, 1),
(1107, 57, 0, 1),
(517, 57, 0, 1),
(2558, 57, 0, 1),
(582, 57, 0, 1),
(3973, 57, 0, 1),
(3041, 57, 0, 1),
(391, 57, 0, 1),
(3974, 57, 0, 1),
(3975, 57, 0, 1),
(378, 57, 0, 1),
(84, 57, 0, 1),
(3976, 57, 0, 1),
(2499, 57, 0, 1),
(3977, 57, 0, 1),
(3978, 57, 0, 1),
(297, 57, 0, 1),
(2566, 57, 0, 1),
(3979, 57, 0, 1),
(3980, 57, 0, 1),
(3981, 57, 0, 1),
(3982, 57, 0, 1),
(3983, 57, 0, 1),
(3984, 57, 0, 1),
(496, 57, 0, 1),
(198, 57, 0, 1),
(3167, 57, 0, 1),
(163, 57, 0, 1),
(3985, 57, 0, 1),
(199, 57, 0, 1),
(454, 57, 0, 1),
(3986, 57, 0, 1),
(793, 57, 0, 1),
(3987, 57, 0, 1),
(3988, 57, 0, 1),
(3989, 57, 0, 1),
(3104, 57, 0, 1),
(12, 57, 0, 1),
(200, 57, 0, 1),
(306, 57, 0, 1),
(2181, 57, 0, 1),
(179, 57, 0, 1),
(3990, 57, 0, 1),
(2893, 57, 0, 1),
(2340, 57, 0, 1),
(94, 57, 0, 1),
(1278, 57, 0, 1),
(2379, 57, 0, 1),
(2088, 57, 0, 1),
(494, 57, 0, 1),
(2305, 57, 0, 1),
(3991, 57, 0, 1),
(3992, 57, 0, 1),
(32, 57, 0, 1),
(227, 57, 0, 1),
(232, 57, 0, 1),
(3993, 57, 0, 1),
(3961, 57, 0, 1),
(3994, 57, 0, 1),
(362, 57, 0, 1),
(1047, 57, 0, 1),
(72, 57, 0, 1),
(3995, 57, 0, 1),
(45, 57, 0, 1),
(2639, 57, 0, 1),
(3996, 57, 0, 1),
(3997, 57, 0, 1),
(3508, 57, 0, 1),
(2242, 57, 0, 1),
(866, 57, 0, 1),
(795, 57, 0, 1),
(11, 57, 0, 1),
(3998, 57, 0, 1),
(258, 57, 0, 1),
(2690, 57, 0, 1),
(3999, 57, 0, 1),
(1571, 57, 0, 1),
(329, 57, 0, 1),
(4000, 57, 0, 1),
(1162, 57, 0, 1),
(183, 57, 0, 1),
(4001, 57, 0, 1),
(4002, 57, 0, 1),
(505, 57, 0, 1),
(2633, 57, 0, 1),
(150, 57, 0, 1),
(2228, 57, 0, 1),
(2196, 57, 0, 1),
(56, 57, 0, 1),
(41, 57, 0, 1),
(4003, 57, 0, 1),
(4004, 57, 0, 1),
(4005, 57, 0, 1),
(4006, 57, 0, 1),
(122, 57, 0, 1),
(2890, 57, 0, 1),
(3642, 57, 0, 1),
(4007, 57, 0, 1),
(4008, 57, 0, 1),
(676, 57, 0, 1),
(4009, 57, 0, 1),
(4010, 57, 0, 1),
(4011, 57, 0, 1),
(2485, 57, 0, 1),
(395, 57, 0, 1),
(3248, 57, 0, 1),
(1283, 57, 0, 1),
(4012, 57, 0, 1),
(960, 57, 0, 1),
(3016, 57, 0, 1),
(408, 57, 0, 1),
(1099, 57, 0, 1),
(335, 57, 0, 1),
(3515, 57, 0, 1),
(4013, 57, 0, 1),
(224, 57, 0, 1),
(4014, 57, 0, 1),
(109, 57, 0, 1),
(3217, 57, 0, 1),
(4015, 57, 0, 1),
(4016, 57, 0, 1),
(4017, 57, 0, 1),
(712, 57, 0, 1),
(1683, 57, 0, 1),
(2204, 57, 0, 1),
(4018, 57, 0, 1),
(27, 57, 0, 1),
(4019, 57, 0, 1),
(145, 57, 0, 1),
(3677, 57, 0, 1),
(4020, 57, 0, 1),
(2344, 57, 0, 1),
(4021, 57, 0, 1),
(4022, 57, 0, 1),
(4023, 57, 0, 1),
(295, 57, 0, 1),
(4024, 57, 0, 1),
(2219, 57, 0, 1),
(690, 57, 0, 1),
(4025, 57, 0, 1),
(713, 57, 0, 1),
(91, 57, 0, 1),
(2193, 57, 0, 1),
(4026, 57, 0, 1),
(3306, 57, 0, 1),
(2604, 57, 0, 1),
(4027, 57, 0, 1),
(2715, 57, 0, 1),
(69, 57, 0, 1),
(4028, 57, 0, 1),
(3258, 57, 0, 1),
(210, 57, 0, 1),
(4029, 58, 0, 0),
(4030, 58, 0, 0),
(2333, 58, 0, 1),
(4029, 58, 0, 1),
(4031, 58, 0, 1),
(4032, 58, 0, 1),
(1191, 58, 0, 1),
(2219, 58, 0, 1),
(3322, 58, 0, 1),
(1093, 58, 0, 1),
(1094, 58, 0, 1),
(45, 58, 0, 1),
(3950, 58, 0, 1),
(4033, 58, 0, 1),
(4034, 58, 0, 1),
(795, 58, 0, 1),
(147, 58, 0, 1),
(4035, 58, 0, 1),
(4036, 58, 0, 1),
(1877, 58, 0, 1),
(3396, 58, 0, 1),
(395, 58, 0, 1),
(2270, 58, 0, 1),
(4037, 58, 0, 1),
(3677, 58, 0, 1),
(167, 58, 0, 1),
(11, 58, 0, 1),
(245, 58, 0, 1),
(3252, 58, 0, 1),
(3789, 58, 0, 1),
(4038, 58, 0, 1),
(4039, 58, 0, 1),
(3254, 58, 0, 1),
(4040, 58, 0, 1),
(3219, 58, 0, 1),
(649, 58, 0, 1),
(2598, 58, 0, 1),
(459, 58, 0, 1),
(9, 58, 0, 1),
(4041, 58, 0, 1),
(317, 58, 0, 1),
(4042, 58, 0, 1),
(181, 58, 0, 1),
(2822, 58, 0, 1),
(131, 58, 0, 1),
(1537, 58, 0, 1),
(2503, 58, 0, 1),
(1179, 58, 0, 1),
(73, 58, 0, 1),
(4043, 58, 0, 1),
(2696, 58, 0, 1),
(623, 58, 0, 1),
(2193, 58, 0, 1),
(155, 58, 0, 1),
(4044, 58, 0, 1),
(3921, 58, 0, 1),
(819, 58, 0, 1),
(150, 58, 0, 1),
(2693, 58, 0, 1),
(94, 58, 0, 1),
(2305, 58, 0, 1),
(401, 58, 0, 1),
(362, 58, 0, 1),
(4045, 58, 0, 1),
(4046, 58, 0, 1),
(4047, 58, 0, 1),
(860, 58, 0, 1),
(2196, 58, 0, 1),
(2690, 58, 0, 1),
(839, 58, 0, 1),
(3312, 58, 0, 1),
(3415, 58, 0, 1),
(2675, 58, 0, 1),
(1303, 58, 0, 1),
(2222, 58, 0, 1),
(1036, 58, 0, 1),
(3134, 58, 0, 1),
(2485, 58, 0, 1),
(1938, 58, 0, 1),
(1078, 58, 0, 1),
(4048, 58, 0, 1),
(593, 58, 0, 1),
(1283, 58, 0, 1),
(210, 58, 0, 1),
(4049, 59, 0, 0),
(4050, 59, 0, 0),
(4051, 59, 0, 0),
(2333, 59, 0, 1),
(507, 59, 0, 1),
(2545, 59, 0, 1),
(4052, 59, 0, 1),
(4053, 59, 0, 1),
(2242, 59, 0, 1),
(690, 59, 0, 1),
(45, 59, 0, 1),
(3100, 59, 0, 1),
(3417, 59, 0, 1),
(2240, 59, 0, 1),
(163, 59, 0, 1),
(2222, 59, 0, 1),
(4054, 59, 0, 1),
(4055, 59, 0, 1),
(4056, 59, 0, 1),
(9, 59, 0, 1),
(4057, 59, 0, 1),
(4058, 59, 0, 1),
(3646, 59, 0, 1),
(4059, 59, 0, 1),
(1415, 59, 0, 1),
(2799, 59, 0, 1),
(4060, 59, 0, 1),
(2518, 59, 0, 1),
(56, 59, 0, 1),
(698, 59, 0, 1),
(4061, 59, 0, 1),
(256, 59, 0, 1),
(198, 59, 0, 1),
(4062, 59, 0, 1),
(4063, 59, 0, 1),
(693, 59, 0, 1),
(1633, 59, 0, 1),
(49, 59, 0, 1),
(3555, 59, 0, 1),
(1439, 59, 0, 1),
(419, 59, 0, 1),
(4064, 59, 0, 1),
(40, 59, 0, 1),
(3864, 59, 0, 1),
(123, 59, 0, 1),
(132, 59, 0, 1),
(164, 59, 0, 1),
(1440, 59, 0, 1),
(138, 59, 0, 1),
(3344, 59, 0, 1),
(4065, 59, 0, 1),
(4066, 59, 0, 1),
(4067, 59, 0, 1),
(4068, 59, 0, 1),
(395, 59, 0, 1),
(2219, 59, 0, 1),
(2802, 59, 0, 1),
(4069, 59, 0, 1),
(553, 59, 0, 1),
(4070, 59, 0, 1),
(494, 59, 0, 1),
(3969, 59, 0, 1),
(94, 59, 0, 1),
(4071, 59, 0, 1),
(4072, 59, 0, 1),
(4073, 59, 0, 1),
(4074, 59, 0, 1),
(371, 59, 0, 1),
(3281, 59, 0, 1),
(1266, 59, 0, 1),
(452, 59, 0, 1),
(3846, 59, 0, 1),
(4075, 59, 0, 1),
(2557, 59, 0, 1),
(321, 59, 0, 1),
(227, 59, 0, 1),
(11, 59, 0, 1),
(4076, 59, 0, 1),
(2210, 59, 0, 1),
(1008, 59, 0, 1),
(255, 59, 0, 1),
(1570, 59, 0, 1),
(4077, 59, 0, 1),
(1061, 59, 0, 1),
(4078, 59, 0, 1),
(183, 59, 0, 1),
(145, 59, 0, 1),
(3427, 59, 0, 1),
(121, 59, 0, 1),
(3862, 59, 0, 1),
(4079, 59, 0, 1),
(4080, 59, 0, 1),
(795, 59, 0, 1),
(2601, 59, 0, 1),
(4081, 59, 0, 1),
(3252, 59, 0, 1),
(258, 59, 0, 1),
(399, 59, 0, 1),
(4082, 59, 0, 1),
(4083, 59, 0, 1),
(564, 59, 0, 1),
(4084, 59, 0, 1),
(4085, 59, 0, 1),
(23, 59, 0, 1),
(488, 59, 0, 1),
(199, 59, 0, 1),
(478, 59, 0, 1),
(4086, 59, 0, 1),
(832, 59, 0, 1),
(2644, 59, 0, 1),
(4087, 59, 0, 1),
(161, 59, 0, 1),
(4088, 59, 0, 1),
(4089, 59, 0, 1),
(1555, 59, 0, 1),
(4090, 59, 0, 1),
(4091, 59, 0, 1),
(3444, 59, 0, 1),
(274, 59, 0, 1),
(28, 59, 0, 1),
(150, 59, 0, 1),
(839, 59, 0, 1),
(154, 59, 0, 1),
(1190, 59, 0, 1),
(2410, 59, 0, 1),
(362, 59, 0, 1),
(4092, 59, 0, 1),
(4093, 59, 0, 1),
(3851, 59, 0, 1),
(2890, 59, 0, 1),
(151, 59, 0, 1),
(4094, 59, 0, 1),
(2974, 59, 0, 1),
(2400, 59, 0, 1),
(1825, 59, 0, 1),
(4095, 59, 0, 1),
(27, 59, 0, 1),
(1047, 59, 0, 1),
(84, 59, 0, 1),
(85, 59, 0, 1),
(391, 59, 0, 1),
(3963, 59, 0, 1),
(4096, 59, 0, 1),
(127, 59, 0, 1),
(210, 59, 0, 1),
(4097, 60, 0, 0),
(4098, 60, 0, 0),
(4099, 60, 0, 0),
(4100, 60, 0, 0),
(2333, 60, 0, 1),
(2795, 60, 0, 1),
(2222, 60, 0, 1),
(1036, 60, 0, 1),
(4101, 60, 0, 1),
(1120, 60, 0, 1),
(4102, 60, 0, 1),
(3050, 60, 0, 1),
(361, 60, 0, 1),
(148, 60, 0, 1),
(4103, 60, 0, 1),
(45, 60, 0, 1),
(4104, 60, 0, 1),
(2219, 60, 0, 1),
(1821, 60, 0, 1),
(9, 60, 0, 1),
(2828, 60, 0, 1),
(4105, 60, 0, 1),
(71, 60, 0, 1),
(4106, 60, 0, 1),
(4107, 60, 0, 1),
(713, 60, 0, 1),
(4108, 60, 0, 1),
(2641, 60, 0, 1),
(163, 60, 0, 1),
(391, 60, 0, 1),
(4109, 60, 0, 1),
(94, 60, 0, 1),
(2453, 60, 0, 1),
(4110, 60, 0, 1),
(205, 60, 0, 1),
(2599, 60, 0, 1),
(4111, 60, 0, 1),
(1109, 60, 0, 1),
(2730, 60, 0, 1),
(4112, 60, 0, 1),
(494, 60, 0, 1),
(3347, 60, 0, 1),
(4113, 60, 0, 1),
(551, 60, 0, 1),
(186, 60, 0, 1),
(4114, 60, 0, 1),
(284, 60, 0, 1),
(2853, 60, 0, 1),
(4115, 60, 0, 1),
(4116, 60, 0, 1),
(1097, 60, 0, 1),
(4117, 60, 0, 1),
(1278, 60, 0, 1),
(4118, 60, 0, 1),
(362, 60, 0, 1),
(1176, 60, 0, 1),
(3553, 60, 0, 1),
(2770, 60, 0, 1),
(4119, 60, 0, 1),
(3497, 60, 0, 1),
(56, 60, 0, 1),
(1509, 60, 0, 1),
(866, 60, 0, 1),
(4120, 60, 0, 1),
(1757, 60, 0, 1),
(2221, 60, 0, 1),
(4121, 60, 0, 1),
(2974, 60, 0, 1),
(1845, 60, 0, 1),
(1069, 60, 0, 1),
(2890, 60, 0, 1),
(3851, 60, 0, 1),
(2197, 60, 0, 1),
(30, 60, 0, 1),
(4122, 60, 0, 1),
(507, 60, 0, 1),
(2438, 60, 0, 1),
(4123, 60, 0, 1),
(693, 60, 0, 1),
(200, 60, 0, 1),
(131, 60, 0, 1),
(4124, 60, 0, 1),
(4125, 60, 0, 1),
(3574, 60, 0, 1),
(4126, 60, 0, 1),
(38, 60, 0, 1),
(4127, 60, 0, 1),
(2163, 60, 0, 1),
(4128, 60, 0, 1),
(4129, 60, 0, 1),
(210, 60, 0, 1),
(4130, 61, 0, 0),
(4131, 61, 0, 0),
(4132, 61, 0, 0),
(2333, 61, 0, 1),
(2400, 61, 0, 1),
(2222, 61, 0, 1),
(4133, 61, 0, 1),
(183, 61, 0, 1),
(795, 61, 0, 1),
(2252, 61, 0, 1),
(118, 61, 0, 1),
(3461, 61, 0, 1),
(860, 61, 0, 1),
(2379, 61, 0, 1),
(2545, 61, 0, 1),
(3324, 61, 0, 1),
(1036, 61, 0, 1),
(4063, 61, 0, 1),
(693, 61, 0, 1),
(4134, 61, 0, 1),
(3273, 61, 0, 1),
(773, 61, 0, 1),
(163, 61, 0, 1),
(123, 61, 0, 1),
(257, 61, 0, 1),
(4135, 61, 0, 1),
(921, 61, 0, 1),
(4136, 61, 0, 1),
(656, 61, 0, 1),
(4137, 61, 0, 1),
(45, 61, 0, 1),
(121, 61, 0, 1),
(4138, 61, 0, 1),
(4139, 61, 0, 1),
(71, 61, 0, 1),
(4140, 61, 0, 1),
(593, 61, 0, 1),
(4141, 61, 0, 1),
(2706, 61, 0, 1),
(255, 61, 0, 1),
(274, 61, 0, 1),
(4048, 61, 0, 1),
(4142, 61, 0, 1),
(26, 61, 0, 1),
(1503, 61, 0, 1),
(4143, 61, 0, 1),
(2784, 61, 0, 1),
(4144, 61, 0, 1),
(297, 61, 0, 1),
(41, 61, 0, 1),
(4145, 61, 0, 1),
(2204, 61, 0, 1),
(3848, 61, 0, 1),
(1570, 61, 0, 1),
(215, 61, 0, 1),
(419, 61, 0, 1),
(4088, 61, 0, 1),
(2696, 61, 0, 1),
(92, 61, 0, 1),
(4146, 61, 0, 1),
(4147, 61, 0, 1),
(4148, 61, 0, 1),
(4132, 61, 0, 1),
(237, 61, 0, 1),
(27, 61, 0, 1),
(4149, 61, 0, 1),
(3825, 61, 0, 1),
(4150, 61, 0, 1),
(4151, 61, 0, 1),
(21, 61, 0, 1),
(4152, 61, 0, 1),
(3258, 61, 0, 1),
(4153, 61, 0, 1),
(4154, 61, 0, 1),
(3846, 61, 0, 1),
(4155, 61, 0, 1),
(94, 61, 0, 1),
(1240, 61, 0, 1),
(4156, 61, 0, 1),
(1762, 61, 0, 1),
(4157, 61, 0, 1),
(4158, 61, 0, 1),
(4159, 61, 0, 1),
(165, 61, 0, 1),
(4160, 61, 0, 1),
(4161, 61, 0, 1),
(119, 61, 0, 1),
(2219, 61, 0, 1),
(3411, 61, 0, 1),
(4162, 61, 0, 1),
(4163, 61, 0, 1),
(4164, 61, 0, 1),
(3965, 61, 0, 1),
(1283, 61, 0, 1),
(256, 61, 0, 1),
(4165, 61, 0, 1),
(1179, 61, 0, 1),
(85, 61, 0, 1),
(161, 61, 0, 1),
(626, 61, 0, 1),
(4166, 61, 0, 1),
(1440, 61, 0, 1),
(60, 61, 0, 1),
(4167, 61, 0, 1),
(2518, 61, 0, 1),
(4168, 61, 0, 1),
(4060, 61, 0, 1),
(4169, 61, 0, 1),
(2974, 61, 0, 1),
(4170, 61, 0, 1),
(210, 61, 0, 1),
(4171, 62, 0, 0),
(4172, 62, 0, 0),
(4173, 62, 0, 0),
(4174, 62, 0, 0),
(4175, 62, 0, 0),
(2333, 62, 0, 1),
(4171, 62, 0, 1),
(2639, 62, 0, 1),
(1825, 62, 0, 1),
(4176, 62, 0, 1),
(1738, 62, 0, 1),
(551, 62, 0, 1),
(2501, 62, 0, 1),
(14, 62, 0, 1),
(494, 62, 0, 1),
(690, 62, 0, 1),
(205, 62, 0, 1),
(259, 62, 0, 1),
(4177, 62, 0, 1),
(517, 62, 0, 1),
(314, 62, 0, 1),
(4178, 62, 0, 1),
(3116, 62, 0, 1),
(4179, 62, 0, 1),
(45, 62, 0, 1),
(4180, 62, 0, 1),
(2219, 62, 0, 1),
(4066, 62, 0, 1),
(4181, 62, 0, 1),
(3344, 62, 0, 1),
(168, 62, 0, 1),
(4182, 62, 0, 1),
(2240, 62, 0, 1),
(1844, 62, 0, 1),
(2222, 62, 0, 1),
(2340, 62, 0, 1),
(94, 62, 0, 1),
(207, 62, 0, 1),
(4183, 62, 0, 1),
(120, 62, 0, 1),
(167, 62, 0, 1),
(9, 62, 0, 1),
(402, 62, 0, 1),
(21, 62, 0, 1),
(4032, 62, 0, 1),
(2567, 62, 0, 1),
(3252, 62, 0, 1),
(2014, 62, 0, 1),
(3093, 62, 0, 1),
(40, 62, 0, 1),
(4184, 62, 0, 1),
(676, 62, 0, 1),
(1429, 62, 0, 1),
(693, 62, 0, 1),
(874, 62, 0, 1),
(623, 62, 0, 1),
(199, 62, 0, 1),
(2693, 62, 0, 1),
(147, 62, 0, 1),
(4185, 62, 0, 1),
(2731, 62, 0, 1),
(960, 62, 0, 1),
(1185, 62, 0, 1),
(689, 62, 0, 1),
(4186, 62, 0, 1),
(4187, 62, 0, 1),
(191, 62, 0, 1),
(910, 62, 0, 1),
(2230, 62, 0, 1),
(2481, 62, 0, 1),
(866, 62, 0, 1),
(4188, 62, 0, 1),
(2606, 62, 0, 1),
(4189, 62, 0, 1),
(2640, 62, 0, 1),
(481, 62, 0, 1),
(63, 62, 0, 1),
(839, 62, 0, 1),
(4190, 62, 0, 1),
(795, 62, 0, 1),
(198, 62, 0, 1),
(2453, 62, 0, 1),
(4191, 62, 0, 1),
(921, 62, 0, 1),
(325, 62, 0, 1),
(3457, 62, 0, 1),
(4192, 62, 0, 1),
(4193, 62, 0, 1),
(593, 62, 0, 1),
(1109, 62, 0, 1),
(4103, 62, 0, 1),
(4194, 62, 0, 1),
(2466, 62, 0, 1),
(2785, 62, 0, 1),
(454, 62, 0, 1),
(3123, 62, 0, 1),
(4195, 62, 0, 1),
(4196, 62, 0, 1),
(4197, 62, 0, 1),
(4198, 62, 0, 1),
(1471, 62, 0, 1),
(4199, 62, 0, 1),
(2221, 62, 0, 1),
(4200, 62, 0, 1),
(3750, 62, 0, 1),
(4201, 62, 0, 1),
(4202, 62, 0, 1),
(437, 62, 0, 1),
(1211, 62, 0, 1),
(69, 62, 0, 1),
(4203, 62, 0, 1),
(4204, 62, 0, 1),
(4205, 62, 0, 1),
(2485, 62, 0, 1),
(1176, 62, 0, 1),
(4206, 62, 0, 1),
(274, 62, 0, 1),
(208, 62, 0, 1),
(163, 62, 0, 1),
(1541, 62, 0, 1),
(4207, 62, 0, 1),
(210, 62, 0, 1),
(4208, 63, 0, 0),
(4209, 63, 0, 0),
(4210, 63, 0, 0),
(4211, 63, 0, 0),
(2333, 63, 0, 1),
(4208, 63, 0, 1),
(3136, 63, 0, 1),
(4212, 63, 0, 1),
(4213, 63, 0, 1),
(1440, 63, 0, 1),
(2689, 63, 0, 1),
(507, 63, 0, 1),
(866, 63, 0, 1),
(3342, 63, 0, 1),
(693, 63, 0, 1),
(4214, 63, 0, 1),
(4215, 63, 0, 1),
(4216, 63, 0, 1),
(2325, 63, 0, 1),
(45, 63, 0, 1),
(362, 63, 0, 1),
(4217, 63, 0, 1),
(2219, 63, 0, 1),
(3728, 63, 0, 1),
(3029, 63, 0, 1),
(79, 63, 0, 1),
(3995, 63, 0, 1),
(255, 63, 0, 1),
(4218, 63, 0, 1),
(625, 63, 0, 1),
(197, 63, 0, 1),
(27, 63, 0, 1),
(580, 63, 0, 1),
(198, 63, 0, 1),
(2400, 63, 0, 1),
(26, 63, 0, 1),
(2410, 63, 0, 1),
(3895, 63, 0, 1),
(2295, 63, 0, 1),
(256, 63, 0, 1),
(654, 63, 0, 1),
(163, 63, 0, 1),
(981, 63, 0, 1),
(9, 63, 0, 1),
(4219, 63, 0, 1),
(64, 63, 0, 1),
(2566, 63, 0, 1),
(39, 63, 0, 1),
(4220, 63, 0, 1),
(4221, 63, 0, 1),
(4222, 63, 0, 1),
(3252, 63, 0, 1),
(4223, 63, 0, 1),
(2452, 63, 0, 1),
(94, 63, 0, 1),
(226, 63, 0, 1),
(4224, 63, 0, 1),
(4225, 63, 0, 1),
(1302, 63, 0, 1),
(2680, 63, 0, 1),
(3301, 63, 0, 1),
(69, 63, 0, 1),
(3851, 63, 0, 1),
(1463, 63, 0, 1),
(3863, 63, 0, 1),
(1061, 63, 0, 1),
(2528, 63, 0, 1),
(2242, 63, 0, 1),
(3411, 63, 0, 1),
(592, 63, 0, 1),
(2832, 63, 0, 1),
(3873, 63, 0, 1),
(4226, 63, 0, 1),
(3750, 63, 0, 1),
(361, 63, 0, 1),
(563, 63, 0, 1),
(123, 63, 0, 1),
(712, 63, 0, 1),
(4227, 63, 0, 1),
(4228, 63, 0, 1),
(10, 63, 0, 1),
(391, 63, 0, 1),
(4229, 63, 0, 1),
(2901, 63, 0, 1),
(4230, 63, 0, 1),
(4231, 63, 0, 1),
(207, 63, 0, 1),
(2270, 63, 0, 1),
(960, 63, 0, 1),
(83, 63, 0, 1),
(3677, 63, 0, 1),
(1451, 63, 0, 1),
(297, 63, 0, 1),
(2215, 63, 0, 1),
(1548, 63, 0, 1),
(4232, 63, 0, 1),
(1652, 63, 0, 1),
(4233, 63, 0, 1),
(454, 63, 0, 1),
(270, 63, 0, 1),
(1136, 63, 0, 1),
(208, 63, 0, 1),
(2669, 63, 0, 1),
(612, 63, 0, 1),
(4234, 63, 0, 1),
(4235, 63, 0, 1),
(2574, 63, 0, 1),
(3341, 63, 0, 1),
(4236, 63, 0, 1),
(3322, 63, 0, 1),
(186, 63, 0, 1),
(3033, 63, 0, 1),
(145, 63, 0, 1),
(795, 63, 0, 1),
(4237, 63, 0, 1),
(4238, 63, 0, 1),
(258, 63, 0, 1),
(4239, 63, 0, 1),
(4240, 63, 0, 1),
(413, 63, 0, 1),
(4241, 63, 0, 1),
(56, 63, 0, 1),
(4242, 63, 0, 1),
(4243, 63, 0, 1),
(1900, 63, 0, 1),
(1278, 63, 0, 1),
(4244, 63, 0, 1),
(4245, 63, 0, 1),
(181, 63, 0, 1),
(4246, 63, 0, 1),
(393, 63, 0, 1),
(4247, 63, 0, 1),
(210, 63, 0, 1),
(4248, 64, 0, 0),
(4249, 64, 0, 0),
(4250, 64, 0, 0),
(2333, 64, 0, 1),
(3248, 64, 0, 1),
(3951, 64, 0, 1),
(4251, 64, 0, 1),
(274, 64, 0, 1),
(40, 64, 0, 1),
(4252, 64, 0, 1),
(28, 64, 0, 1),
(4253, 64, 0, 1),
(4254, 64, 0, 1),
(148, 64, 0, 1),
(4255, 64, 0, 1),
(3717, 64, 0, 1),
(462, 64, 0, 1),
(1552, 64, 0, 1),
(201, 64, 0, 1),
(459, 64, 0, 1),
(623, 64, 0, 1),
(2639, 64, 0, 1),
(4256, 64, 0, 1),
(592, 64, 0, 1),
(401, 64, 0, 1),
(73, 64, 0, 1),
(3844, 64, 0, 1),
(4257, 64, 0, 1),
(800, 64, 0, 1),
(4258, 64, 0, 1),
(4259, 64, 0, 1),
(649, 64, 0, 1),
(9, 64, 0, 1),
(1106, 64, 0, 1),
(45, 64, 0, 1),
(4260, 64, 0, 1),
(693, 64, 0, 1),
(4261, 64, 0, 1),
(139, 64, 0, 1),
(517, 64, 0, 1),
(3580, 64, 0, 1),
(4262, 64, 0, 1),
(3387, 64, 0, 1),
(198, 64, 0, 1),
(221, 64, 0, 1),
(1283, 64, 0, 1),
(4263, 64, 0, 1),
(287, 64, 0, 1),
(4264, 64, 0, 1),
(163, 64, 0, 1),
(2225, 64, 0, 1),
(199, 64, 0, 1),
(183, 64, 0, 1),
(4265, 64, 0, 1),
(4266, 64, 0, 1),
(3642, 64, 0, 1),
(981, 64, 0, 1),
(400, 64, 0, 1),
(210, 64, 0, 1),
(4267, 65, 0, 0),
(4268, 65, 0, 0),
(2333, 65, 0, 1),
(2795, 65, 0, 1),
(4269, 65, 0, 1),
(4268, 65, 0, 1),
(227, 65, 0, 1),
(2864, 65, 0, 1),
(131, 65, 0, 1),
(454, 65, 0, 1),
(2292, 65, 0, 1),
(795, 65, 0, 1),
(4270, 65, 0, 1),
(1440, 65, 0, 1),
(2499, 65, 0, 1),
(1903, 65, 0, 1),
(4271, 65, 0, 1),
(582, 65, 0, 1),
(680, 65, 0, 1),
(121, 65, 0, 1),
(2305, 65, 0, 1),
(198, 65, 0, 1),
(92, 65, 0, 1),
(1659, 65, 0, 1),
(4272, 65, 0, 1),
(256, 65, 0, 1),
(408, 65, 0, 1),
(1588, 65, 0, 1),
(199, 65, 0, 1),
(94, 65, 0, 1),
(186, 65, 0, 1),
(4273, 65, 0, 1),
(45, 65, 0, 1),
(3434, 65, 0, 1),
(168, 65, 0, 1),
(3382, 65, 0, 1),
(459, 65, 0, 1),
(2206, 65, 0, 1),
(245, 65, 0, 1),
(658, 65, 0, 1),
(3252, 65, 0, 1),
(323, 65, 0, 1),
(600, 65, 0, 1),
(4274, 65, 0, 1),
(4275, 65, 0, 1),
(65, 65, 0, 1),
(39, 65, 0, 1),
(362, 65, 0, 1),
(1570, 65, 0, 1),
(73, 65, 0, 1),
(2196, 65, 0, 1),
(258, 65, 0, 1),
(4276, 65, 0, 1),
(4277, 65, 0, 1),
(4278, 65, 0, 1),
(4279, 65, 0, 1),
(874, 65, 0, 1),
(279, 65, 0, 1),
(671, 65, 0, 1),
(285, 65, 0, 1),
(401, 65, 0, 1),
(2229, 65, 0, 1),
(4280, 65, 0, 1),
(2242, 65, 0, 1),
(205, 65, 0, 1),
(395, 65, 0, 1),
(391, 65, 0, 1),
(866, 65, 0, 1),
(3482, 65, 0, 1),
(4281, 65, 0, 1),
(4282, 65, 0, 1),
(1523, 65, 0, 1),
(2219, 65, 0, 1),
(3398, 65, 0, 1),
(2410, 65, 0, 1),
(453, 65, 0, 1),
(167, 65, 0, 1),
(2636, 65, 0, 1),
(1176, 65, 0, 1),
(2221, 65, 0, 1),
(123, 65, 0, 1),
(4283, 65, 0, 1),
(2624, 65, 0, 1),
(2026, 65, 0, 1),
(4284, 65, 0, 1),
(690, 65, 0, 1),
(163, 65, 0, 1),
(2974, 65, 0, 1),
(361, 65, 0, 1),
(1129, 65, 0, 1),
(79, 65, 0, 1),
(4285, 65, 0, 1),
(636, 65, 0, 1),
(2382, 65, 0, 1),
(3271, 65, 0, 1),
(2204, 65, 0, 1),
(957, 65, 0, 1),
(4286, 65, 0, 1),
(2788, 65, 0, 1),
(210, 65, 0, 1),
(4287, 66, 0, 0),
(4288, 66, 0, 0),
(4289, 66, 0, 0),
(4290, 66, 0, 0),
(2333, 66, 0, 1),
(2795, 66, 0, 1),
(2975, 66, 0, 1),
(2222, 66, 0, 1),
(4291, 66, 0, 1),
(690, 66, 0, 1),
(121, 66, 0, 1),
(666, 66, 0, 1),
(269, 66, 0, 1),
(4292, 66, 0, 1),
(45, 66, 0, 1),
(205, 66, 0, 1),
(1821, 66, 0, 1),
(27, 66, 0, 1),
(4293, 66, 0, 1),
(3273, 66, 0, 1),
(773, 66, 0, 1),
(163, 66, 0, 1),
(2784, 66, 0, 1),
(4144, 66, 0, 1),
(123, 66, 0, 1),
(3871, 66, 0, 1),
(160, 66, 0, 1),
(3706, 66, 0, 1),
(4294, 66, 0, 1),
(1684, 66, 0, 1),
(421, 66, 0, 1),
(4295, 66, 0, 1),
(4296, 66, 0, 1),
(4297, 66, 0, 1),
(79, 66, 0, 1),
(4298, 66, 0, 1),
(4299, 66, 0, 1),
(1566, 66, 0, 1),
(9, 66, 0, 1),
(4300, 66, 0, 1),
(3344, 66, 0, 1),
(4301, 66, 0, 1),
(4302, 66, 0, 1),
(4303, 66, 0, 1),
(4304, 66, 0, 1),
(2242, 66, 0, 1),
(147, 66, 0, 1),
(3153, 66, 0, 1),
(4305, 66, 0, 1),
(268, 66, 0, 1),
(2706, 66, 0, 1),
(4306, 66, 0, 1),
(4307, 66, 0, 1),
(4145, 66, 0, 1),
(4308, 66, 0, 1),
(2799, 66, 0, 1),
(1097, 66, 0, 1),
(2374, 66, 0, 1),
(3995, 66, 0, 1),
(1900, 66, 0, 1),
(1225, 66, 0, 1),
(2685, 66, 0, 1),
(4309, 66, 0, 1),
(215, 66, 0, 1),
(2219, 66, 0, 1),
(167, 66, 0, 1),
(325, 66, 0, 1),
(2393, 66, 0, 1),
(165, 66, 0, 1),
(2974, 66, 0, 1),
(4310, 66, 0, 1),
(2217, 66, 0, 1),
(4087, 66, 0, 1),
(224, 66, 0, 1),
(693, 66, 0, 1),
(4311, 66, 0, 1),
(3963, 66, 0, 1),
(1170, 66, 0, 1),
(4072, 66, 0, 1),
(795, 66, 0, 1),
(643, 66, 0, 1),
(819, 66, 0, 1),
(3426, 66, 0, 1),
(94, 66, 0, 1),
(649, 66, 0, 1),
(2948, 66, 0, 1),
(942, 66, 0, 1),
(3851, 66, 0, 1),
(127, 66, 0, 1),
(4312, 66, 0, 1),
(4313, 66, 0, 1),
(517, 66, 0, 1),
(139, 66, 0, 1),
(40, 66, 0, 1),
(4048, 66, 0, 1),
(2206, 66, 0, 1),
(4314, 66, 0, 1),
(3240, 66, 0, 1),
(478, 66, 0, 1),
(263, 66, 0, 1),
(4093, 66, 0, 1),
(4315, 66, 0, 1),
(68, 66, 0, 1),
(1109, 66, 0, 1),
(3979, 66, 0, 1),
(297, 66, 0, 1),
(4316, 66, 0, 1),
(3302, 66, 0, 1),
(1212, 66, 0, 1),
(4317, 66, 0, 1),
(4318, 66, 0, 1),
(3541, 66, 0, 1),
(73, 66, 0, 1),
(3921, 66, 0, 1),
(30, 66, 0, 1),
(553, 66, 0, 1),
(72, 66, 0, 1),
(3050, 66, 0, 1),
(1036, 66, 0, 1),
(4319, 66, 0, 1),
(3864, 66, 0, 1),
(3347, 66, 0, 1),
(4320, 66, 0, 1),
(4033, 66, 0, 1),
(2014, 66, 0, 1),
(1078, 66, 0, 1),
(2850, 66, 0, 1),
(2598, 66, 0, 1),
(362, 66, 0, 1),
(4321, 66, 0, 1),
(3123, 66, 0, 1),
(145, 66, 0, 1),
(19, 66, 0, 1),
(4322, 66, 0, 1),
(1176, 66, 0, 1),
(1653, 66, 0, 1),
(2696, 66, 0, 1),
(227, 66, 0, 1),
(1574, 66, 0, 1),
(4323, 66, 0, 1),
(210, 66, 0, 1),
(4324, 67, 0, 0),
(4325, 67, 0, 0),
(4326, 67, 0, 0),
(2333, 67, 0, 1),
(2795, 67, 0, 1),
(1738, 67, 0, 1),
(4327, 67, 0, 1),
(73, 67, 0, 1),
(2163, 67, 0, 1),
(4328, 67, 0, 1),
(4329, 67, 0, 1),
(690, 67, 0, 1),
(3123, 67, 0, 1),
(3229, 67, 0, 1),
(2598, 67, 0, 1),
(4330, 67, 0, 1),
(4331, 67, 0, 1),
(1310, 67, 0, 1),
(4332, 67, 0, 1),
(2219, 67, 0, 1),
(3252, 67, 0, 1),
(4333, 67, 0, 1),
(127, 67, 0, 1),
(2938, 67, 0, 1),
(1190, 67, 0, 1),
(693, 67, 0, 1),
(150, 67, 0, 1),
(973, 67, 0, 1),
(183, 67, 0, 1),
(2270, 67, 0, 1),
(362, 67, 0, 1),
(4334, 67, 0, 1),
(145, 67, 0, 1),
(4260, 67, 0, 1),
(163, 67, 0, 1),
(2639, 67, 0, 1),
(2640, 67, 0, 1),
(795, 67, 0, 1),
(4335, 67, 0, 1),
(2245, 67, 0, 1),
(4336, 67, 0, 1),
(4337, 67, 0, 1),
(4338, 67, 0, 1),
(839, 67, 0, 1),
(4339, 67, 0, 1),
(230, 67, 0, 1),
(2412, 67, 0, 1),
(4340, 67, 0, 1),
(507, 67, 0, 1),
(4056, 67, 0, 1),
(413, 67, 0, 1),
(4341, 67, 0, 1),
(4342, 67, 0, 1),
(589, 67, 0, 1),
(1266, 67, 0, 1),
(94, 67, 0, 1),
(2810, 67, 0, 1),
(2256, 67, 0, 1),
(4343, 67, 0, 1),
(4344, 67, 0, 1),
(92, 67, 0, 1),
(1192, 67, 0, 1),
(4345, 67, 0, 1),
(2457, 67, 0, 1),
(2400, 67, 0, 1),
(4346, 67, 0, 1),
(3890, 67, 0, 1),
(32, 67, 0, 1),
(800, 67, 0, 1),
(19, 67, 0, 1),
(232, 67, 0, 1),
(4347, 67, 0, 1),
(1436, 67, 0, 1),
(2283, 67, 0, 1),
(4348, 67, 0, 1),
(593, 67, 0, 1),
(2291, 67, 0, 1),
(1471, 67, 0, 1),
(4349, 67, 0, 1),
(4350, 67, 0, 1),
(4177, 67, 0, 1),
(4351, 67, 0, 1),
(4352, 67, 0, 1),
(167, 67, 0, 1),
(4353, 67, 0, 1),
(4354, 67, 0, 1),
(649, 67, 0, 1),
(4355, 67, 0, 1),
(2823, 67, 0, 1),
(4356, 67, 0, 1),
(2693, 67, 0, 1),
(45, 67, 0, 1),
(4357, 67, 0, 1),
(4358, 67, 0, 1),
(4359, 67, 0, 1),
(2479, 67, 0, 1),
(4360, 67, 0, 1),
(79, 67, 0, 1),
(2218, 67, 0, 1),
(4361, 67, 0, 1),
(4362, 67, 0, 1),
(9, 67, 0, 1),
(4363, 67, 0, 1),
(4364, 67, 0, 1),
(643, 67, 0, 1),
(1278, 67, 0, 1),
(4365, 67, 0, 1),
(1066, 67, 0, 1),
(4366, 67, 0, 1),
(4367, 67, 0, 1),
(658, 67, 0, 1),
(196, 67, 0, 1),
(3148, 67, 0, 1),
(2319, 67, 0, 1),
(4368, 67, 0, 1),
(4369, 67, 0, 1),
(456, 67, 0, 1),
(4370, 67, 0, 1),
(4371, 67, 0, 1),
(78, 67, 0, 1),
(26, 67, 0, 1),
(819, 67, 0, 1),
(4372, 67, 0, 1),
(2360, 67, 0, 1),
(369, 67, 0, 1),
(4373, 67, 0, 1),
(538, 67, 0, 1),
(3717, 67, 0, 1),
(4374, 67, 0, 1),
(4375, 67, 0, 1),
(1930, 67, 0, 1),
(3864, 67, 0, 1),
(2845, 67, 0, 1),
(4376, 67, 0, 1),
(3917, 67, 0, 1),
(4377, 67, 0, 1),
(4378, 67, 0, 1),
(3846, 67, 0, 1),
(4379, 67, 0, 1),
(4380, 67, 0, 1),
(2488, 67, 0, 1),
(4077, 67, 0, 1),
(200, 67, 0, 1),
(3954, 67, 0, 1),
(494, 67, 0, 1),
(2633, 67, 0, 1),
(270, 67, 0, 1),
(4381, 67, 0, 1),
(3448, 67, 0, 1),
(210, 67, 0, 1),
(4382, 68, 0, 0),
(4383, 68, 0, 0),
(2333, 68, 0, 1),
(3864, 68, 0, 1),
(4384, 68, 0, 1),
(2845, 68, 0, 1),
(1368, 68, 0, 1),
(4103, 68, 0, 1),
(45, 68, 0, 1),
(362, 68, 0, 1),
(79, 68, 0, 1),
(4385, 68, 0, 1),
(2505, 68, 0, 1),
(966, 68, 0, 1),
(123, 68, 0, 1),
(973, 68, 0, 1),
(73, 68, 0, 1),
(9, 68, 0, 1),
(4386, 68, 0, 1),
(3142, 68, 0, 1),
(2219, 68, 0, 1),
(2598, 68, 0, 1),
(4387, 68, 0, 1),
(693, 68, 0, 1),
(4388, 68, 0, 1),
(690, 68, 0, 1),
(27, 68, 0, 1),
(4389, 68, 0, 1),
(192, 68, 0, 1),
(4390, 68, 0, 1),
(649, 68, 0, 1),
(1677, 68, 0, 1),
(623, 68, 0, 1),
(4391, 68, 0, 1),
(1439, 68, 0, 1),
(2270, 68, 0, 1),
(454, 68, 0, 1),
(4392, 68, 0, 1),
(1687, 68, 0, 1),
(4393, 68, 0, 1),
(2533, 68, 0, 1),
(1190, 68, 0, 1),
(2624, 68, 0, 1),
(210, 68, 0, 1),
(4394, 69, 0, 0),
(4395, 69, 0, 0),
(4396, 69, 0, 1),
(4397, 69, 0, 1),
(391, 69, 0, 1),
(2173, 69, 0, 1),
(45, 69, 0, 1),
(4398, 69, 0, 1),
(22, 69, 0, 1),
(4399, 69, 0, 1),
(1120, 69, 0, 1),
(4400, 69, 0, 1),
(3387, 69, 0, 1),
(4401, 69, 0, 1),
(3975, 69, 0, 1),
(2114, 69, 0, 1),
(4402, 69, 0, 1),
(71, 69, 0, 1),
(4403, 69, 0, 1),
(4404, 69, 0, 1),
(118, 69, 0, 1),
(41, 69, 0, 1),
(161, 69, 0, 1),
(2449, 69, 0, 1),
(362, 69, 0, 1),
(4405, 69, 0, 1),
(163, 69, 0, 1),
(3248, 69, 0, 1),
(395, 69, 0, 1),
(2400, 69, 0, 1),
(4406, 69, 0, 1),
(131, 69, 0, 1),
(4407, 69, 0, 1),
(4408, 69, 0, 1);
INSERT INTO `search_keywords` (`keyword`, `foreign_ID`, `table_name`, `position`) VALUES
(4409, 69, 0, 1),
(1036, 69, 0, 1),
(2256, 69, 0, 1),
(4410, 69, 0, 1),
(1947, 69, 0, 1),
(1847, 69, 0, 1),
(147, 69, 0, 1),
(4411, 69, 0, 1),
(1048, 69, 0, 1),
(4412, 69, 0, 1),
(4413, 69, 0, 1),
(4414, 69, 0, 1),
(4415, 69, 0, 1),
(1440, 69, 0, 1),
(2499, 69, 0, 1),
(500, 69, 0, 1),
(839, 69, 0, 1),
(4416, 69, 0, 1),
(4417, 69, 0, 1),
(2305, 69, 0, 1),
(175, 69, 0, 1),
(92, 69, 0, 1),
(39, 69, 0, 1),
(462, 69, 0, 1),
(4418, 69, 0, 1),
(4419, 69, 0, 1),
(27, 69, 0, 1),
(297, 69, 0, 1),
(2606, 69, 0, 1),
(1355, 69, 0, 1),
(621, 69, 0, 1),
(4420, 69, 0, 1),
(4421, 69, 0, 1),
(30, 69, 0, 1),
(4422, 69, 0, 1),
(224, 69, 0, 1),
(4423, 69, 0, 1),
(4424, 69, 0, 1),
(4425, 69, 0, 1),
(3032, 69, 0, 1),
(4426, 69, 0, 1),
(2940, 69, 0, 1),
(4427, 69, 0, 1),
(2360, 69, 0, 1),
(165, 69, 0, 1),
(866, 69, 0, 1),
(4428, 69, 0, 1),
(4429, 69, 0, 1),
(4430, 69, 0, 1),
(4431, 69, 0, 1),
(4432, 69, 0, 1),
(4433, 69, 0, 1),
(23, 69, 0, 1),
(1022, 69, 0, 1),
(4434, 69, 0, 1),
(120, 69, 0, 1),
(3972, 69, 0, 1),
(4435, 69, 0, 1),
(1616, 69, 0, 1),
(4436, 69, 0, 1),
(4437, 69, 0, 1),
(4438, 69, 0, 1),
(658, 69, 0, 1),
(4439, 69, 0, 1),
(4440, 69, 0, 1),
(2750, 69, 0, 1),
(593, 69, 0, 1),
(4441, 69, 0, 1),
(2345, 69, 0, 1),
(4442, 69, 0, 1),
(90, 69, 0, 1),
(217, 69, 0, 1),
(2818, 69, 0, 1),
(3832, 69, 0, 1),
(4443, 69, 0, 1),
(4444, 69, 0, 1),
(654, 69, 0, 1),
(4445, 69, 0, 1),
(1299, 69, 0, 1),
(494, 69, 0, 1),
(3148, 69, 0, 1),
(2340, 69, 0, 1),
(4446, 69, 0, 1),
(4447, 69, 0, 1),
(4448, 69, 0, 1),
(4449, 69, 0, 1),
(1099, 69, 0, 1),
(1594, 69, 0, 1),
(4450, 69, 0, 1),
(599, 69, 0, 1),
(1105, 69, 0, 1),
(1215, 69, 0, 1),
(4451, 69, 0, 1),
(56, 69, 0, 1),
(401, 69, 0, 1),
(4012, 69, 0, 1),
(4452, 69, 0, 1),
(1541, 69, 0, 1),
(4453, 69, 0, 1),
(4454, 69, 0, 1),
(2660, 69, 0, 1),
(4455, 69, 0, 1),
(4456, 69, 0, 1),
(1282, 69, 0, 1),
(2680, 69, 0, 1),
(32, 69, 0, 1),
(1429, 69, 0, 1),
(4457, 69, 0, 1),
(2483, 69, 0, 1),
(454, 69, 0, 1),
(4458, 69, 0, 1),
(622, 69, 0, 1),
(210, 69, 0, 1),
(4459, 70, 0, 0),
(4460, 70, 0, 0),
(2198, 70, 0, 1),
(4461, 70, 0, 1),
(4462, 70, 0, 1),
(9, 70, 0, 1),
(2462, 70, 0, 1),
(1165, 70, 0, 1),
(39, 70, 0, 1),
(1078, 70, 0, 1),
(2221, 70, 0, 1),
(2485, 70, 0, 1),
(45, 70, 0, 1),
(4178, 70, 0, 1),
(4463, 70, 0, 1),
(1697, 70, 0, 1),
(4464, 70, 0, 1),
(227, 70, 0, 1),
(874, 70, 0, 1),
(4465, 70, 0, 1),
(73, 70, 0, 1),
(2574, 70, 0, 1),
(1176, 70, 0, 1),
(4466, 70, 0, 1),
(866, 70, 0, 1),
(713, 70, 0, 1),
(2193, 70, 0, 1),
(4467, 70, 0, 1),
(2708, 70, 0, 1),
(1442, 70, 0, 1),
(1099, 70, 0, 1),
(2219, 70, 0, 1),
(2225, 70, 0, 1),
(1459, 70, 0, 1),
(4468, 70, 0, 1),
(4469, 70, 0, 1),
(1714, 70, 0, 1),
(2196, 70, 0, 1),
(2240, 70, 0, 1),
(819, 70, 0, 1),
(4470, 70, 0, 1),
(226, 70, 0, 1),
(1290, 70, 0, 1),
(4471, 70, 0, 1),
(795, 70, 0, 1),
(174, 70, 0, 1),
(3895, 70, 0, 1),
(663, 70, 0, 1),
(4472, 70, 0, 1),
(4473, 70, 0, 1),
(4474, 70, 0, 1),
(4475, 70, 0, 1),
(56, 70, 0, 1),
(44, 70, 0, 1),
(4476, 70, 0, 1),
(4477, 70, 0, 1),
(210, 70, 0, 1),
(4478, 71, 0, 0),
(4479, 71, 0, 0),
(2333, 71, 0, 1),
(2196, 71, 0, 1),
(4480, 71, 0, 1),
(2690, 71, 0, 1),
(1710, 71, 0, 1),
(4481, 71, 0, 1),
(453, 71, 0, 1),
(4482, 71, 0, 1),
(118, 71, 0, 1),
(4483, 71, 0, 1),
(362, 71, 0, 1),
(623, 71, 0, 1),
(4484, 71, 0, 1),
(454, 71, 0, 1),
(286, 71, 0, 1),
(874, 71, 0, 1),
(9, 71, 0, 1),
(4485, 71, 0, 1),
(2215, 71, 0, 1),
(4486, 71, 0, 1),
(2633, 71, 0, 1),
(4487, 71, 0, 1),
(4488, 71, 0, 1),
(221, 71, 0, 1),
(156, 71, 0, 1),
(4489, 71, 0, 1),
(2193, 71, 0, 1),
(1900, 71, 0, 1),
(1225, 71, 0, 1),
(4490, 71, 0, 1),
(1165, 71, 0, 1),
(2696, 71, 0, 1),
(4491, 71, 0, 1),
(4492, 71, 0, 1),
(321, 71, 0, 1),
(192, 71, 0, 1),
(1817, 71, 0, 1),
(45, 71, 0, 1),
(226, 71, 0, 1),
(1303, 71, 0, 1),
(408, 71, 0, 1),
(1099, 71, 0, 1),
(2900, 71, 0, 1),
(592, 71, 0, 1),
(690, 71, 0, 1),
(255, 71, 0, 1),
(361, 71, 0, 1),
(4493, 71, 0, 1),
(2222, 71, 0, 1),
(2795, 71, 0, 1),
(21, 71, 0, 1),
(335, 71, 0, 1),
(866, 71, 0, 1),
(3009, 71, 0, 1),
(4494, 71, 0, 1),
(2270, 71, 0, 1),
(199, 71, 0, 1),
(1224, 71, 0, 1),
(4495, 71, 0, 1),
(535, 71, 0, 1),
(631, 71, 0, 1),
(2155, 71, 0, 1),
(258, 71, 0, 1),
(4496, 71, 0, 1),
(12, 71, 0, 1),
(693, 71, 0, 1),
(4497, 71, 0, 1),
(3008, 71, 0, 1),
(2485, 71, 0, 1),
(73, 71, 0, 1),
(227, 71, 0, 1),
(4257, 71, 0, 1),
(2913, 71, 0, 1),
(2219, 71, 0, 1),
(2693, 71, 0, 1),
(4409, 71, 0, 1),
(944, 71, 0, 1),
(2321, 71, 0, 1),
(121, 71, 0, 1),
(4498, 71, 0, 1),
(323, 71, 0, 1),
(2479, 71, 0, 1),
(2547, 71, 0, 1),
(491, 71, 0, 1),
(4499, 71, 0, 1),
(163, 71, 0, 1),
(11, 71, 0, 1),
(3095, 71, 0, 1),
(3497, 71, 0, 1),
(4500, 71, 0, 1),
(2226, 71, 0, 1),
(1096, 71, 0, 1),
(256, 71, 0, 1),
(654, 71, 0, 1),
(4501, 71, 0, 1),
(196, 71, 0, 1),
(4502, 71, 0, 1),
(71, 71, 0, 1),
(4503, 71, 0, 1),
(4504, 71, 0, 1),
(4505, 71, 0, 1),
(4144, 71, 0, 1),
(167, 71, 0, 1),
(207, 71, 0, 1),
(795, 71, 0, 1),
(4506, 71, 0, 1),
(131, 71, 0, 1),
(4507, 71, 0, 1),
(680, 71, 0, 1),
(4508, 71, 0, 1),
(3951, 71, 0, 1),
(487, 71, 0, 1),
(999, 71, 0, 1),
(2374, 71, 0, 1),
(4509, 71, 0, 1),
(3415, 71, 0, 1),
(200, 71, 0, 1),
(497, 71, 0, 1),
(1093, 71, 0, 1),
(4510, 71, 0, 1),
(4511, 71, 0, 1),
(3387, 71, 0, 1),
(210, 71, 0, 1),
(4512, 72, 0, 0),
(4513, 72, 0, 0),
(2333, 72, 0, 1),
(2196, 72, 0, 1),
(4480, 72, 0, 1),
(2690, 72, 0, 1),
(1710, 72, 0, 1),
(4481, 72, 0, 1),
(453, 72, 0, 1),
(4482, 72, 0, 1),
(118, 72, 0, 1),
(4483, 72, 0, 1),
(362, 72, 0, 1),
(623, 72, 0, 1),
(4484, 72, 0, 1),
(454, 72, 0, 1),
(286, 72, 0, 1),
(874, 72, 0, 1),
(9, 72, 0, 1),
(4485, 72, 0, 1),
(2215, 72, 0, 1),
(4486, 72, 0, 1),
(2633, 72, 0, 1),
(4487, 72, 0, 1),
(4488, 72, 0, 1),
(221, 72, 0, 1),
(156, 72, 0, 1),
(4489, 72, 0, 1),
(2193, 72, 0, 1),
(1900, 72, 0, 1),
(1225, 72, 0, 1),
(4490, 72, 0, 1),
(1165, 72, 0, 1),
(2696, 72, 0, 1),
(4491, 72, 0, 1),
(4492, 72, 0, 1),
(321, 72, 0, 1),
(192, 72, 0, 1),
(1817, 72, 0, 1),
(45, 72, 0, 1),
(226, 72, 0, 1),
(1303, 72, 0, 1),
(408, 72, 0, 1),
(1099, 72, 0, 1),
(2900, 72, 0, 1),
(592, 72, 0, 1),
(690, 72, 0, 1),
(255, 72, 0, 1),
(361, 72, 0, 1),
(4493, 72, 0, 1),
(2222, 72, 0, 1),
(2795, 72, 0, 1),
(21, 72, 0, 1),
(335, 72, 0, 1),
(866, 72, 0, 1),
(3009, 72, 0, 1),
(4494, 72, 0, 1),
(2270, 72, 0, 1),
(199, 72, 0, 1),
(1224, 72, 0, 1),
(4495, 72, 0, 1),
(535, 72, 0, 1),
(631, 72, 0, 1),
(2155, 72, 0, 1),
(258, 72, 0, 1),
(4496, 72, 0, 1),
(12, 72, 0, 1),
(693, 72, 0, 1),
(4497, 72, 0, 1),
(3008, 72, 0, 1),
(2485, 72, 0, 1),
(73, 72, 0, 1),
(227, 72, 0, 1),
(4257, 72, 0, 1),
(2913, 72, 0, 1),
(2219, 72, 0, 1),
(2693, 72, 0, 1),
(4409, 72, 0, 1),
(944, 72, 0, 1),
(2321, 72, 0, 1),
(121, 72, 0, 1),
(4498, 72, 0, 1),
(323, 72, 0, 1),
(2479, 72, 0, 1),
(2547, 72, 0, 1),
(491, 72, 0, 1),
(4499, 72, 0, 1),
(163, 72, 0, 1),
(11, 72, 0, 1),
(3095, 72, 0, 1),
(3497, 72, 0, 1),
(4500, 72, 0, 1),
(2226, 72, 0, 1),
(1096, 72, 0, 1),
(256, 72, 0, 1),
(654, 72, 0, 1),
(4501, 72, 0, 1),
(196, 72, 0, 1),
(4502, 72, 0, 1),
(71, 72, 0, 1),
(4503, 72, 0, 1),
(4504, 72, 0, 1),
(4505, 72, 0, 1),
(4144, 72, 0, 1),
(167, 72, 0, 1),
(207, 72, 0, 1),
(795, 72, 0, 1),
(4506, 72, 0, 1),
(131, 72, 0, 1),
(4507, 72, 0, 1),
(680, 72, 0, 1),
(4508, 72, 0, 1),
(3951, 72, 0, 1),
(487, 72, 0, 1),
(999, 72, 0, 1),
(2374, 72, 0, 1),
(4509, 72, 0, 1),
(3415, 72, 0, 1),
(200, 72, 0, 1),
(497, 72, 0, 1),
(1093, 72, 0, 1),
(4510, 72, 0, 1),
(4511, 72, 0, 1),
(3387, 72, 0, 1),
(210, 72, 0, 1),
(4514, 73, 0, 0),
(4515, 73, 0, 0),
(4516, 73, 0, 0),
(2333, 73, 0, 1),
(3374, 73, 0, 1),
(2502, 73, 0, 1),
(4517, 73, 0, 1),
(408, 73, 0, 1),
(693, 73, 0, 1),
(2624, 73, 0, 1),
(240, 73, 0, 1),
(2754, 73, 0, 1),
(175, 73, 0, 1),
(4518, 73, 0, 1),
(258, 73, 0, 1),
(4519, 73, 0, 1),
(121, 73, 0, 1),
(601, 73, 0, 1),
(198, 73, 0, 1),
(3552, 73, 0, 1),
(199, 73, 0, 1),
(2204, 73, 0, 1),
(221, 73, 0, 1),
(4520, 73, 0, 1),
(9, 73, 0, 1),
(1365, 73, 0, 1),
(45, 73, 0, 1),
(227, 73, 0, 1),
(552, 73, 0, 1),
(2221, 73, 0, 1),
(4521, 73, 0, 1),
(4077, 73, 0, 1),
(2240, 73, 0, 1),
(4522, 73, 0, 1),
(4523, 73, 0, 1),
(60, 73, 0, 1),
(4524, 73, 0, 1),
(123, 73, 0, 1),
(4525, 73, 0, 1),
(1825, 73, 0, 1),
(1519, 73, 0, 1),
(4526, 73, 0, 1),
(2832, 73, 0, 1),
(4527, 73, 0, 1),
(3170, 73, 0, 1),
(4528, 73, 0, 1),
(2604, 73, 0, 1),
(690, 73, 0, 1),
(22, 73, 0, 1),
(567, 73, 0, 1),
(4529, 73, 0, 1),
(4530, 73, 0, 1),
(454, 73, 0, 1),
(94, 73, 0, 1),
(3247, 73, 0, 1),
(74, 73, 0, 1),
(4531, 73, 0, 1),
(2569, 73, 0, 1),
(4177, 73, 0, 1),
(4532, 73, 0, 1),
(3739, 73, 0, 1),
(266, 73, 0, 1),
(296, 73, 0, 1),
(4533, 73, 0, 1),
(4534, 73, 0, 1),
(388, 73, 0, 1),
(1531, 73, 0, 1),
(4535, 73, 0, 1),
(4536, 73, 0, 1),
(3269, 73, 0, 1),
(3445, 73, 0, 1),
(2889, 73, 0, 1),
(226, 73, 0, 1),
(4537, 73, 0, 1),
(644, 73, 0, 1),
(209, 73, 0, 1),
(174, 73, 0, 1),
(362, 73, 0, 1),
(79, 73, 0, 1),
(623, 73, 0, 1),
(3963, 73, 0, 1),
(2547, 73, 0, 1),
(4538, 73, 0, 1),
(3108, 73, 0, 1),
(2270, 73, 0, 1),
(3448, 73, 0, 1),
(195, 73, 0, 1),
(525, 73, 0, 1),
(4539, 73, 0, 1),
(4540, 73, 0, 1),
(4541, 73, 0, 1),
(4542, 73, 0, 1),
(765, 73, 0, 1),
(4543, 73, 0, 1),
(4544, 73, 0, 1),
(4545, 73, 0, 1),
(2558, 73, 0, 1),
(268, 73, 0, 1),
(4546, 73, 0, 1),
(773, 73, 0, 1),
(163, 73, 0, 1),
(1588, 73, 0, 1),
(145, 73, 0, 1),
(500, 73, 0, 1),
(4547, 73, 0, 1),
(4548, 73, 0, 1),
(462, 73, 0, 1),
(83, 73, 0, 1),
(161, 73, 0, 1),
(4549, 73, 0, 1),
(2258, 73, 0, 1),
(564, 73, 0, 1),
(3677, 73, 0, 1),
(2210, 73, 0, 1),
(713, 73, 0, 1),
(265, 73, 0, 1),
(874, 73, 0, 1),
(4550, 73, 0, 1),
(168, 73, 0, 1),
(4551, 73, 0, 1),
(3032, 73, 0, 1),
(4552, 73, 0, 1),
(688, 73, 0, 1),
(4553, 73, 0, 1),
(1027, 73, 0, 1),
(2295, 73, 0, 1),
(4554, 73, 0, 1),
(4555, 73, 0, 1),
(4556, 73, 0, 1),
(65, 73, 0, 1),
(1179, 73, 0, 1),
(3833, 73, 0, 1),
(205, 73, 0, 1),
(4557, 73, 0, 1),
(2773, 73, 0, 1),
(2448, 73, 0, 1),
(478, 73, 0, 1),
(4558, 73, 0, 1),
(4559, 73, 0, 1),
(4560, 73, 0, 1),
(788, 73, 0, 1),
(3308, 73, 0, 1),
(3472, 73, 0, 1),
(4561, 73, 0, 1),
(297, 73, 0, 1),
(2293, 73, 0, 1),
(4562, 73, 0, 1),
(4563, 73, 0, 1),
(40, 73, 0, 1),
(4564, 73, 0, 1),
(3252, 73, 0, 1),
(4565, 73, 0, 1),
(4566, 73, 0, 1),
(4567, 73, 0, 1),
(4568, 73, 0, 1),
(285, 73, 0, 1),
(49, 73, 0, 1),
(1069, 73, 0, 1),
(2698, 73, 0, 1),
(3675, 73, 0, 1),
(1048, 73, 0, 1),
(3682, 73, 0, 1),
(4569, 73, 0, 1),
(2680, 73, 0, 1),
(4570, 73, 0, 1),
(4571, 73, 0, 1),
(1904, 73, 0, 1),
(10, 73, 0, 1),
(4572, 73, 0, 1),
(582, 73, 0, 1),
(2559, 73, 0, 1),
(4573, 73, 0, 1),
(4574, 73, 0, 1),
(1036, 73, 0, 1),
(1628, 73, 0, 1),
(491, 73, 0, 1),
(4575, 73, 0, 1),
(4576, 73, 0, 1),
(4577, 73, 0, 1),
(2516, 73, 0, 1),
(1266, 73, 0, 1),
(2614, 73, 0, 1),
(467, 73, 0, 1),
(4578, 73, 0, 1),
(866, 73, 0, 1),
(399, 73, 0, 1),
(4579, 73, 0, 1),
(4580, 73, 0, 1),
(2075, 73, 0, 1),
(2928, 73, 0, 1),
(2504, 73, 0, 1),
(2744, 73, 0, 1),
(1659, 73, 0, 1),
(140, 73, 0, 1),
(4581, 73, 0, 1),
(210, 73, 0, 1),
(4582, 74, 0, 0),
(4583, 74, 0, 0),
(2333, 74, 0, 1),
(3977, 74, 0, 1),
(4584, 74, 0, 1),
(2845, 74, 0, 1),
(21, 74, 0, 1),
(1021, 74, 0, 1),
(45, 74, 0, 1),
(3979, 74, 0, 1),
(30, 74, 0, 1),
(4585, 74, 0, 1),
(84, 74, 0, 1),
(4586, 74, 0, 1),
(4343, 74, 0, 1),
(1032, 74, 0, 1),
(1036, 74, 0, 1),
(205, 74, 0, 1),
(1283, 74, 0, 1),
(3347, 74, 0, 1),
(3674, 74, 0, 1),
(391, 74, 0, 1),
(226, 74, 0, 1),
(3682, 74, 0, 1),
(1570, 74, 0, 1),
(411, 74, 0, 1),
(9, 74, 0, 1),
(4587, 74, 0, 1),
(1695, 74, 0, 1),
(4588, 74, 0, 1),
(4589, 74, 0, 1),
(3884, 74, 0, 1),
(27, 74, 0, 1),
(1509, 74, 0, 1),
(551, 74, 0, 1),
(4590, 74, 0, 1),
(4591, 74, 0, 1),
(192, 74, 0, 1),
(69, 74, 0, 1),
(884, 74, 0, 1),
(671, 74, 0, 1),
(346, 74, 0, 1),
(335, 74, 0, 1),
(3123, 74, 0, 1),
(693, 74, 0, 1),
(1039, 74, 0, 1),
(1170, 74, 0, 1),
(690, 74, 0, 1),
(39, 74, 0, 1),
(121, 74, 0, 1),
(2369, 74, 0, 1),
(4592, 74, 0, 1),
(494, 74, 0, 1),
(293, 74, 0, 1),
(2577, 74, 0, 1),
(2953, 74, 0, 1),
(4593, 74, 0, 1),
(4594, 74, 0, 1),
(2597, 74, 0, 1),
(4595, 74, 0, 1),
(4596, 74, 0, 1),
(4597, 74, 0, 1),
(4598, 74, 0, 1),
(563, 74, 0, 1),
(666, 74, 0, 1),
(123, 74, 0, 1),
(2305, 74, 0, 1),
(4599, 74, 0, 1),
(3012, 74, 0, 1),
(4600, 74, 0, 1),
(109, 74, 0, 1),
(2802, 74, 0, 1),
(272, 74, 0, 1),
(4601, 74, 0, 1),
(221, 74, 0, 1),
(227, 74, 0, 1),
(2204, 74, 0, 1),
(139, 74, 0, 1),
(4602, 74, 0, 1),
(4603, 74, 0, 1),
(4604, 74, 0, 1),
(4605, 74, 0, 1),
(4606, 74, 0, 1),
(4607, 74, 0, 1),
(297, 74, 0, 1),
(285, 74, 0, 1),
(165, 74, 0, 1),
(601, 74, 0, 1),
(4608, 74, 0, 1),
(4609, 74, 0, 1),
(658, 74, 0, 1),
(454, 74, 0, 1),
(643, 74, 0, 1),
(505, 74, 0, 1),
(2604, 74, 0, 1),
(163, 74, 0, 1),
(4610, 74, 0, 1),
(2026, 74, 0, 1),
(4611, 74, 0, 1),
(4612, 74, 0, 1),
(4613, 74, 0, 1),
(4614, 74, 0, 1),
(460, 74, 0, 1),
(4615, 74, 0, 1),
(2219, 74, 0, 1),
(4616, 74, 0, 1),
(56, 74, 0, 1),
(2561, 74, 0, 1),
(2651, 74, 0, 1),
(459, 74, 0, 1),
(4617, 74, 0, 1),
(2390, 74, 0, 1),
(2576, 74, 0, 1),
(4618, 74, 0, 1),
(726, 74, 0, 1),
(2581, 74, 0, 1),
(1022, 74, 0, 1),
(4619, 74, 0, 1),
(4620, 74, 0, 1),
(664, 74, 0, 1),
(1740, 74, 0, 1),
(415, 74, 0, 1),
(3247, 74, 0, 1),
(4621, 74, 0, 1),
(463, 74, 0, 1),
(4622, 74, 0, 1),
(2492, 74, 0, 1),
(4623, 74, 0, 1),
(4624, 74, 0, 1),
(4625, 74, 0, 1),
(198, 74, 0, 1),
(41, 74, 0, 1),
(199, 74, 0, 1),
(3104, 74, 0, 1),
(362, 74, 0, 1),
(2230, 74, 0, 1),
(593, 74, 0, 1),
(1047, 74, 0, 1),
(582, 74, 0, 1),
(2388, 74, 0, 1),
(2545, 74, 0, 1),
(2395, 74, 0, 1),
(4626, 74, 0, 1),
(1217, 74, 0, 1),
(2344, 74, 0, 1),
(4627, 74, 0, 1),
(1451, 74, 0, 1),
(2290, 74, 0, 1),
(105, 74, 0, 1),
(866, 74, 0, 1),
(399, 74, 0, 1),
(4628, 74, 0, 1),
(14, 74, 0, 1),
(1662, 74, 0, 1),
(2635, 74, 0, 1),
(2624, 74, 0, 1),
(443, 74, 0, 1),
(652, 74, 0, 1),
(200, 74, 0, 1),
(4629, 74, 0, 1),
(2932, 74, 0, 1),
(256, 74, 0, 1),
(217, 74, 0, 1),
(487, 74, 0, 1),
(2580, 74, 0, 1),
(613, 74, 0, 1),
(148, 74, 0, 1),
(4630, 74, 0, 1),
(599, 74, 0, 1),
(2222, 74, 0, 1),
(1120, 74, 0, 1),
(4631, 74, 0, 1),
(2000, 74, 0, 1),
(4632, 74, 0, 1),
(4633, 74, 0, 1),
(161, 74, 0, 1),
(183, 74, 0, 1),
(4634, 74, 0, 1),
(65, 74, 0, 1),
(2602, 74, 0, 1),
(4635, 74, 0, 1),
(2606, 74, 0, 1),
(4636, 74, 0, 1),
(3566, 74, 0, 1),
(150, 74, 0, 1),
(4637, 74, 0, 1),
(4638, 74, 0, 1),
(3344, 74, 0, 1),
(4639, 74, 0, 1),
(2207, 74, 0, 1),
(210, 74, 0, 1),
(4640, 75, 0, 0),
(4641, 75, 0, 0),
(2333, 75, 0, 1),
(3588, 75, 0, 1),
(4642, 75, 0, 1),
(2292, 75, 0, 1),
(1546, 75, 0, 1),
(400, 75, 0, 1),
(45, 75, 0, 1),
(2215, 75, 0, 1),
(1057, 75, 0, 1),
(1837, 75, 0, 1),
(3950, 75, 0, 1),
(4643, 75, 0, 1),
(4644, 75, 0, 1),
(221, 75, 0, 1),
(4645, 75, 0, 1),
(9, 75, 0, 1),
(1377, 75, 0, 1),
(4646, 75, 0, 1),
(3258, 75, 0, 1),
(1032, 75, 0, 1),
(136, 75, 0, 1),
(4647, 75, 0, 1),
(131, 75, 0, 1),
(32, 75, 0, 1),
(1459, 75, 0, 1),
(4648, 75, 0, 1),
(117, 75, 0, 1),
(2300, 75, 0, 1),
(41, 75, 0, 1),
(642, 75, 0, 1),
(314, 75, 0, 1),
(2240, 75, 0, 1),
(4299, 75, 0, 1),
(454, 75, 0, 1),
(94, 75, 0, 1),
(362, 75, 0, 1),
(4484, 75, 0, 1),
(27, 75, 0, 1),
(147, 75, 0, 1),
(4649, 75, 0, 1),
(625, 75, 0, 1),
(4650, 75, 0, 1),
(3673, 75, 0, 1),
(4651, 75, 0, 1),
(4652, 75, 0, 1),
(507, 75, 0, 1),
(118, 75, 0, 1),
(2242, 75, 0, 1),
(4653, 75, 0, 1),
(2247, 75, 0, 1),
(4654, 75, 0, 1),
(4341, 75, 0, 1),
(1111, 75, 0, 1),
(4655, 75, 0, 1),
(1588, 75, 0, 1),
(391, 75, 0, 1),
(56, 75, 0, 1),
(4656, 75, 0, 1),
(2270, 75, 0, 1),
(1659, 75, 0, 1),
(408, 75, 0, 1),
(3228, 75, 0, 1),
(3842, 75, 0, 1),
(186, 75, 0, 1),
(1099, 75, 0, 1),
(2284, 75, 0, 1),
(621, 75, 0, 1),
(3937, 75, 0, 1),
(598, 75, 0, 1),
(2173, 75, 0, 1),
(1550, 75, 0, 1),
(589, 75, 0, 1),
(2196, 75, 0, 1),
(3434, 75, 0, 1),
(713, 75, 0, 1),
(592, 75, 0, 1),
(127, 75, 0, 1),
(690, 75, 0, 1),
(4023, 75, 0, 1),
(139, 75, 0, 1),
(1058, 75, 0, 1),
(3795, 75, 0, 1),
(2219, 75, 0, 1),
(1283, 75, 0, 1),
(2527, 75, 0, 1),
(4657, 75, 0, 1),
(168, 75, 0, 1),
(226, 75, 0, 1),
(2427, 75, 0, 1),
(2453, 75, 0, 1),
(2655, 75, 0, 1),
(148, 75, 0, 1),
(3661, 75, 0, 1),
(4658, 75, 0, 1),
(39, 75, 0, 1),
(1449, 75, 0, 1),
(325, 75, 0, 1),
(437, 75, 0, 1),
(150, 75, 0, 1),
(4659, 75, 0, 1),
(695, 75, 0, 1),
(60, 75, 0, 1),
(2940, 75, 0, 1),
(2287, 75, 0, 1),
(2540, 75, 0, 1),
(65, 75, 0, 1),
(1732, 75, 0, 1),
(4660, 75, 0, 1),
(4661, 75, 0, 1),
(3155, 75, 0, 1),
(3677, 75, 0, 1),
(4662, 75, 0, 1),
(210, 75, 0, 1),
(4663, 76, 0, 0),
(4664, 76, 0, 0),
(2333, 76, 0, 1),
(1583, 76, 0, 1),
(4665, 76, 0, 1),
(4664, 76, 0, 1),
(123, 76, 0, 1),
(4666, 76, 0, 1),
(150, 76, 0, 1),
(2266, 76, 0, 1),
(2305, 76, 0, 1),
(4667, 76, 0, 1),
(92, 76, 0, 1),
(4668, 76, 0, 1),
(94, 76, 0, 1),
(4669, 76, 0, 1),
(163, 76, 0, 1),
(553, 76, 0, 1),
(460, 76, 0, 1),
(145, 76, 0, 1),
(2219, 76, 0, 1),
(3596, 76, 0, 1),
(9, 76, 0, 1),
(693, 76, 0, 1),
(4670, 76, 0, 1),
(3863, 76, 0, 1),
(1806, 76, 0, 1),
(3202, 76, 0, 1),
(960, 76, 0, 1),
(4671, 76, 0, 1),
(2470, 76, 0, 1),
(663, 76, 0, 1),
(4672, 76, 0, 1),
(3252, 76, 0, 1),
(1519, 76, 0, 1),
(155, 76, 0, 1),
(3743, 76, 0, 1),
(4094, 76, 0, 1),
(4673, 76, 0, 1),
(227, 76, 0, 1),
(4674, 76, 0, 1),
(196, 76, 0, 1),
(3093, 76, 0, 1),
(494, 76, 0, 1),
(174, 76, 0, 1),
(362, 76, 0, 1),
(200, 76, 0, 1),
(2633, 76, 0, 1),
(3081, 76, 0, 1),
(4675, 76, 0, 1),
(3786, 76, 0, 1),
(4676, 76, 0, 1),
(2240, 76, 0, 1),
(45, 76, 0, 1),
(795, 76, 0, 1),
(4677, 76, 0, 1),
(507, 76, 0, 1),
(2731, 76, 0, 1),
(4678, 76, 0, 1),
(14, 76, 0, 1),
(4679, 76, 0, 1),
(924, 76, 0, 1),
(3951, 76, 0, 1),
(4680, 76, 0, 1),
(4681, 76, 0, 1),
(884, 76, 0, 1),
(1684, 76, 0, 1),
(4682, 76, 0, 1),
(4683, 77, 0, 0),
(4684, 77, 0, 0),
(4685, 77, 0, 0),
(2333, 77, 0, 1),
(4171, 77, 0, 1),
(73, 77, 0, 1),
(4686, 77, 0, 1),
(866, 77, 0, 1),
(2193, 77, 0, 1),
(478, 77, 0, 1),
(2636, 77, 0, 1),
(4687, 77, 0, 1),
(227, 77, 0, 1),
(4688, 77, 0, 1),
(924, 77, 0, 1),
(2483, 77, 0, 1),
(4689, 77, 0, 1),
(2211, 77, 0, 1),
(965, 77, 0, 1),
(175, 77, 0, 1),
(2305, 77, 0, 1),
(4690, 77, 0, 1),
(4691, 77, 0, 1),
(3677, 77, 0, 1),
(2210, 77, 0, 1),
(693, 77, 0, 1),
(1278, 77, 0, 1),
(2321, 77, 0, 1),
(4692, 77, 0, 1),
(4693, 77, 0, 1),
(4694, 77, 0, 1),
(643, 77, 0, 1),
(4695, 77, 0, 1),
(4696, 77, 0, 1),
(1474, 77, 0, 1),
(9, 77, 0, 1),
(957, 77, 0, 1),
(4697, 77, 0, 1),
(94, 77, 0, 1),
(362, 77, 0, 1),
(4698, 77, 0, 1),
(1061, 77, 0, 1),
(3191, 77, 0, 1),
(2219, 77, 0, 1),
(2225, 77, 0, 1),
(505, 77, 0, 1),
(3012, 77, 0, 1),
(1429, 77, 0, 1),
(6, 77, 0, 1),
(2479, 77, 0, 1),
(2574, 77, 0, 1),
(462, 77, 0, 1),
(4699, 77, 0, 1),
(487, 77, 0, 1),
(4613, 77, 0, 1),
(226, 77, 0, 1),
(45, 77, 0, 1),
(2382, 77, 0, 1),
(147, 77, 0, 1),
(4700, 77, 0, 1),
(2238, 77, 0, 1),
(2998, 77, 0, 1),
(903, 77, 0, 1),
(4701, 77, 0, 1),
(72, 77, 0, 1),
(4702, 77, 0, 1),
(4703, 77, 0, 1),
(150, 77, 0, 1),
(637, 77, 0, 1),
(4025, 77, 0, 1),
(83, 77, 0, 1),
(1022, 77, 0, 1),
(217, 77, 0, 1),
(34, 77, 0, 1),
(4644, 77, 0, 1),
(4704, 77, 0, 1),
(4705, 77, 0, 1),
(1179, 77, 0, 1),
(4706, 77, 0, 1),
(1266, 77, 0, 1),
(4707, 77, 0, 1),
(2576, 77, 0, 1),
(775, 77, 0, 1),
(2390, 77, 0, 1),
(4708, 77, 0, 1),
(1825, 77, 0, 1),
(127, 77, 0, 1),
(183, 77, 0, 1),
(4066, 77, 0, 1),
(4709, 77, 0, 1),
(2501, 77, 0, 1),
(4710, 77, 0, 1),
(168, 77, 0, 1),
(551, 77, 0, 1),
(533, 77, 0, 1),
(107, 77, 0, 1),
(713, 77, 0, 1),
(4711, 77, 0, 1),
(3541, 77, 0, 1),
(2783, 77, 0, 1),
(2270, 77, 0, 1),
(198, 77, 0, 1),
(4712, 77, 0, 1),
(2553, 77, 0, 1),
(2563, 77, 0, 1),
(4713, 77, 0, 1),
(4714, 77, 0, 1),
(131, 77, 0, 1),
(2749, 77, 0, 1),
(479, 77, 0, 1),
(4715, 77, 0, 1),
(4716, 77, 0, 1),
(2240, 77, 0, 1),
(583, 77, 0, 1),
(2163, 77, 0, 1),
(4717, 77, 0, 1),
(2836, 77, 0, 1),
(4718, 77, 0, 1),
(4719, 77, 0, 1),
(500, 77, 0, 1),
(459, 77, 0, 1),
(40, 77, 0, 1),
(4720, 77, 0, 1),
(4721, 77, 0, 1),
(4722, 77, 0, 1),
(4723, 77, 0, 1),
(121, 77, 0, 1),
(564, 77, 0, 1),
(4724, 77, 0, 1),
(2694, 77, 0, 1),
(1283, 77, 0, 1),
(2696, 77, 0, 1),
(494, 77, 0, 1),
(2625, 77, 0, 1),
(2204, 77, 0, 1),
(2357, 77, 0, 1),
(4725, 77, 0, 1),
(118, 77, 0, 1),
(2646, 77, 0, 1),
(2208, 77, 0, 1),
(3466, 77, 0, 1),
(2485, 77, 0, 1),
(400, 77, 0, 1),
(10, 77, 0, 1),
(507, 77, 0, 1),
(2939, 77, 0, 1),
(4726, 77, 0, 1),
(601, 77, 0, 1),
(109, 77, 0, 1),
(3269, 77, 0, 1),
(4727, 77, 0, 1),
(613, 77, 0, 1),
(615, 77, 0, 1),
(1021, 77, 0, 1),
(2851, 77, 0, 1),
(39, 77, 0, 1),
(4728, 77, 0, 1),
(4729, 77, 0, 1),
(464, 77, 0, 1),
(4730, 77, 0, 1),
(69, 77, 0, 1),
(2597, 77, 0, 1),
(4731, 77, 0, 1),
(27, 77, 0, 1),
(2276, 77, 0, 1),
(28, 77, 0, 1),
(4732, 77, 0, 1),
(145, 77, 0, 1),
(4733, 77, 0, 1),
(2239, 77, 0, 1),
(123, 77, 0, 1),
(4734, 77, 0, 1),
(4735, 77, 0, 1),
(2816, 77, 0, 1),
(274, 77, 0, 1),
(2624, 77, 0, 1),
(255, 77, 0, 1),
(2035, 77, 0, 1),
(2712, 77, 0, 1),
(2229, 77, 0, 1),
(4178, 77, 0, 1),
(210, 77, 0, 1),
(4736, 78, 0, 0),
(4737, 78, 0, 0),
(4738, 78, 0, 0),
(4740, 5, 1, 0),
(4741, 5, 3, 0),
(4742, 79, 0, 0),
(4743, 79, 0, 0),
(4744, 79, 0, 0),
(4745, 79, 0, 0),
(4746, 79, 0, 0),
(2333, 79, 0, 1),
(2499, 79, 0, 1),
(163, 79, 0, 1),
(557, 79, 0, 1),
(4747, 79, 0, 1),
(121, 79, 0, 1),
(4748, 79, 0, 1),
(917, 79, 0, 1),
(1440, 79, 0, 1),
(4745, 79, 0, 1),
(3942, 79, 0, 1),
(145, 79, 0, 1),
(4749, 79, 0, 1),
(4750, 79, 0, 1),
(4751, 79, 0, 1),
(4752, 79, 0, 1),
(4753, 79, 0, 1),
(4754, 79, 0, 1),
(161, 79, 0, 1),
(4755, 79, 0, 1),
(160, 79, 0, 1),
(1633, 79, 0, 1),
(1179, 79, 0, 1),
(401, 79, 0, 1),
(4756, 79, 0, 1),
(367, 79, 0, 1),
(3341, 79, 0, 1),
(4757, 79, 0, 1),
(4758, 79, 0, 1),
(3987, 79, 0, 1),
(1616, 79, 0, 1),
(199, 79, 0, 1),
(321, 79, 0, 1),
(4759, 79, 0, 1),
(2689, 79, 0, 1),
(2215, 79, 0, 1),
(1817, 79, 0, 1),
(258, 79, 0, 1),
(2259, 79, 0, 1),
(765, 79, 0, 1),
(2423, 79, 0, 1),
(4760, 79, 0, 1),
(4761, 79, 0, 1),
(329, 79, 0, 1),
(39, 79, 0, 1),
(4762, 79, 0, 1),
(4763, 79, 0, 1),
(4764, 79, 0, 1),
(2193, 79, 0, 1),
(3172, 79, 0, 1),
(4765, 79, 0, 1),
(2753, 79, 0, 1),
(4766, 79, 0, 1),
(362, 79, 0, 1),
(601, 79, 0, 1),
(4767, 79, 0, 1),
(3877, 79, 0, 1),
(143, 79, 0, 1),
(795, 79, 0, 1),
(1111, 79, 0, 1),
(363, 79, 0, 1),
(2222, 79, 0, 1),
(2242, 79, 0, 1),
(4768, 79, 0, 1),
(478, 79, 0, 1),
(3197, 79, 0, 1),
(196, 79, 0, 1),
(1215, 79, 0, 1),
(2206, 79, 0, 1),
(3880, 79, 0, 1),
(2706, 79, 0, 1),
(2795, 79, 0, 1),
(4769, 79, 0, 1),
(9, 79, 0, 1),
(4770, 79, 0, 1),
(1825, 79, 0, 1),
(1509, 79, 0, 1),
(120, 79, 0, 1),
(773, 79, 0, 1),
(4771, 79, 0, 1),
(226, 79, 0, 1),
(693, 79, 0, 1),
(2799, 79, 0, 1),
(1097, 79, 0, 1),
(4772, 79, 0, 1),
(4773, 79, 0, 1),
(4774, 79, 0, 1),
(563, 79, 0, 1),
(1370, 79, 0, 1),
(45, 79, 0, 1),
(402, 79, 0, 1),
(157, 79, 0, 1),
(3849, 79, 0, 1),
(198, 79, 0, 1),
(1621, 79, 0, 1),
(391, 79, 0, 1),
(4775, 79, 0, 1),
(800, 79, 0, 1),
(205, 79, 0, 1),
(3072, 79, 0, 1),
(94, 79, 0, 1),
(89, 79, 0, 1),
(593, 79, 0, 1),
(2219, 79, 0, 1),
(4776, 79, 0, 1),
(2963, 79, 0, 1),
(2240, 79, 0, 1),
(3673, 79, 0, 1),
(4777, 79, 0, 1),
(186, 79, 0, 1),
(4778, 79, 0, 1),
(464, 79, 0, 1),
(454, 79, 0, 1),
(2712, 79, 0, 1),
(69, 79, 0, 1),
(4779, 79, 0, 1),
(2305, 79, 0, 1),
(167, 79, 0, 1),
(3789, 79, 0, 1),
(323, 79, 0, 1),
(2357, 79, 0, 1),
(131, 79, 0, 1),
(494, 79, 0, 1),
(4780, 79, 0, 1),
(4781, 79, 0, 1),
(2823, 79, 0, 1),
(3677, 79, 0, 1),
(4782, 79, 0, 1),
(210, 79, 0, 1),
(4783, 80, 0, 0),
(4784, 80, 0, 0),
(4785, 80, 0, 0),
(4786, 80, 0, 0),
(2333, 80, 0, 1),
(2499, 80, 0, 1),
(163, 80, 0, 1),
(4785, 80, 0, 1),
(4787, 80, 0, 1),
(549, 80, 0, 1),
(4788, 80, 0, 1),
(462, 80, 0, 1),
(46, 80, 0, 1),
(4789, 80, 0, 1),
(4790, 80, 0, 1),
(4791, 80, 0, 1),
(150, 80, 0, 1),
(4792, 80, 0, 1),
(4793, 80, 0, 1),
(4794, 80, 0, 1),
(45, 80, 0, 1),
(4795, 80, 0, 1),
(892, 80, 0, 1),
(4796, 80, 0, 1),
(147, 80, 0, 1),
(4797, 80, 0, 1),
(3125, 80, 0, 1),
(4102, 80, 0, 1),
(4798, 80, 0, 1),
(494, 80, 0, 1),
(454, 80, 0, 1),
(4799, 80, 0, 1),
(2215, 80, 0, 1),
(1136, 80, 0, 1),
(268, 80, 0, 1),
(1395, 80, 0, 1),
(174, 80, 0, 1),
(4800, 80, 0, 1),
(4801, 80, 0, 1),
(3282, 80, 0, 1),
(131, 80, 0, 1),
(161, 80, 0, 1),
(3453, 80, 0, 1),
(4802, 80, 0, 1),
(4803, 80, 0, 1),
(4804, 80, 0, 1),
(258, 80, 0, 1),
(2166, 80, 0, 1),
(270, 80, 0, 1),
(693, 80, 0, 1),
(3642, 80, 0, 1),
(4805, 80, 0, 1),
(198, 80, 0, 1),
(2245, 80, 0, 1),
(551, 80, 0, 1),
(623, 80, 0, 1),
(11, 80, 0, 1),
(227, 80, 0, 1),
(2708, 80, 0, 1),
(4806, 80, 0, 1),
(2284, 80, 0, 1),
(4807, 80, 0, 1),
(2072, 80, 0, 1),
(143, 80, 0, 1),
(4808, 80, 0, 1),
(1495, 80, 0, 1),
(1506, 80, 0, 1),
(1269, 80, 0, 1),
(690, 80, 0, 1),
(4178, 80, 0, 1),
(40, 80, 0, 1),
(3387, 80, 0, 1),
(4809, 80, 0, 1),
(1509, 80, 0, 1),
(4810, 80, 0, 1),
(199, 80, 0, 1),
(2606, 80, 0, 1),
(139, 80, 0, 1),
(1190, 80, 0, 1),
(2222, 80, 0, 1),
(1738, 80, 0, 1),
(4811, 80, 0, 1),
(256, 80, 0, 1),
(3128, 80, 0, 1),
(4105, 80, 0, 1),
(4525, 80, 0, 1),
(2527, 80, 0, 1),
(391, 80, 0, 1),
(195, 80, 0, 1),
(4812, 80, 0, 1),
(819, 80, 0, 1),
(1048, 80, 0, 1),
(2221, 80, 0, 1),
(728, 80, 0, 1),
(4813, 80, 0, 1),
(765, 80, 0, 1),
(866, 80, 0, 1),
(167, 80, 0, 1),
(362, 80, 0, 1),
(2689, 80, 0, 1),
(3093, 80, 0, 1),
(2270, 80, 0, 1),
(2325, 80, 0, 1),
(4814, 80, 0, 1),
(4815, 80, 0, 1),
(2219, 80, 0, 1),
(4816, 80, 0, 1),
(4817, 80, 0, 1),
(4818, 80, 0, 1),
(127, 80, 0, 1),
(4819, 80, 0, 1),
(4820, 80, 0, 1),
(3219, 80, 0, 1),
(399, 80, 0, 1),
(4821, 80, 0, 1),
(1821, 80, 0, 1),
(1687, 80, 0, 1),
(2636, 80, 0, 1),
(3465, 80, 0, 1),
(4822, 80, 0, 1),
(4823, 80, 0, 1),
(210, 80, 0, 1),
(4824, 81, 0, 0),
(4825, 81, 0, 0),
(4826, 81, 0, 0),
(4827, 81, 0, 0),
(4828, 81, 0, 0),
(4829, 81, 0, 0),
(2333, 81, 0, 1),
(2963, 81, 0, 1),
(795, 81, 0, 1),
(2270, 81, 0, 1),
(454, 81, 0, 1),
(227, 81, 0, 1),
(4830, 81, 0, 1),
(4831, 81, 0, 1),
(94, 81, 0, 1),
(121, 81, 0, 1),
(362, 81, 0, 1),
(45, 81, 0, 1),
(507, 81, 0, 1),
(131, 81, 0, 1),
(3402, 81, 0, 1),
(3033, 81, 0, 1),
(2217, 81, 0, 1),
(2633, 81, 0, 1),
(9, 81, 0, 1),
(270, 81, 0, 1),
(256, 81, 0, 1),
(580, 81, 0, 1),
(517, 81, 0, 1),
(92, 81, 0, 1),
(10, 81, 0, 1),
(4832, 81, 0, 1),
(4833, 81, 0, 1),
(139, 81, 0, 1),
(4834, 81, 0, 1),
(230, 81, 0, 1),
(186, 81, 0, 1),
(155, 81, 0, 1),
(535, 81, 0, 1),
(23, 81, 0, 1),
(323, 81, 0, 1),
(73, 81, 0, 1),
(4835, 81, 0, 1),
(4836, 81, 0, 1),
(4340, 81, 0, 1),
(163, 81, 0, 1),
(27, 81, 0, 1),
(2763, 81, 0, 1),
(767, 81, 0, 1),
(2890, 81, 0, 1),
(693, 81, 0, 1),
(4837, 81, 0, 1),
(391, 81, 0, 1),
(981, 81, 0, 1),
(2219, 81, 0, 1),
(2303, 81, 0, 1),
(3803, 81, 0, 1),
(118, 81, 0, 1),
(4838, 81, 0, 1),
(1032, 81, 0, 1),
(2984, 81, 0, 1),
(2598, 81, 0, 1),
(4839, 81, 0, 1),
(4840, 81, 0, 1),
(2193, 81, 0, 1),
(4841, 81, 0, 1),
(123, 81, 0, 1),
(1170, 81, 0, 1),
(4842, 81, 0, 1),
(2324, 81, 0, 1),
(199, 81, 0, 1),
(4843, 81, 0, 1),
(2823, 81, 0, 1),
(226, 81, 0, 1),
(4354, 81, 0, 1),
(4844, 81, 0, 1),
(65, 81, 0, 1),
(4845, 81, 0, 1),
(623, 81, 0, 1),
(3252, 81, 0, 1),
(165, 81, 0, 1),
(4846, 81, 0, 1),
(3010, 81, 0, 1),
(4847, 81, 0, 1),
(147, 81, 0, 1),
(4613, 81, 0, 1),
(839, 81, 0, 1),
(192, 81, 0, 1),
(3895, 81, 0, 1),
(494, 81, 0, 1),
(4848, 81, 0, 1),
(3135, 81, 0, 1),
(642, 81, 0, 1),
(210, 81, 0, 1),
(4849, 82, 0, 0),
(4850, 82, 0, 0),
(2333, 82, 0, 1),
(3248, 82, 0, 1),
(4851, 82, 0, 1),
(395, 82, 0, 1),
(362, 82, 0, 1),
(3642, 82, 0, 1),
(2485, 82, 0, 1),
(1165, 82, 0, 1),
(3478, 82, 0, 1),
(296, 82, 0, 1),
(4852, 82, 0, 1),
(400, 82, 0, 1),
(45, 82, 0, 1),
(4345, 82, 0, 1),
(163, 82, 0, 1),
(4853, 82, 0, 1),
(4854, 82, 0, 1),
(454, 82, 0, 1),
(4456, 82, 0, 1),
(1429, 82, 0, 1),
(4855, 82, 0, 1),
(2673, 82, 0, 1),
(1176, 82, 0, 1),
(121, 82, 0, 1),
(4856, 82, 0, 1),
(4258, 82, 0, 1),
(12, 82, 0, 1),
(1445, 82, 0, 1),
(2370, 82, 0, 1),
(258, 82, 0, 1),
(1283, 82, 0, 1),
(1616, 82, 0, 1),
(199, 82, 0, 1),
(1877, 82, 0, 1),
(4857, 82, 0, 1),
(4858, 82, 0, 1),
(4859, 82, 0, 1),
(4860, 82, 0, 1),
(1365, 82, 0, 1),
(4861, 82, 0, 1),
(1078, 82, 0, 1),
(4862, 82, 0, 1),
(4863, 82, 0, 1),
(245, 82, 0, 1),
(866, 82, 0, 1),
(198, 82, 0, 1),
(1565, 82, 0, 1),
(192, 82, 0, 1),
(4864, 82, 0, 1),
(327, 82, 0, 1),
(131, 82, 0, 1),
(230, 82, 0, 1),
(2193, 82, 0, 1),
(1938, 82, 0, 1),
(1336, 82, 0, 1),
(367, 82, 0, 1),
(4865, 82, 0, 1),
(666, 82, 0, 1),
(3387, 82, 0, 1),
(3252, 82, 0, 1),
(4866, 82, 0, 1),
(4867, 82, 0, 1),
(4868, 82, 0, 1),
(2641, 82, 0, 1),
(143, 82, 0, 1),
(3942, 82, 0, 1),
(4869, 82, 0, 1),
(9, 82, 0, 1),
(4870, 82, 0, 1),
(4871, 82, 0, 1),
(391, 82, 0, 1),
(2675, 82, 0, 1),
(663, 82, 0, 1),
(517, 82, 0, 1),
(4872, 82, 0, 1),
(4873, 82, 0, 1),
(4874, 82, 0, 1),
(196, 82, 0, 1),
(4875, 82, 0, 1),
(636, 82, 0, 1),
(4876, 82, 0, 1),
(3216, 82, 0, 1),
(3217, 82, 0, 1),
(4877, 82, 0, 1),
(2527, 82, 0, 1),
(4878, 82, 0, 1),
(150, 82, 0, 1),
(4879, 82, 0, 1),
(4880, 82, 0, 1),
(2324, 82, 0, 1),
(4881, 82, 0, 1),
(4882, 82, 0, 1),
(1549, 82, 0, 1),
(123, 82, 0, 1),
(4883, 82, 0, 1),
(546, 82, 0, 1),
(39, 82, 0, 1),
(1377, 82, 0, 1),
(765, 82, 0, 1),
(456, 82, 0, 1),
(4032, 82, 0, 1),
(4884, 82, 0, 1),
(2215, 82, 0, 1),
(175, 82, 0, 1),
(1334, 82, 0, 1),
(860, 82, 0, 1),
(4885, 82, 0, 1),
(658, 82, 0, 1),
(4886, 82, 0, 1),
(14, 82, 0, 1),
(3427, 82, 0, 1),
(4343, 82, 0, 1),
(4887, 82, 0, 1),
(3091, 82, 0, 1),
(4888, 82, 0, 1),
(227, 82, 0, 1),
(4889, 82, 0, 1),
(2740, 82, 0, 1),
(494, 82, 0, 1),
(2940, 82, 0, 1),
(4890, 82, 0, 1),
(3100, 82, 0, 1),
(2210, 82, 0, 1),
(4891, 82, 0, 1),
(676, 82, 0, 1),
(393, 82, 0, 1),
(3791, 82, 0, 1),
(4892, 82, 0, 1),
(795, 82, 0, 1),
(727, 82, 0, 1),
(1202, 82, 0, 1),
(4893, 82, 0, 1),
(413, 82, 0, 1),
(4894, 82, 0, 1),
(4895, 82, 0, 1),
(3920, 82, 0, 1),
(295, 82, 0, 1),
(72, 82, 0, 1),
(4896, 82, 0, 1),
(1570, 82, 0, 1),
(4897, 82, 0, 1),
(693, 82, 0, 1),
(4898, 82, 0, 1),
(2219, 82, 0, 1),
(1532, 82, 0, 1),
(4551, 82, 0, 1),
(3438, 82, 0, 1),
(4669, 82, 0, 1),
(3963, 82, 0, 1),
(27, 82, 0, 1),
(4899, 82, 0, 1),
(94, 82, 0, 1),
(210, 82, 0, 1),
(4900, 83, 0, 0),
(4901, 83, 0, 0),
(2333, 83, 0, 1),
(4029, 83, 0, 1),
(4902, 83, 0, 1),
(4903, 83, 0, 1),
(275, 83, 0, 1),
(558, 83, 0, 1),
(399, 83, 0, 1),
(4904, 83, 0, 1),
(205, 83, 0, 1),
(393, 83, 0, 1),
(4905, 83, 0, 1),
(525, 83, 0, 1),
(4906, 83, 0, 1),
(2528, 83, 0, 1),
(4907, 83, 0, 1),
(4908, 83, 0, 1),
(4533, 83, 0, 1),
(1877, 83, 0, 1),
(2385, 83, 0, 1),
(198, 83, 0, 1),
(819, 83, 0, 1),
(4909, 83, 0, 1),
(2622, 83, 0, 1),
(4910, 83, 0, 1),
(2677, 83, 0, 1),
(766, 83, 0, 1),
(4911, 83, 0, 1),
(3825, 83, 0, 1),
(4912, 83, 0, 1),
(183, 83, 0, 1),
(4913, 83, 0, 1),
(52, 83, 0, 1),
(362, 83, 0, 1),
(3073, 83, 0, 1),
(4914, 83, 0, 1),
(2222, 83, 0, 1),
(45, 83, 0, 1),
(4886, 83, 0, 1),
(4915, 83, 0, 1),
(27, 83, 0, 1),
(1900, 83, 0, 1),
(4916, 83, 0, 1),
(4302, 83, 0, 1),
(4917, 83, 0, 1),
(4918, 83, 0, 1),
(4423, 83, 0, 1),
(199, 83, 0, 1),
(3031, 83, 0, 1),
(866, 83, 0, 1),
(2210, 83, 0, 1),
(3582, 83, 0, 1),
(39, 83, 0, 1),
(4919, 83, 0, 1),
(507, 83, 0, 1),
(221, 83, 0, 1),
(1310, 83, 0, 1),
(255, 83, 0, 1),
(4920, 83, 0, 1),
(2218, 83, 0, 1),
(2395, 83, 0, 1),
(4921, 83, 0, 1),
(4922, 83, 0, 1),
(32, 83, 0, 1),
(4597, 83, 0, 1),
(327, 83, 0, 1),
(4923, 83, 0, 1),
(4924, 83, 0, 1),
(3260, 83, 0, 1),
(4925, 83, 0, 1),
(4926, 83, 0, 1),
(230, 83, 0, 1),
(2193, 83, 0, 1),
(123, 83, 0, 1),
(1471, 83, 0, 1),
(3590, 83, 0, 1),
(1036, 83, 0, 1),
(4927, 83, 0, 1),
(215, 83, 0, 1),
(4928, 83, 0, 1),
(669, 83, 0, 1),
(718, 83, 0, 1),
(4929, 83, 0, 1),
(649, 83, 0, 1),
(4930, 83, 0, 1),
(2545, 83, 0, 1),
(2574, 83, 0, 1),
(4931, 83, 0, 1),
(139, 83, 0, 1),
(593, 83, 0, 1),
(4932, 83, 0, 1),
(34, 83, 0, 1),
(9, 83, 0, 1),
(4933, 83, 0, 1),
(209, 83, 0, 1),
(3248, 83, 0, 1),
(4934, 83, 0, 1),
(4935, 83, 0, 1),
(92, 83, 0, 1),
(150, 83, 0, 1),
(131, 83, 0, 1),
(70, 83, 0, 1),
(4936, 83, 0, 1),
(192, 83, 0, 1),
(454, 83, 0, 1),
(11, 83, 0, 1),
(163, 83, 0, 1),
(361, 83, 0, 1),
(4937, 83, 0, 1),
(3588, 83, 0, 1),
(4938, 83, 0, 1),
(4939, 83, 0, 1),
(2206, 83, 0, 1),
(4940, 83, 0, 1),
(63, 83, 0, 1),
(4941, 83, 0, 1),
(117, 83, 0, 1),
(1924, 83, 0, 1),
(2495, 83, 0, 1),
(4942, 83, 0, 1),
(1738, 83, 0, 1),
(4330, 83, 0, 1),
(4943, 83, 0, 1),
(4944, 83, 0, 1),
(2026, 83, 0, 1),
(4945, 83, 0, 1),
(2488, 83, 0, 1),
(3344, 83, 0, 1),
(186, 83, 0, 1),
(4946, 83, 0, 1),
(2613, 83, 0, 1),
(4649, 83, 0, 1),
(1170, 83, 0, 1),
(256, 83, 0, 1),
(2712, 83, 0, 1),
(4947, 83, 0, 1),
(4948, 83, 0, 1),
(147, 83, 0, 1),
(4949, 83, 0, 1),
(3374, 83, 0, 1),
(4355, 83, 0, 1),
(4950, 83, 0, 1),
(4951, 83, 0, 1),
(3446, 83, 0, 1),
(3508, 83, 0, 1),
(4217, 83, 0, 1),
(1549, 83, 0, 1),
(4952, 83, 0, 1),
(4032, 83, 0, 1),
(3882, 83, 0, 1),
(4345, 83, 0, 1),
(4953, 83, 0, 1),
(3515, 83, 0, 1),
(4954, 83, 0, 1),
(4197, 83, 0, 1),
(2459, 83, 0, 1),
(4955, 83, 0, 1),
(623, 83, 0, 1),
(4956, 83, 0, 1),
(4957, 83, 0, 1),
(4958, 83, 0, 1),
(29, 83, 0, 1),
(419, 83, 0, 1),
(196, 83, 0, 1),
(1120, 83, 0, 1),
(2, 83, 0, 1),
(4959, 83, 0, 1),
(4201, 83, 0, 1),
(1022, 83, 0, 1),
(4960, 83, 0, 1),
(3456, 83, 0, 1),
(4961, 83, 0, 1),
(4962, 83, 0, 1),
(4963, 83, 0, 1),
(1680, 83, 0, 1),
(2462, 83, 0, 1),
(3913, 83, 0, 1),
(4964, 83, 0, 1),
(480, 83, 0, 1),
(4965, 83, 0, 1),
(259, 83, 0, 1),
(2685, 83, 0, 1),
(4966, 83, 0, 1),
(288, 83, 0, 1),
(2357, 83, 0, 1),
(227, 83, 0, 1),
(2636, 83, 0, 1),
(1283, 83, 0, 1),
(621, 83, 0, 1),
(1281, 83, 0, 1),
(4967, 83, 0, 1),
(4968, 83, 0, 1),
(4969, 83, 0, 1),
(174, 83, 0, 1),
(346, 83, 0, 1),
(1867, 83, 0, 1),
(4970, 83, 0, 1),
(4971, 83, 0, 1),
(1154, 83, 0, 1),
(223, 83, 0, 1),
(4972, 83, 0, 1),
(65, 83, 0, 1),
(4973, 83, 0, 1),
(195, 83, 0, 1),
(3105, 83, 0, 1),
(4974, 83, 0, 1),
(166, 83, 0, 1),
(56, 83, 0, 1),
(4975, 83, 0, 1),
(4976, 83, 0, 1),
(4977, 83, 0, 1),
(4978, 84, 0, 0),
(4979, 84, 0, 0),
(4980, 84, 0, 0),
(2333, 84, 0, 1),
(4837, 84, 0, 1),
(981, 84, 0, 1),
(4981, 84, 0, 1),
(690, 84, 0, 1),
(601, 84, 0, 1),
(3248, 84, 0, 1),
(2387, 84, 0, 1),
(45, 84, 0, 1),
(4166, 84, 0, 1),
(727, 84, 0, 1),
(60, 84, 0, 1),
(4025, 84, 0, 1),
(3396, 84, 0, 1),
(288, 84, 0, 1),
(370, 84, 0, 1),
(1459, 84, 0, 1),
(3910, 84, 0, 1),
(2219, 84, 0, 1),
(2848, 84, 0, 1),
(9, 84, 0, 1),
(105, 84, 0, 1),
(131, 84, 0, 1),
(4982, 84, 0, 1),
(2680, 84, 0, 1),
(258, 84, 0, 1),
(3427, 84, 0, 1),
(4983, 84, 0, 1),
(3430, 84, 0, 1),
(4984, 84, 0, 1),
(4985, 84, 0, 1),
(139, 84, 0, 1),
(413, 84, 0, 1),
(227, 84, 0, 1),
(2963, 84, 0, 1),
(4986, 84, 0, 1),
(4987, 84, 0, 1),
(4988, 84, 0, 1),
(956, 84, 0, 1),
(551, 84, 0, 1),
(4447, 84, 0, 1),
(2222, 84, 0, 1),
(4989, 84, 0, 1),
(1225, 84, 0, 1),
(4990, 84, 0, 1),
(210, 84, 0, 1),
(4991, 85, 0, 0),
(4992, 85, 0, 0),
(2333, 85, 0, 1),
(492, 85, 0, 1),
(4993, 85, 0, 1),
(147, 85, 0, 1),
(649, 85, 0, 1),
(2222, 85, 0, 1),
(690, 85, 0, 1),
(593, 85, 0, 1),
(3890, 85, 0, 1),
(45, 85, 0, 1),
(94, 85, 0, 1),
(1625, 85, 0, 1),
(1174, 85, 0, 1),
(636, 85, 0, 1),
(693, 85, 0, 1),
(517, 85, 0, 1),
(1170, 85, 0, 1),
(462, 85, 0, 1),
(3125, 85, 0, 1),
(819, 85, 0, 1),
(2210, 85, 0, 1),
(1190, 85, 0, 1),
(625, 85, 0, 1),
(4994, 85, 0, 1),
(3081, 85, 0, 1),
(1283, 85, 0, 1),
(9, 85, 0, 1),
(3133, 85, 0, 1),
(181, 85, 0, 1),
(4995, 85, 0, 1),
(4996, 85, 0, 1),
(1583, 85, 0, 1),
(1109, 85, 0, 1),
(957, 85, 0, 1),
(92, 85, 0, 1),
(2599, 85, 0, 1),
(150, 85, 0, 1),
(4997, 85, 0, 1),
(362, 85, 0, 1),
(143, 85, 0, 1),
(4808, 85, 0, 1),
(4733, 85, 0, 1),
(2492, 85, 0, 1),
(4998, 85, 0, 1),
(4999, 85, 0, 1),
(1931, 85, 0, 1),
(5000, 85, 0, 1),
(5001, 85, 0, 1),
(1093, 85, 0, 1),
(658, 85, 0, 1),
(5002, 85, 0, 1),
(5003, 85, 0, 1),
(3252, 85, 0, 1),
(4276, 85, 0, 1),
(127, 85, 0, 1),
(4223, 85, 0, 1),
(3498, 85, 0, 1),
(3789, 85, 0, 1),
(5004, 85, 0, 1),
(1278, 85, 0, 1),
(639, 85, 0, 1),
(1473, 85, 0, 1),
(32, 85, 0, 1),
(3271, 85, 0, 1),
(56, 85, 0, 1),
(454, 85, 0, 1),
(3605, 85, 0, 1),
(2522, 85, 0, 1),
(270, 85, 0, 1),
(5005, 85, 0, 1),
(5006, 85, 0, 1),
(2558, 85, 0, 1),
(268, 85, 0, 1),
(2763, 85, 0, 1),
(140, 85, 0, 1),
(795, 85, 0, 1),
(245, 85, 0, 1),
(4258, 85, 0, 1),
(2545, 85, 0, 1),
(1307, 85, 0, 1),
(5007, 85, 0, 1),
(1900, 85, 0, 1),
(2785, 85, 0, 1),
(258, 85, 0, 1),
(4277, 85, 0, 1),
(2196, 85, 0, 1),
(2690, 85, 0, 1),
(713, 85, 0, 1),
(1955, 85, 0, 1),
(5008, 85, 0, 1),
(221, 85, 0, 1),
(4105, 85, 0, 1),
(2283, 85, 0, 1),
(226, 85, 0, 1),
(5009, 85, 0, 1),
(210, 85, 0, 1),
(5010, 86, 0, 0),
(5011, 86, 0, 0),
(5012, 86, 0, 0),
(2333, 86, 0, 1),
(3247, 86, 0, 1),
(4651, 86, 0, 1),
(5013, 86, 0, 1),
(139, 86, 0, 1),
(2854, 86, 0, 1),
(3890, 86, 0, 1),
(45, 86, 0, 1),
(2307, 86, 0, 1),
(4036, 86, 0, 1),
(2242, 86, 0, 1),
(5014, 86, 0, 1),
(690, 86, 0, 1),
(161, 86, 0, 1),
(2204, 86, 0, 1),
(4622, 86, 0, 1),
(4484, 86, 0, 1),
(553, 86, 0, 1),
(362, 86, 0, 1),
(131, 86, 0, 1),
(186, 86, 0, 1),
(5015, 86, 0, 1),
(4376, 86, 0, 1),
(163, 86, 0, 1),
(9, 86, 0, 1),
(5016, 86, 0, 1),
(5017, 86, 0, 1),
(5018, 86, 0, 1),
(1695, 86, 0, 1),
(147, 86, 0, 1),
(2193, 86, 0, 1),
(5019, 86, 0, 1),
(5020, 86, 0, 1),
(2900, 86, 0, 1),
(30, 86, 0, 1),
(391, 86, 0, 1),
(2559, 86, 0, 1),
(2938, 86, 0, 1),
(4340, 86, 0, 1),
(2219, 86, 0, 1),
(3596, 86, 0, 1),
(5021, 86, 0, 1),
(2969, 86, 0, 1),
(141, 86, 0, 1),
(94, 86, 0, 1),
(649, 86, 0, 1),
(5022, 86, 0, 1),
(1440, 86, 0, 1),
(5023, 86, 0, 1),
(960, 86, 0, 1),
(198, 86, 0, 1),
(5024, 86, 0, 1),
(462, 86, 0, 1),
(5025, 86, 0, 1),
(167, 86, 0, 1),
(581, 86, 0, 1),
(3347, 86, 0, 1),
(5026, 86, 0, 1),
(84, 86, 0, 1),
(2901, 86, 0, 1),
(5027, 86, 0, 1),
(5028, 86, 0, 1),
(12, 86, 0, 1),
(422, 86, 0, 1),
(3252, 86, 0, 1),
(1283, 86, 0, 1),
(5029, 86, 0, 1),
(517, 86, 0, 1),
(210, 86, 0, 1),
(5030, 87, 0, 0),
(5031, 87, 0, 0),
(5032, 87, 0, 0),
(2333, 87, 0, 1),
(240, 87, 0, 1),
(494, 87, 0, 1),
(1283, 87, 0, 1),
(5033, 87, 0, 1),
(3374, 87, 0, 1),
(2219, 87, 0, 1),
(3341, 87, 0, 1),
(2802, 87, 0, 1),
(1825, 87, 0, 1),
(3252, 87, 0, 1),
(3508, 87, 0, 1),
(1547, 87, 0, 1),
(5034, 87, 0, 1),
(693, 87, 0, 1),
(186, 87, 0, 1),
(30, 87, 0, 1),
(5035, 87, 0, 1),
(5036, 87, 0, 1),
(4860, 87, 0, 1),
(198, 87, 0, 1),
(5037, 87, 0, 1),
(1165, 87, 0, 1),
(4876, 87, 0, 1),
(3387, 87, 0, 1),
(5038, 87, 0, 1),
(41, 87, 0, 1),
(199, 87, 0, 1),
(3415, 87, 0, 1),
(2690, 87, 0, 1),
(297, 87, 0, 1),
(3258, 87, 0, 1),
(649, 87, 0, 1),
(5039, 87, 0, 1),
(5040, 87, 0, 1),
(2938, 87, 0, 1),
(3134, 87, 0, 1),
(1170, 87, 0, 1),
(139, 87, 0, 1),
(690, 87, 0, 1),
(3281, 87, 0, 1),
(2974, 87, 0, 1),
(210, 87, 0, 1),
(5041, 88, 0, 0),
(5042, 88, 0, 0),
(5043, 88, 0, 0),
(5044, 88, 0, 0),
(2333, 88, 0, 1),
(118, 88, 0, 1),
(32, 88, 0, 1),
(2219, 88, 0, 1),
(5045, 88, 0, 1),
(3596, 88, 0, 1),
(1484, 88, 0, 1),
(866, 88, 0, 1),
(3252, 88, 0, 1),
(4846, 88, 0, 1),
(162, 88, 0, 1),
(74, 88, 0, 1),
(5046, 88, 0, 1),
(3677, 88, 0, 1),
(5047, 88, 0, 1),
(3807, 88, 0, 1),
(34, 88, 0, 1),
(5048, 88, 0, 1),
(2715, 88, 0, 1),
(819, 88, 0, 1),
(5049, 88, 0, 1),
(5050, 88, 0, 1),
(5051, 88, 0, 1),
(5052, 88, 0, 1),
(1903, 88, 0, 1),
(160, 88, 0, 1),
(5053, 88, 0, 1),
(581, 88, 0, 1),
(3450, 88, 0, 1),
(94, 88, 0, 1),
(11, 88, 0, 1),
(4780, 88, 0, 1),
(2685, 88, 0, 1),
(5054, 88, 0, 1),
(1503, 88, 0, 1),
(226, 88, 0, 1),
(795, 88, 0, 1),
(507, 88, 0, 1),
(5055, 88, 0, 1),
(2210, 88, 0, 1),
(2527, 88, 0, 1),
(5056, 88, 0, 1),
(255, 88, 0, 1),
(258, 88, 0, 1),
(3341, 88, 0, 1),
(3789, 88, 0, 1),
(227, 88, 0, 1),
(198, 88, 0, 1),
(199, 88, 0, 1),
(200, 88, 0, 1),
(2696, 88, 0, 1),
(5057, 88, 0, 1),
(3803, 88, 0, 1),
(3859, 88, 0, 1),
(4876, 88, 0, 1),
(4822, 88, 0, 1),
(3254, 88, 0, 1),
(45, 88, 0, 1),
(9, 88, 0, 1),
(5058, 88, 0, 1),
(3264, 88, 0, 1),
(208, 88, 0, 1),
(205, 88, 0, 1),
(3055, 88, 0, 1),
(690, 88, 0, 1),
(2503, 88, 0, 1),
(123, 88, 0, 1),
(391, 88, 0, 1),
(2270, 88, 0, 1),
(251, 88, 0, 1),
(256, 88, 0, 1),
(5059, 88, 0, 1),
(163, 88, 0, 1),
(1440, 88, 0, 1),
(2608, 88, 0, 1),
(2357, 88, 0, 1),
(402, 88, 0, 1),
(3788, 88, 0, 1),
(5060, 88, 0, 1),
(5061, 88, 0, 1),
(546, 88, 0, 1),
(5062, 88, 0, 1),
(4622, 88, 0, 1),
(2793, 88, 0, 1),
(960, 88, 0, 1),
(5063, 88, 0, 1),
(593, 88, 0, 1),
(5064, 88, 0, 1),
(1867, 88, 0, 1),
(4208, 88, 0, 1),
(41, 88, 0, 1),
(5065, 88, 0, 1),
(131, 88, 0, 1),
(290, 88, 0, 1),
(3536, 88, 0, 1),
(454, 88, 0, 1),
(71, 88, 0, 1),
(5066, 88, 0, 1),
(3123, 88, 0, 1),
(5067, 88, 0, 1),
(167, 88, 0, 1),
(27, 88, 0, 1),
(1192, 88, 0, 1),
(5068, 88, 0, 1),
(676, 88, 0, 1),
(362, 88, 0, 1),
(5069, 88, 0, 1),
(2554, 88, 0, 1),
(5070, 88, 0, 1),
(491, 88, 0, 1),
(2607, 88, 0, 1),
(3342, 88, 0, 1),
(494, 88, 0, 1),
(5071, 88, 0, 1),
(2408, 88, 0, 1),
(766, 88, 0, 1),
(5072, 88, 0, 1),
(5073, 88, 0, 1),
(5074, 88, 0, 1),
(3642, 88, 0, 1),
(4345, 88, 0, 1),
(44, 88, 0, 1),
(3951, 88, 0, 1),
(5075, 88, 0, 1),
(839, 88, 0, 1),
(1670, 88, 0, 1),
(4983, 88, 0, 1),
(174, 88, 0, 1),
(601, 88, 0, 1),
(5076, 88, 0, 1),
(3461, 88, 0, 1),
(5077, 88, 0, 1),
(5078, 88, 0, 1),
(1616, 88, 0, 1),
(5079, 88, 0, 1),
(1710, 88, 0, 1),
(5080, 88, 0, 1),
(553, 88, 0, 1),
(2306, 88, 0, 1),
(5081, 88, 0, 1),
(1476, 88, 0, 1),
(5082, 88, 0, 1),
(5083, 88, 0, 1),
(5084, 88, 0, 1),
(462, 88, 0, 1),
(5085, 88, 0, 1),
(5086, 88, 0, 1),
(5087, 88, 0, 1),
(5088, 88, 0, 1),
(478, 88, 0, 1),
(318, 88, 0, 1),
(5089, 88, 0, 1),
(1524, 88, 0, 1),
(5090, 88, 0, 1),
(4923, 88, 0, 1),
(693, 88, 0, 1),
(4240, 88, 0, 1),
(210, 88, 0, 1),
(5091, 89, 0, 0),
(5092, 89, 0, 0),
(2333, 89, 0, 1),
(1484, 89, 0, 1),
(5093, 89, 0, 1),
(5094, 89, 0, 1),
(226, 89, 0, 1),
(5095, 89, 0, 1),
(3272, 89, 0, 1),
(5096, 89, 0, 1),
(205, 89, 0, 1),
(588, 89, 0, 1),
(2504, 89, 0, 1),
(5097, 89, 0, 1),
(4482, 89, 0, 1),
(4032, 89, 0, 1),
(2219, 89, 0, 1),
(3252, 89, 0, 1),
(693, 89, 0, 1),
(2305, 89, 0, 1),
(127, 89, 0, 1),
(131, 89, 0, 1),
(395, 89, 0, 1),
(5098, 89, 0, 1),
(5099, 89, 0, 1),
(459, 89, 0, 1),
(3338, 89, 0, 1),
(92, 89, 0, 1),
(5100, 89, 0, 1),
(960, 89, 0, 1),
(5101, 89, 0, 1),
(454, 89, 0, 1),
(94, 89, 0, 1),
(1837, 89, 0, 1),
(690, 89, 0, 1),
(5102, 89, 0, 1),
(5035, 89, 0, 1),
(839, 89, 0, 1),
(45, 89, 0, 1),
(953, 89, 0, 1),
(2210, 89, 0, 1),
(5103, 89, 0, 1),
(498, 89, 0, 1),
(198, 89, 0, 1),
(1283, 89, 0, 1),
(1165, 89, 0, 1),
(5104, 89, 0, 1),
(1094, 89, 0, 1),
(1093, 89, 0, 1),
(3104, 89, 0, 1),
(2494, 89, 0, 1),
(795, 89, 0, 1),
(1112, 89, 0, 1),
(2696, 89, 0, 1),
(4320, 89, 0, 1),
(1519, 89, 0, 1),
(3123, 89, 0, 1),
(391, 89, 0, 1),
(5105, 89, 0, 1),
(2598, 89, 0, 1),
(27, 89, 0, 1),
(1900, 89, 0, 1),
(2597, 89, 0, 1),
(600, 89, 0, 1),
(5106, 89, 0, 1),
(5107, 89, 0, 1),
(5108, 89, 0, 1),
(4860, 89, 0, 1),
(1570, 89, 0, 1),
(3273, 89, 0, 1),
(155, 89, 0, 1),
(3347, 89, 0, 1),
(5109, 89, 0, 1),
(163, 89, 0, 1),
(317, 89, 0, 1),
(4914, 89, 0, 1),
(654, 89, 0, 1),
(3020, 89, 0, 1),
(2913, 89, 0, 1),
(5110, 89, 0, 1),
(2815, 89, 0, 1),
(4003, 89, 0, 1),
(175, 89, 0, 1),
(5111, 89, 0, 1),
(362, 89, 0, 1),
(3922, 89, 0, 1),
(5112, 89, 0, 1),
(2449, 89, 0, 1),
(494, 89, 0, 1),
(5113, 89, 0, 1),
(3364, 89, 0, 1),
(227, 89, 0, 1),
(200, 89, 0, 1),
(2424, 89, 0, 1),
(5114, 89, 0, 1),
(258, 89, 0, 1),
(3910, 89, 0, 1),
(4586, 89, 0, 1),
(39, 89, 0, 1),
(5115, 89, 0, 1),
(4484, 89, 0, 1),
(5116, 89, 0, 1),
(196, 89, 0, 1),
(5117, 89, 0, 1),
(123, 89, 0, 1),
(5118, 89, 0, 1),
(3284, 89, 0, 1),
(1266, 89, 0, 1),
(3779, 89, 0, 1),
(162, 89, 0, 1),
(9, 89, 0, 1),
(2846, 89, 0, 1),
(5119, 89, 0, 1),
(2206, 89, 0, 1),
(1043, 89, 0, 1),
(319, 89, 0, 1),
(2523, 89, 0, 1),
(536, 89, 0, 1),
(3106, 89, 0, 1),
(181, 89, 0, 1),
(3670, 89, 0, 1),
(4372, 89, 0, 1),
(2731, 89, 0, 1),
(3258, 89, 0, 1),
(3271, 89, 0, 1),
(3691, 89, 0, 1),
(5120, 89, 0, 1),
(5080, 89, 0, 1),
(1476, 89, 0, 1),
(4880, 89, 0, 1),
(4240, 89, 0, 1),
(230, 89, 0, 1),
(5121, 89, 0, 1),
(122, 89, 0, 1),
(3890, 89, 0, 1),
(199, 89, 0, 1),
(3260, 89, 0, 1),
(2528, 89, 0, 1),
(1595, 89, 0, 1),
(1442, 89, 0, 1),
(3450, 89, 0, 1),
(5122, 89, 0, 1),
(160, 89, 0, 1),
(5123, 89, 0, 1),
(3031, 89, 0, 1),
(400, 89, 0, 1),
(5124, 89, 0, 1),
(5125, 89, 0, 1),
(866, 89, 0, 1),
(2193, 89, 0, 1),
(5126, 89, 0, 1),
(2215, 89, 0, 1),
(4363, 89, 0, 1),
(3412, 89, 0, 1),
(684, 89, 0, 1),
(121, 89, 0, 1),
(2382, 89, 0, 1),
(156, 89, 0, 1),
(671, 89, 0, 1),
(5127, 89, 0, 1),
(174, 89, 0, 1),
(5128, 89, 0, 1),
(1310, 89, 0, 1),
(3448, 89, 0, 1),
(452, 89, 0, 1),
(713, 89, 0, 1),
(3411, 89, 0, 1),
(2327, 89, 0, 1),
(41, 89, 0, 1),
(3386, 89, 0, 1),
(5129, 89, 0, 1),
(944, 89, 0, 1),
(5130, 89, 0, 1),
(5131, 89, 0, 1),
(4763, 89, 0, 1),
(957, 89, 0, 1),
(2228, 89, 0, 1),
(5132, 89, 0, 1),
(5133, 89, 0, 1),
(5134, 89, 0, 1),
(5135, 89, 0, 1),
(274, 89, 0, 1),
(5136, 89, 0, 1),
(3352, 89, 0, 1),
(5137, 89, 0, 1),
(2624, 89, 0, 1),
(5138, 89, 0, 1),
(210, 89, 0, 1),
(5139, 90, 0, 0),
(2333, 90, 0, 1),
(5140, 90, 0, 1),
(5141, 90, 0, 1),
(1094, 90, 0, 1),
(45, 90, 0, 1),
(21, 90, 0, 1),
(34, 90, 0, 1),
(5142, 90, 0, 1),
(30, 90, 0, 1),
(494, 90, 0, 1),
(293, 90, 0, 1),
(1463, 90, 0, 1),
(5143, 90, 0, 1),
(5144, 90, 0, 1),
(163, 90, 0, 1),
(500, 90, 0, 1),
(167, 90, 0, 1),
(2325, 90, 0, 1),
(819, 90, 0, 1),
(783, 90, 0, 1),
(5139, 90, 0, 1),
(3338, 90, 0, 1),
(2219, 90, 0, 1),
(2693, 90, 0, 1),
(92, 90, 0, 1),
(131, 90, 0, 1),
(5145, 90, 0, 1),
(175, 90, 0, 1),
(9, 90, 0, 1),
(4021, 90, 0, 1),
(5146, 90, 0, 1),
(121, 90, 0, 1),
(72, 90, 0, 1),
(5147, 90, 0, 1),
(94, 90, 0, 1),
(2869, 90, 0, 1),
(5148, 90, 0, 1),
(32, 90, 0, 1),
(147, 90, 0, 1),
(150, 90, 0, 1),
(3401, 90, 0, 1),
(2685, 90, 0, 1),
(391, 90, 0, 1),
(860, 90, 0, 1),
(3700, 90, 0, 1),
(2215, 90, 0, 1),
(157, 90, 0, 1),
(362, 90, 0, 1),
(5094, 90, 0, 1),
(600, 90, 0, 1),
(258, 90, 0, 1),
(5149, 90, 0, 1),
(5150, 90, 0, 1),
(5151, 90, 0, 1),
(227, 90, 0, 1),
(713, 90, 0, 1),
(567, 90, 0, 1),
(795, 90, 0, 1),
(44, 90, 0, 1),
(5152, 90, 0, 1),
(2206, 90, 0, 1),
(511, 90, 0, 1),
(160, 90, 0, 1),
(4093, 90, 0, 1),
(1595, 90, 0, 1),
(4069, 90, 0, 1),
(4343, 90, 0, 1),
(5153, 90, 0, 1),
(2210, 90, 0, 1),
(1212, 90, 0, 1),
(2849, 90, 0, 1),
(3670, 90, 0, 1),
(5154, 90, 0, 1),
(5155, 90, 0, 1),
(5156, 90, 0, 1),
(593, 90, 0, 1),
(1283, 90, 0, 1),
(462, 90, 0, 1),
(5157, 90, 0, 1),
(3341, 90, 0, 1),
(5158, 90, 0, 1),
(155, 90, 0, 1),
(5159, 90, 0, 1),
(874, 90, 0, 1),
(1043, 90, 0, 1),
(3644, 90, 0, 1),
(960, 90, 0, 1),
(1759, 90, 0, 1),
(2425, 90, 0, 1),
(3252, 90, 0, 1),
(5160, 90, 0, 1),
(2504, 90, 0, 1),
(1710, 90, 0, 1),
(122, 90, 0, 1),
(210, 90, 0, 1),
(5161, 91, 0, 0),
(5162, 91, 0, 0),
(2333, 91, 0, 1),
(2321, 91, 0, 1),
(5163, 91, 0, 1),
(2219, 91, 0, 1),
(3275, 91, 0, 1),
(2847, 91, 0, 1),
(4340, 91, 0, 1),
(2693, 91, 0, 1),
(39, 91, 0, 1),
(5164, 91, 0, 1),
(5165, 91, 0, 1),
(3706, 91, 0, 1),
(2848, 91, 0, 1),
(2706, 91, 0, 1),
(454, 91, 0, 1),
(5166, 91, 0, 1),
(1179, 91, 0, 1),
(5167, 91, 0, 1),
(1212, 91, 0, 1),
(2504, 91, 0, 1),
(3448, 91, 0, 1),
(5168, 91, 0, 1),
(2284, 91, 0, 1),
(258, 91, 0, 1),
(5169, 91, 0, 1),
(94, 91, 0, 1),
(1317, 91, 0, 1),
(2210, 91, 0, 1),
(592, 91, 0, 1),
(1586, 91, 0, 1),
(5170, 91, 0, 1),
(227, 91, 0, 1),
(362, 91, 0, 1),
(2387, 91, 0, 1),
(45, 91, 0, 1),
(277, 91, 0, 1),
(1153, 91, 0, 1),
(3825, 91, 0, 1),
(4597, 91, 0, 1),
(3031, 91, 0, 1),
(200, 91, 0, 1),
(131, 91, 0, 1),
(494, 91, 0, 1),
(2204, 91, 0, 1),
(11, 91, 0, 1),
(713, 91, 0, 1),
(5171, 91, 0, 1),
(3947, 91, 0, 1),
(3788, 91, 0, 1),
(5172, 91, 0, 1),
(2694, 91, 0, 1),
(4361, 91, 0, 1),
(9, 91, 0, 1),
(2608, 91, 0, 1),
(3427, 91, 0, 1),
(5173, 91, 0, 1),
(693, 91, 0, 1),
(2072, 91, 0, 1),
(123, 91, 0, 1),
(5174, 91, 0, 1),
(1825, 91, 0, 1),
(839, 91, 0, 1),
(3543, 91, 0, 1),
(3453, 91, 0, 1),
(5175, 91, 0, 1),
(2527, 91, 0, 1),
(5176, 91, 0, 1),
(3155, 91, 0, 1),
(5177, 91, 0, 1),
(2215, 91, 0, 1),
(3940, 91, 0, 1),
(1471, 91, 0, 1),
(601, 91, 0, 1),
(5178, 91, 0, 1),
(5179, 91, 0, 1),
(884, 91, 0, 1),
(795, 91, 0, 1),
(161, 91, 0, 1),
(2301, 91, 0, 1),
(1558, 91, 0, 1),
(832, 91, 0, 1),
(2850, 91, 0, 1),
(323, 91, 0, 1),
(800, 91, 0, 1),
(1043, 91, 0, 1),
(5180, 91, 0, 1),
(2372, 91, 0, 1),
(186, 91, 0, 1),
(497, 91, 0, 1),
(5181, 91, 0, 1),
(5182, 91, 0, 1),
(230, 91, 0, 1),
(198, 91, 0, 1),
(73, 91, 0, 1),
(2708, 91, 0, 1),
(163, 91, 0, 1),
(623, 91, 0, 1),
(1278, 91, 0, 1),
(5183, 91, 0, 1),
(109, 91, 0, 1),
(874, 91, 0, 1),
(5184, 91, 0, 1),
(5185, 91, 0, 1),
(5186, 91, 0, 1),
(3662, 91, 0, 1),
(5187, 91, 0, 1),
(29, 91, 0, 1),
(5188, 91, 0, 1),
(5189, 91, 0, 1),
(4863, 91, 0, 1),
(3091, 91, 0, 1),
(1136, 91, 0, 1),
(5190, 91, 0, 1),
(4268, 91, 0, 1),
(121, 91, 0, 1),
(3216, 91, 0, 1),
(120, 91, 0, 1),
(259, 91, 0, 1),
(5191, 91, 0, 1),
(5192, 91, 0, 1),
(3066, 91, 0, 1),
(5193, 91, 0, 1),
(5194, 91, 0, 1),
(953, 91, 0, 1),
(240, 91, 0, 1),
(251, 91, 0, 1),
(5195, 91, 0, 1),
(395, 91, 0, 1),
(5196, 91, 0, 1),
(210, 91, 0, 1),
(5197, 92, 0, 0),
(5198, 92, 0, 0),
(5199, 92, 0, 0),
(2333, 92, 0, 1),
(5197, 92, 0, 1),
(2598, 92, 0, 1),
(5200, 92, 0, 1),
(2373, 92, 0, 1),
(5201, 92, 0, 1),
(866, 92, 0, 1),
(2706, 92, 0, 1),
(2379, 92, 0, 1),
(39, 92, 0, 1),
(5202, 92, 0, 1),
(5203, 92, 0, 1),
(4343, 92, 0, 1),
(5204, 92, 0, 1),
(63, 92, 0, 1),
(5205, 92, 0, 1),
(2544, 92, 0, 1),
(199, 92, 0, 1),
(4927, 92, 0, 1),
(5206, 92, 0, 1),
(5207, 92, 0, 1),
(1032, 92, 0, 1),
(5208, 92, 0, 1),
(2412, 92, 0, 1),
(1047, 92, 0, 1),
(668, 92, 0, 1),
(795, 92, 0, 1),
(2938, 92, 0, 1),
(2215, 92, 0, 1),
(393, 92, 0, 1),
(5209, 92, 0, 1),
(3258, 92, 0, 1),
(1283, 92, 0, 1),
(5210, 92, 0, 1),
(362, 92, 0, 1),
(874, 92, 0, 1),
(2193, 92, 0, 1),
(5211, 92, 0, 1),
(454, 92, 0, 1),
(690, 92, 0, 1),
(258, 92, 0, 1),
(3764, 92, 0, 1),
(5212, 92, 0, 1),
(1136, 92, 0, 1),
(45, 92, 0, 1),
(3375, 92, 0, 1),
(5213, 92, 0, 1),
(94, 92, 0, 1),
(5214, 92, 0, 1),
(2464, 92, 0, 1),
(27, 92, 0, 1),
(9, 92, 0, 1),
(157, 92, 0, 1),
(463, 92, 0, 1),
(2382, 92, 0, 1),
(4733, 92, 0, 1),
(297, 92, 0, 1),
(592, 92, 0, 1),
(3134, 92, 0, 1),
(4815, 92, 0, 1),
(1440, 92, 0, 1),
(1353, 92, 0, 1),
(2230, 92, 0, 1),
(593, 92, 0, 1),
(494, 92, 0, 1),
(2204, 92, 0, 1),
(2574, 92, 0, 1),
(5215, 92, 0, 1),
(960, 92, 0, 1),
(1278, 92, 0, 1),
(601, 92, 0, 1),
(1683, 92, 0, 1),
(65, 92, 0, 1),
(2357, 92, 0, 1),
(5216, 92, 0, 1),
(2615, 92, 0, 1),
(5217, 92, 0, 1),
(92, 92, 0, 1),
(230, 92, 0, 1),
(5218, 92, 0, 1),
(491, 92, 0, 1),
(4057, 92, 0, 1),
(5219, 92, 0, 1),
(200, 92, 0, 1),
(4797, 92, 0, 1),
(14, 92, 0, 1),
(1566, 92, 0, 1),
(3164, 92, 0, 1),
(5220, 92, 0, 1),
(3167, 92, 0, 1),
(5221, 92, 0, 1),
(118, 92, 0, 1),
(4523, 92, 0, 1),
(1190, 92, 0, 1),
(3706, 92, 0, 1),
(5222, 92, 0, 1),
(1506, 92, 0, 1),
(3217, 92, 0, 1),
(3264, 92, 0, 1),
(2391, 92, 0, 1),
(4056, 92, 0, 1),
(5223, 92, 0, 1),
(139, 92, 0, 1),
(1653, 92, 0, 1),
(5224, 92, 0, 1),
(5225, 92, 0, 1),
(123, 92, 0, 1),
(507, 92, 0, 1),
(5226, 92, 0, 1),
(1509, 92, 0, 1),
(5227, 92, 0, 1),
(5228, 92, 0, 1),
(2890, 92, 0, 1),
(227, 92, 0, 1),
(5229, 92, 0, 1),
(198, 92, 0, 1),
(5230, 92, 0, 1),
(73, 92, 0, 1),
(3664, 92, 0, 1),
(5231, 92, 0, 1),
(5232, 92, 0, 1),
(3481, 92, 0, 1),
(5233, 92, 0, 1),
(147, 92, 0, 1),
(5234, 92, 0, 1),
(600, 92, 0, 1),
(693, 92, 0, 1),
(1900, 92, 0, 1),
(5235, 92, 0, 1),
(5236, 92, 0, 1),
(5237, 92, 0, 1),
(5238, 92, 0, 1),
(2473, 92, 0, 1),
(2731, 92, 0, 1),
(5239, 92, 0, 1),
(371, 92, 0, 1),
(1903, 92, 0, 1),
(183, 92, 0, 1),
(5240, 92, 0, 1),
(5166, 92, 0, 1),
(5241, 92, 0, 1),
(2266, 92, 0, 1),
(4877, 92, 0, 1),
(5242, 92, 0, 1),
(150, 92, 0, 1),
(5243, 92, 0, 1),
(5244, 92, 0, 1),
(5245, 92, 0, 1),
(2206, 92, 0, 1),
(5246, 92, 0, 1),
(5247, 92, 0, 1),
(5248, 92, 0, 1),
(131, 92, 0, 1),
(2240, 92, 0, 1),
(2781, 92, 0, 1),
(408, 92, 0, 1),
(5249, 92, 0, 1),
(5250, 92, 0, 1),
(295, 92, 0, 1),
(1111, 92, 0, 1),
(5251, 92, 0, 1),
(74, 92, 0, 1),
(3515, 92, 0, 1),
(2411, 92, 0, 1),
(1570, 92, 0, 1),
(210, 92, 0, 1),
(5252, 93, 0, 0),
(5253, 93, 0, 0),
(5254, 93, 0, 1),
(5255, 93, 0, 1),
(5256, 93, 0, 1),
(2193, 93, 0, 1),
(45, 93, 0, 1),
(5257, 93, 0, 1),
(1283, 93, 0, 1),
(5258, 93, 0, 1),
(240, 93, 0, 1),
(186, 93, 0, 1),
(1099, 93, 0, 1),
(2938, 93, 0, 1),
(5259, 93, 0, 1),
(1043, 93, 0, 1),
(2215, 93, 0, 1),
(362, 93, 0, 1),
(297, 93, 0, 1),
(1179, 93, 0, 1),
(1821, 93, 0, 1),
(454, 93, 0, 1),
(94, 93, 0, 1),
(1212, 93, 0, 1),
(5260, 93, 0, 1),
(1447, 93, 0, 1),
(5261, 93, 0, 1),
(5262, 93, 0, 1),
(2256, 93, 0, 1),
(1407, 93, 0, 1),
(3342, 93, 0, 1),
(1616, 93, 0, 1),
(199, 93, 0, 1),
(5263, 93, 0, 1),
(1548, 93, 0, 1),
(5264, 93, 0, 1),
(5017, 93, 0, 1),
(5265, 93, 0, 1),
(2283, 93, 0, 1),
(256, 93, 0, 1),
(226, 93, 0, 1),
(2305, 93, 0, 1),
(5266, 93, 0, 1),
(163, 93, 0, 1),
(5267, 93, 0, 1),
(957, 93, 0, 1),
(401, 93, 0, 1),
(4551, 93, 0, 1),
(183, 93, 0, 1),
(608, 93, 0, 1),
(727, 93, 0, 1),
(3407, 93, 0, 1),
(5268, 93, 0, 1),
(136, 93, 0, 1),
(3252, 93, 0, 1),
(391, 93, 0, 1),
(1280, 93, 0, 1),
(1877, 93, 0, 1),
(1100, 93, 0, 1),
(5269, 93, 0, 1),
(516, 93, 0, 1),
(5270, 93, 0, 1),
(1192, 93, 0, 1),
(121, 93, 0, 1),
(3125, 93, 0, 1),
(5271, 93, 0, 1),
(175, 93, 0, 1),
(1278, 93, 0, 1),
(3965, 93, 0, 1),
(5272, 93, 0, 1),
(140, 93, 0, 1),
(2894, 93, 0, 1),
(5273, 93, 0, 1),
(494, 93, 0, 1),
(5274, 93, 0, 1),
(5275, 93, 0, 1),
(690, 93, 0, 1),
(2242, 93, 0, 1),
(123, 93, 0, 1),
(5276, 93, 0, 1),
(713, 93, 0, 1),
(3677, 93, 0, 1),
(1136, 93, 0, 1),
(5277, 93, 0, 1),
(118, 93, 0, 1),
(5206, 93, 0, 1),
(5278, 93, 0, 1),
(1032, 93, 0, 1),
(2340, 93, 0, 1),
(3148, 93, 0, 1),
(2703, 93, 0, 1),
(2830, 93, 0, 1),
(563, 93, 0, 1),
(2270, 93, 0, 1),
(1900, 93, 0, 1),
(5279, 93, 0, 1),
(1541, 93, 0, 1),
(5280, 93, 0, 1),
(5281, 93, 0, 1),
(197, 93, 0, 1),
(1355, 93, 0, 1),
(2239, 93, 0, 1),
(693, 93, 0, 1),
(1225, 93, 0, 1),
(5282, 93, 0, 1),
(5283, 93, 0, 1),
(551, 93, 0, 1),
(274, 93, 0, 1),
(5284, 93, 0, 1),
(3050, 93, 0, 1),
(1965, 93, 0, 1),
(4597, 93, 0, 1),
(649, 93, 0, 1),
(3217, 93, 0, 1),
(9, 93, 0, 1),
(5285, 93, 0, 1),
(2219, 93, 0, 1),
(224, 93, 0, 1),
(2633, 93, 0, 1),
(507, 93, 0, 1),
(5286, 93, 0, 1),
(4869, 93, 0, 1),
(3069, 93, 0, 1),
(2173, 93, 0, 1),
(2204, 93, 0, 1),
(49, 93, 0, 1),
(5287, 93, 0, 1),
(1303, 93, 0, 1),
(5288, 93, 0, 1),
(1442, 93, 0, 1),
(2310, 93, 0, 1),
(3917, 93, 0, 1),
(5289, 93, 0, 1),
(5290, 93, 0, 1),
(5291, 93, 0, 1),
(5292, 93, 0, 1),
(676, 93, 0, 1),
(823, 93, 0, 1),
(84, 93, 0, 1),
(5293, 93, 0, 1),
(147, 93, 0, 1),
(196, 93, 0, 1),
(180, 93, 0, 1),
(5294, 93, 0, 1),
(1566, 93, 0, 1),
(2671, 93, 0, 1),
(483, 93, 0, 1),
(2210, 93, 0, 1),
(361, 93, 0, 1),
(1036, 93, 0, 1),
(5295, 93, 0, 1),
(1069, 93, 0, 1),
(4534, 93, 0, 1),
(5296, 93, 0, 1),
(2695, 93, 0, 1),
(145, 93, 0, 1),
(599, 93, 0, 1),
(5297, 93, 0, 1),
(5298, 93, 0, 1),
(1047, 93, 0, 1),
(5299, 93, 0, 1),
(27, 93, 0, 1),
(698, 93, 0, 1),
(5300, 93, 0, 1),
(5301, 93, 0, 1),
(14, 93, 0, 1),
(4103, 93, 0, 1),
(582, 93, 0, 1),
(5302, 93, 0, 1),
(654, 93, 0, 1),
(609, 93, 0, 1),
(5303, 93, 0, 1),
(4201, 93, 0, 1),
(2284, 93, 0, 1),
(5304, 93, 0, 1),
(5305, 93, 0, 1),
(285, 93, 0, 1),
(5306, 93, 0, 1),
(127, 93, 0, 1),
(2599, 93, 0, 1),
(4983, 93, 0, 1),
(139, 93, 0, 1),
(5307, 93, 0, 1),
(463, 93, 0, 1),
(4329, 93, 0, 1),
(5308, 93, 0, 1),
(161, 93, 0, 1),
(905, 93, 0, 1),
(65, 93, 0, 1),
(5309, 93, 0, 1),
(5310, 93, 0, 1),
(787, 93, 0, 1),
(28, 93, 0, 1),
(5311, 93, 0, 1),
(5312, 93, 0, 1),
(3547, 93, 0, 1),
(2818, 93, 0, 1),
(210, 93, 0, 1),
(5313, 94, 0, 0),
(5314, 94, 0, 0),
(5315, 94, 0, 0),
(5316, 94, 0, 0),
(2333, 94, 0, 1),
(2963, 94, 0, 1),
(2485, 94, 0, 1),
(32, 94, 0, 1),
(5317, 94, 0, 1),
(5318, 94, 0, 1),
(3133, 94, 0, 1),
(63, 94, 0, 1),
(3954, 94, 0, 1),
(118, 94, 0, 1),
(5319, 94, 0, 1),
(2240, 94, 0, 1),
(589, 94, 0, 1),
(2206, 94, 0, 1),
(5320, 94, 0, 1),
(195, 94, 0, 1),
(1036, 94, 0, 1),
(5321, 94, 0, 1),
(3240, 94, 0, 1),
(9, 94, 0, 1),
(3244, 94, 0, 1),
(494, 94, 0, 1),
(49, 94, 0, 1),
(1126, 94, 0, 1),
(361, 94, 0, 1),
(5234, 94, 0, 1),
(5322, 94, 0, 1),
(698, 94, 0, 1),
(230, 94, 0, 1),
(4678, 94, 0, 1),
(5323, 94, 0, 1),
(39, 94, 0, 1),
(297, 94, 0, 1),
(395, 94, 0, 1),
(314, 94, 0, 1),
(3129, 94, 0, 1),
(5324, 94, 0, 1),
(3038, 94, 0, 1),
(2222, 94, 0, 1),
(4066, 94, 0, 1),
(69, 94, 0, 1),
(5325, 94, 0, 1),
(4340, 94, 0, 1),
(4170, 94, 0, 1),
(30, 94, 0, 1),
(3784, 94, 0, 1),
(23, 94, 0, 1),
(56, 94, 0, 1),
(4302, 94, 0, 1),
(5326, 94, 0, 1),
(454, 94, 0, 1),
(5327, 94, 0, 1),
(226, 94, 0, 1),
(5328, 94, 0, 1),
(4370, 94, 0, 1),
(5329, 94, 0, 1),
(286, 94, 0, 1),
(3031, 94, 0, 1),
(4615, 94, 0, 1),
(5330, 94, 0, 1),
(261, 94, 0, 1),
(145, 94, 0, 1),
(5331, 94, 0, 1),
(45, 94, 0, 1),
(94, 94, 0, 1),
(5332, 94, 0, 1),
(5333, 94, 0, 1),
(1337, 94, 0, 1),
(3032, 94, 0, 1),
(4026, 94, 0, 1),
(800, 94, 0, 1),
(625, 94, 0, 1),
(198, 94, 0, 1),
(5334, 94, 0, 1),
(5335, 94, 0, 1),
(245, 94, 0, 1),
(5336, 94, 0, 1),
(5337, 94, 0, 1),
(2494, 94, 0, 1),
(131, 94, 0, 1),
(5338, 94, 0, 1),
(507, 94, 0, 1),
(2643, 94, 0, 1),
(362, 94, 0, 1),
(3155, 94, 0, 1),
(4867, 94, 0, 1),
(5339, 94, 0, 1),
(485, 94, 0, 1),
(5340, 94, 0, 1),
(1440, 94, 0, 1),
(4649, 94, 0, 1),
(27, 94, 0, 1),
(5341, 94, 0, 1),
(5342, 94, 0, 1);
INSERT INTO `search_keywords` (`keyword`, `foreign_ID`, `table_name`, `position`) VALUES
(210, 94, 0, 1),
(5343, 95, 0, 0),
(5344, 95, 0, 0),
(5345, 95, 0, 0),
(2333, 95, 0, 1),
(3369, 95, 0, 1),
(5283, 95, 0, 1),
(5346, 95, 0, 1),
(408, 95, 0, 1),
(1099, 95, 0, 1),
(593, 95, 0, 1),
(1036, 95, 0, 1),
(1509, 95, 0, 1),
(5347, 95, 0, 1),
(5348, 95, 0, 1),
(2193, 95, 0, 1),
(4063, 95, 0, 1),
(118, 95, 0, 1),
(5349, 95, 0, 1),
(5350, 95, 0, 1),
(45, 95, 0, 1),
(1625, 95, 0, 1),
(2504, 95, 0, 1),
(5351, 95, 0, 1),
(4919, 95, 0, 1),
(1817, 95, 0, 1),
(2219, 95, 0, 1),
(5352, 95, 0, 1),
(2690, 95, 0, 1),
(5353, 95, 0, 1),
(5354, 95, 0, 1),
(230, 95, 0, 1),
(186, 95, 0, 1),
(2980, 95, 0, 1),
(5355, 95, 0, 1),
(1096, 95, 0, 1),
(362, 95, 0, 1),
(2173, 95, 0, 1),
(9, 95, 0, 1),
(215, 95, 0, 1),
(1280, 95, 0, 1),
(3210, 95, 0, 1),
(2456, 95, 0, 1),
(3876, 95, 0, 1),
(2759, 95, 0, 1),
(563, 95, 0, 1),
(625, 95, 0, 1),
(5356, 95, 0, 1),
(3143, 95, 0, 1),
(5357, 95, 0, 1),
(581, 95, 0, 1),
(3091, 95, 0, 1),
(599, 95, 0, 1),
(183, 95, 0, 1),
(2215, 95, 0, 1),
(5358, 95, 0, 1),
(2914, 95, 0, 1),
(2291, 95, 0, 1),
(480, 95, 0, 1),
(3979, 95, 0, 1),
(3390, 95, 0, 1),
(5359, 95, 0, 1),
(1008, 95, 0, 1),
(27, 95, 0, 1),
(78, 95, 0, 1),
(437, 95, 0, 1),
(3975, 95, 0, 1),
(2114, 95, 0, 1),
(5360, 95, 0, 1),
(693, 95, 0, 1),
(2210, 95, 0, 1),
(255, 95, 0, 1),
(727, 95, 0, 1),
(180, 95, 0, 1),
(5361, 95, 0, 1),
(5362, 95, 0, 1),
(205, 95, 0, 1),
(1283, 95, 0, 1),
(163, 95, 0, 1),
(5363, 95, 0, 1),
(1965, 95, 0, 1),
(5364, 95, 0, 1),
(1024, 95, 0, 1),
(3486, 95, 0, 1),
(94, 95, 0, 1),
(5365, 95, 0, 1),
(174, 95, 0, 1),
(454, 95, 0, 1),
(3494, 95, 0, 1),
(5366, 95, 0, 1),
(3833, 95, 0, 1),
(494, 95, 0, 1),
(227, 95, 0, 1),
(11, 95, 0, 1),
(2196, 95, 0, 1),
(3849, 95, 0, 1),
(5367, 95, 0, 1),
(5368, 95, 0, 1),
(5369, 95, 0, 1),
(258, 95, 0, 1),
(5370, 95, 0, 1),
(73, 95, 0, 1),
(1303, 95, 0, 1),
(601, 95, 0, 1),
(2208, 95, 0, 1),
(4025, 95, 0, 1),
(2802, 95, 0, 1),
(2847, 95, 0, 1),
(2635, 95, 0, 1),
(391, 95, 0, 1),
(3206, 95, 0, 1),
(485, 95, 0, 1),
(3427, 95, 0, 1),
(5371, 95, 0, 1),
(5372, 95, 0, 1),
(4405, 95, 0, 1),
(4597, 95, 0, 1),
(5373, 95, 0, 1),
(5374, 1, 2, 0),
(5405, 6, 8, 1),
(5406, 6, 8, 1),
(5407, 6, 8, 1);

-- --------------------------------------------------------

--
-- Table structure for table `sent_notifications`
--

CREATE TABLE IF NOT EXISTS `sent_notifications` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `timestamp` int(10) NOT NULL,
  `recipient` varchar(255) DEFAULT NULL,
  `subject` varchar(255) NOT NULL,
  `body` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

--
-- Dumping data for table `sent_notifications`
--

INSERT INTO `sent_notifications` (`id`, `timestamp`, `recipient`, `subject`, `body`) VALUES
(1, 1426222770, 'student@student.com (a aaa)', 'Registration email', 'Dear user alert(1),\r\n\r\nWelcome to our eLearning platform. \r\nYour account was successfully created with the following personal information:\r\n\r\nLogin: student2\r\nFirst name: alert(1)\r\nSurname: alert(2)\r\nEmail address: student@student.com\r\nLanguage: English\r\nComments: alert(3)\r\n\r\nFor further information you may contact the system administrator through the following URL: http://app15.com/www/index.php?ctg=contact \r\n\r\nWith kind regards\r\n---\r\nThe administration group\r\neFront\r\nRefreshing eLearning\r\n');

-- --------------------------------------------------------

--
-- Table structure for table `surveys`
--

CREATE TABLE IF NOT EXISTS `surveys` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `survey_code` varchar(150) DEFAULT NULL,
  `survey_name` varchar(150) DEFAULT NULL,
  `survey_info` mediumtext,
  `author` varchar(100) DEFAULT NULL,
  `lang` varchar(50) DEFAULT NULL,
  `start_date` int(10) unsigned DEFAULT NULL,
  `end_date` int(10) unsigned DEFAULT NULL,
  `lessons_ID` mediumint(8) unsigned NOT NULL,
  `status` tinyint(1) DEFAULT '0',
  `start_text` mediumtext,
  `end_text` mediumtext,
  PRIMARY KEY (`id`),
  KEY `survey_code` (`survey_code`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `survey_questions_done`
--

CREATE TABLE IF NOT EXISTS `survey_questions_done` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `users_LOGIN` varchar(100) NOT NULL,
  `surveys_ID` mediumint(8) unsigned NOT NULL,
  `question_ID` mediumint(8) unsigned NOT NULL,
  `user_answers` mediumtext NOT NULL,
  `submited` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `tests`
--

CREATE TABLE IF NOT EXISTS `tests` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  `content_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `lessons_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `name` varchar(255) NOT NULL DEFAULT '',
  `mastery_score` tinyint(4) unsigned NOT NULL DEFAULT '0',
  `description` text,
  `options` text,
  `publish` tinyint(1) DEFAULT '1',
  `keep_best` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=5 ;

--
-- Dumping data for table `tests`
--

INSERT INTO `tests` (`id`, `active`, `content_ID`, `lessons_ID`, `name`, `mastery_score`, `description`, `options`, `publish`, `keep_best`) VALUES
(1, 1, 2, 1, 'General concepts test', 0, '', 'a:8:{s:8:"duration";s:3:"300";s:8:"redoable";s:1:"2";s:8:"onebyone";s:1:"1";s:7:"answers";s:1:"1";s:13:"given_answers";s:1:"1";s:17:"shuffle_questions";s:1:"0";s:15:"shuffle_answers";s:1:"0";s:17:"general_threshold";i:50;}', 1, 0),
(2, 1, 30, 2, 'Maya History Test', 50, '<p><span style="font-size: 13px;">This is a generic test about Maya History with 6 generic questions.<br /> Note: All questions and possible answers are shuffled with each test view.<br /> <br /> <strong> </strong></span></p>', 'a:21:{s:8:"duration";i:900;s:8:"redoable";s:2:"20";s:8:"onebyone";s:1:"0";s:7:"answers";s:1:"1";s:13:"given_answers";s:1:"1";s:17:"shuffle_questions";s:1:"1";s:15:"shuffle_answers";s:1:"1";s:17:"general_threshold";i:50;s:12:"master_score";i:50;s:11:"random_pool";i:0;s:17:"user_configurable";i:0;s:16:"maintain_history";s:1:"5";s:12:"display_list";s:1:"0";s:10:"pause_test";s:1:"1";s:15:"display_weights";s:1:"1";s:12:"only_forward";s:1:"0";s:10:"answer_all";s:1:"0";s:10:"redo_wrong";s:1:"0";s:8:"redirect";s:1:"0";s:13:"assign_to_new";N;s:20:"automatic_assignment";N;}', 1, 0),
(3, 1, 54, 3, 'Small self-assesment test', 50, '<p><span style="font-family: trebuchet ms,geneva; font-size: 16px;"><strong>This is a small test that will check your basic programming skills</strong></span></p>', 'a:21:{s:8:"duration";i:180;s:8:"redoable";i:0;s:8:"onebyone";s:1:"0";s:7:"answers";s:1:"0";s:13:"given_answers";s:1:"0";s:17:"shuffle_questions";s:1:"1";s:15:"shuffle_answers";s:1:"1";s:12:"master_score";i:50;s:11:"random_pool";i:0;s:17:"user_configurable";i:0;s:16:"maintain_history";s:1:"5";s:12:"display_list";s:1:"0";s:10:"pause_test";s:1:"1";s:15:"display_weights";s:1:"1";s:12:"only_forward";s:1:"0";s:10:"answer_all";s:1:"0";s:10:"redo_wrong";s:1:"0";s:8:"redirect";s:1:"0";s:17:"general_threshold";i:50;s:13:"assign_to_new";N;s:20:"automatic_assignment";N;}', 1, 0),
(4, 1, 78, 4, 'A small programming test', 60, 'A small programming test\r\n', 'a:10:{s:8:"duration";i:300;s:8:"redoable";s:1:"3";s:8:"onebyone";s:1:"0";s:7:"answers";s:1:"1";s:13:"given_answers";s:1:"1";s:17:"shuffle_questions";s:1:"0";s:15:"shuffle_answers";s:1:"0";s:17:"general_threshold";N;s:13:"assign_to_new";s:0:"";s:20:"automatic_assignment";s:0:"";}', 1, 0);

-- --------------------------------------------------------

--
-- Table structure for table `tests_to_questions`
--

CREATE TABLE IF NOT EXISTS `tests_to_questions` (
  `tests_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `questions_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `weight` tinyint(1) unsigned NOT NULL DEFAULT '1',
  `previous_question_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`tests_ID`,`questions_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tests_to_questions`
--

INSERT INTO `tests_to_questions` (`tests_ID`, `questions_ID`, `weight`, `previous_question_ID`) VALUES
(1, 1, 1, 167),
(1, 2, 1, 164),
(1, 3, 1, 0),
(2, 4, 1, 0),
(2, 5, 1, 4),
(2, 6, 1, 7),
(2, 7, 1, 5),
(2, 8, 1, 6),
(2, 9, 1, 8),
(3, 10, 1, 13),
(3, 11, 1, 12),
(3, 12, 1, 10),
(3, 13, 1, 14),
(3, 14, 1, 0),
(4, 19, 1, 0),
(4, 20, 1, 19),
(4, 21, 1, 20),
(4, 22, 1, 21),
(4, 23, 1, 22);

-- --------------------------------------------------------

--
-- Table structure for table `themes`
--

CREATE TABLE IF NOT EXISTS `themes` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `title` varchar(100) DEFAULT NULL,
  `author` varchar(100) DEFAULT NULL,
  `version` varchar(10) DEFAULT NULL,
  `description` text,
  `options` text,
  `layout` text,
  `path` text NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=9 ;

--
-- Dumping data for table `themes`
--

INSERT INTO `themes` (`id`, `name`, `title`, `author`, `version`, `description`, `options`, `layout`, `path`) VALUES
(1, 'default', 'Default eFront Theme', 'eFront team', '1.0', 'The default eFront theme', 'a:9:{s:11:"show_header";s:1:"1";s:11:"show_footer";s:1:"1";s:17:"sidebar_interface";s:1:"0";s:13:"sidebar_width";s:3:"175";s:17:"images_displaying";s:1:"0";s:16:"toolbar_position";s:5:"right";s:6:"locked";s:1:"0";s:4:"logo";s:23:"default/images/logo.png";s:7:"favicon";s:26:"default/images/favicon.png";}', 'a:1:{s:9:"positions";a:4:{s:6:"layout";s:5:"three";s:8:"leftList";a:2:{i:0;s:5:"login";i:1;s:6:"online";}s:10:"centerList";a:1:{i:0;s:7:"lessons";}s:9:"rightList";a:2:{i:0;s:4:"news";i:1;s:15:"selectedLessons";}}}', 'default/'),
(2, 'modern', 'A modern eFront theme', 'Athanasios Papagelis', '1.0', 'A modern eFront theme', 'a:7:{s:11:"show_header";s:1:"2";s:11:"show_footer";s:1:"1";s:17:"sidebar_interface";s:1:"2";s:17:"images_displaying";s:1:"2";s:16:"toolbar_position";s:5:"right";s:6:"locked";s:1:"0";s:13:"sidebar_width";i:175;}', 'a:1:{s:9:"positions";a:4:{s:6:"layout";s:4:"left";s:8:"leftList";a:3:{i:0;s:5:"login";i:1;s:6:"online";i:2;s:15:"selectedLessons";}s:10:"centerList";a:2:{i:0;s:4:"news";i:1;s:7:"lessons";}s:9:"rightList";a:0:{}}}', 'modern/'),
(3, 'pad', 'A theme optimized for ipad-like devices', 'Athanasios Papagelis', '1.0', 'A theme optimized for ipad-like devices', 'a:7:{s:11:"show_header";s:1:"2";s:11:"show_footer";s:1:"1";s:17:"sidebar_interface";s:1:"2";s:17:"images_displaying";s:1:"2";s:16:"toolbar_position";s:5:"right";s:6:"locked";s:1:"0";s:13:"sidebar_width";i:175;}', 'a:1:{s:9:"positions";a:4:{s:6:"layout";s:4:"left";s:8:"leftList";a:3:{i:0;s:5:"login";i:1;s:6:"online";i:2;s:15:"selectedLessons";}s:10:"centerList";a:2:{i:0;s:4:"news";i:1;s:7:"lessons";}s:9:"rightList";a:0:{}}}', 'pad/'),
(4, 'IE6', 'IE6 theme', 'eFront team', '1.0', '\n		eFront IE6 theme\n	', 'a:5:{s:11:"show_header";s:1:"1";s:11:"show_footer";s:1:"1";s:13:"sidebar_width";s:3:"175";s:17:"sidebar_interface";s:1:"0";s:17:"images_displaying";s:1:"0";}', 'a:1:{s:9:"positions";a:4:{s:6:"layout";s:5:"three";s:8:"leftList";a:2:{i:0;s:5:"login";i:1;s:6:"online";}s:10:"centerList";a:1:{i:0;s:7:"lessons";}s:9:"rightList";a:2:{i:0;s:4:"news";i:1;s:15:"selectedLessons";}}}', 'ie6/'),
(5, 'green', 'Green theme', 'eFront team', '1.0', '\n		eFront green theme\n	', 'a:7:{s:11:"show_header";s:1:"1";s:11:"show_footer";s:1:"1";s:13:"sidebar_width";s:3:"175";s:17:"sidebar_interface";s:1:"0";s:17:"images_displaying";s:1:"0";s:4:"logo";s:21:"green/images/logo.png";s:7:"favicon";s:24:"green/images/favicon.png";}', 'a:1:{s:9:"positions";a:4:{s:6:"layout";s:5:"three";s:8:"leftList";a:2:{i:0;s:5:"login";i:1;s:6:"online";}s:10:"centerList";a:1:{i:0;s:7:"lessons";}s:9:"rightList";a:2:{i:0;s:4:"news";i:1;s:15:"selectedLessons";}}}', 'green/'),
(6, 'blue_html5', 'A simple blue theme with varying width', 'Athanasios Papagelis', '1.0', 'A simple blue theme with varying width', 'a:7:{s:11:"show_header";s:1:"2";s:11:"show_footer";s:1:"1";s:17:"sidebar_interface";s:1:"2";s:17:"images_displaying";s:1:"2";s:16:"toolbar_position";s:5:"right";s:6:"locked";s:1:"0";s:13:"sidebar_width";i:175;}', 'a:1:{s:9:"positions";a:4:{s:6:"layout";s:4:"left";s:8:"leftList";a:3:{i:0;s:5:"login";i:1;s:6:"online";i:2;s:15:"selectedLessons";}s:10:"centerList";a:2:{i:0;s:4:"news";i:1;s:7:"lessons";}s:9:"rightList";a:0:{}}}', 'blue_html5/'),
(7, 'mobile', 'Mobile eFront Theme', 'eFront team', '1.0', 'The mobile eFront theme', 'a:5:{s:11:"show_header";s:1:"2";s:11:"show_footer";s:1:"1";s:17:"sidebar_interface";s:1:"2";s:17:"images_displaying";s:1:"2";s:13:"sidebar_width";i:175;}', 'a:1:{s:9:"positions";a:4:{s:6:"layout";s:4:"left";s:8:"leftList";a:3:{i:0;s:5:"login";i:1;s:6:"online";i:2;s:15:"selectedLessons";}s:10:"centerList";a:2:{i:0;s:4:"news";i:1;s:7:"lessons";}s:9:"rightList";a:0:{}}}', 'mobile/'),
(8, 'blue', 'Blue eFront Theme', 'eFront team', '1.0', 'Blue eFront theme', 'a:7:{s:11:"show_header";s:1:"2";s:11:"show_footer";s:1:"1";s:17:"sidebar_interface";s:1:"2";s:17:"images_displaying";s:1:"2";s:16:"toolbar_position";s:5:"right";s:6:"locked";s:1:"0";s:13:"sidebar_width";i:175;}', 'a:1:{s:9:"positions";a:4:{s:6:"layout";s:4:"left";s:8:"leftList";a:3:{i:0;s:5:"login";i:1;s:6:"online";i:2;s:15:"selectedLessons";}s:10:"centerList";a:2:{i:0;s:4:"news";i:1;s:7:"lessons";}s:9:"rightList";a:0:{}}}', 'blue/');

-- --------------------------------------------------------

--
-- Table structure for table `tokens`
--

CREATE TABLE IF NOT EXISTS `tokens` (
  `token` char(30) NOT NULL,
  `status` text NOT NULL,
  `users_LOGIN` varchar(100) DEFAULT NULL,
  `create_timestamp` int(10) unsigned NOT NULL,
  `expired` tinyint(1) NOT NULL,
  PRIMARY KEY (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `login` varchar(100) NOT NULL,
  `password` char(32) NOT NULL,
  `email` varchar(150) NOT NULL,
  `languages_NAME` varchar(50) NOT NULL,
  `timezone` varchar(100) DEFAULT '',
  `name` varchar(100) NOT NULL,
  `surname` varchar(100) NOT NULL,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  `comments` text,
  `user_type` varchar(50) NOT NULL DEFAULT 'student',
  `timestamp` int(10) unsigned NOT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `pending` tinyint(1) NOT NULL DEFAULT '0',
  `user_types_ID` mediumint(8) DEFAULT '0',
  `additional_accounts` text,
  `viewed_license` tinyint(1) DEFAULT '0',
  `status` varchar(255) DEFAULT '',
  `short_description` text,
  `balance` float DEFAULT '0',
  `archive` int(10) unsigned DEFAULT '0',
  `dashboard_positions` text,
  `need_mod_init` tinyint(1) DEFAULT '0',
  `autologin` char(32) DEFAULT NULL,
  `need_pwd_change` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`login`),
  KEY `id` (`id`),
  KEY `active` (`active`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=5 ;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `login`, `password`, `email`, `languages_NAME`, `timezone`, `name`, `surname`, `active`, `comments`, `user_type`, `timestamp`, `avatar`, `pending`, `user_types_ID`, `additional_accounts`, `viewed_license`, `status`, `short_description`, `balance`, `archive`, `dashboard_positions`, `need_mod_init`, `autologin`, `need_pwd_change`) VALUES
(1, 'admin', '9c3952b9aa9daefe38cb0c9399b2fc91', 'admin@adminc.om', 'english', '', 'System', 'Administrator', 1, NULL, 'administrator', 1426217774, NULL, 0, 0, 'a:2:{i:0;s:7:"student";i:1;s:9:"professor";}', 0, '', NULL, 0, 0, NULL, 0, NULL, 0),
(2, 'professor', 'da18be534843cf9f9edd60c89de6a8e7', 'admin@adminc.om', 'english', '', 'Default', 'Professor', 1, NULL, 'professor', 1426217774, NULL, 0, 0, 'a:2:{i:0;s:5:"admin";i:1;s:7:"student";}', 0, '', NULL, 0, 0, NULL, 0, NULL, 0),
(3, 'student', '04aed36b7da8d1b5d8c892cf91486cdb', 'admin@adminc.om', 'english', '', 'Default', 'Student', 1, NULL, 'student', 1426217774, NULL, 0, 0, 'a:2:{i:0;s:5:"admin";i:1;s:9:"professor";}', 0, '', NULL, 0, 0, NULL, 0, NULL, 0),
(4, 'student2', '68915c0533c05fe2efe59988b16cc157', 'student@student.com', 'english', 'Pacific/Kwajalein', 'a', 'aaa', 1, 'alert(3)', 'student', 1426222611, '6', 0, 0, NULL, 0, '', '', 0, 0, NULL, 0, NULL, 0);

-- --------------------------------------------------------

--
-- Table structure for table `users_to_chatrooms`
--

CREATE TABLE IF NOT EXISTS `users_to_chatrooms` (
  `users_LOGIN` varchar(100) NOT NULL,
  `chatrooms_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `users_USER_TYPE` varchar(50) NOT NULL,
  `timestamp` int(10) unsigned NOT NULL,
  PRIMARY KEY (`users_LOGIN`,`chatrooms_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `users_to_content`
--

CREATE TABLE IF NOT EXISTS `users_to_content` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `users_LOGIN` varchar(100) NOT NULL,
  `content_ID` mediumint(8) unsigned NOT NULL,
  `success_status` varchar(15) DEFAULT 'unknown',
  `timestamp` int(10) unsigned NOT NULL,
  `score` float DEFAULT '0',
  `entry` varchar(15) DEFAULT '',
  `total_time` int(10) unsigned NOT NULL,
  `suspend_data` longtext,
  `archive` tinyint(1) NOT NULL DEFAULT '0',
  `time_start` int(10) unsigned DEFAULT NULL,
  `time_end` int(10) unsigned DEFAULT NULL,
  `pending` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `users_to_courses`
--

CREATE TABLE IF NOT EXISTS `users_to_courses` (
  `users_LOGIN` varchar(100) NOT NULL,
  `courses_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `active` tinyint(1) NOT NULL DEFAULT '0',
  `archive` int(10) unsigned DEFAULT '0',
  `from_timestamp` int(10) unsigned DEFAULT NULL,
  `user_type` varchar(50) DEFAULT NULL,
  `completed` tinyint(1) NOT NULL DEFAULT '0',
  `score` int(11) NOT NULL DEFAULT '0',
  `issued_certificate` text,
  `comments` text,
  `to_timestamp` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`users_LOGIN`,`courses_ID`),
  KEY `archive` (`archive`),
  KEY `users_LOGIN` (`users_LOGIN`),
  KEY `courses_ID` (`courses_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `users_to_courses`
--

INSERT INTO `users_to_courses` (`users_LOGIN`, `courses_ID`, `active`, `archive`, `from_timestamp`, `user_type`, `completed`, `score`, `issued_certificate`, `comments`, `to_timestamp`) VALUES
('professor', 1, 1, 0, 1426217795, 'professor', 0, 0, '', '', 0),
('student', 1, 1, 0, 1426217795, 'student', 0, 0, '', '', 0);

-- --------------------------------------------------------

--
-- Table structure for table `users_to_done_surveys`
--

CREATE TABLE IF NOT EXISTS `users_to_done_surveys` (
  `surveys_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `users_LOGIN` varchar(100) NOT NULL DEFAULT '',
  `done` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`users_LOGIN`,`surveys_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `users_to_groups`
--

CREATE TABLE IF NOT EXISTS `users_to_groups` (
  `groups_ID` mediumint(8) unsigned NOT NULL,
  `users_LOGIN` varchar(100) NOT NULL,
  PRIMARY KEY (`groups_ID`,`users_LOGIN`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `users_to_lessons`
--

CREATE TABLE IF NOT EXISTS `users_to_lessons` (
  `users_LOGIN` varchar(100) NOT NULL,
  `lessons_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `active` tinyint(1) NOT NULL DEFAULT '0',
  `archive` int(10) unsigned DEFAULT '0',
  `from_timestamp` int(10) unsigned DEFAULT NULL,
  `user_type` varchar(50) DEFAULT NULL,
  `positions` text,
  `done_content` text,
  `current_unit` mediumint(8) unsigned DEFAULT '0',
  `completed` tinyint(1) NOT NULL DEFAULT '0',
  `score` tinyint(3) unsigned NOT NULL DEFAULT '0',
  `issued_certificate` blob,
  `comments` text,
  `to_timestamp` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`users_LOGIN`,`lessons_ID`),
  KEY `users_LOGIN` (`users_LOGIN`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `users_to_lessons`
--

INSERT INTO `users_to_lessons` (`users_LOGIN`, `lessons_ID`, `active`, `archive`, `from_timestamp`, `user_type`, `positions`, `done_content`, `current_unit`, `completed`, `score`, `issued_certificate`, `comments`, `to_timestamp`) VALUES
('professor', 1, 1, 0, 1426217776, 'professor', NULL, '', 0, 0, 0, NULL, '', 0),
('professor', 2, 1, 0, 1426217780, 'professor', NULL, '', 0, 0, 0, NULL, '', 0),
('professor', 3, 1, 0, 1426217795, 'professor', '', '', 0, 0, 0, NULL, '', 0),
('professor', 4, 1, 0, 1426217795, 'professor', '', '', 0, 0, 0, NULL, '', 0),
('professor', 5, 1, 0, 1426217795, 'professor', '', '', 0, 0, 0, NULL, '', 0),
('student', 1, 1, 0, 1426217776, 'student', NULL, '', 0, 0, 0, NULL, '', 0),
('student', 2, 1, 0, 1426217780, 'student', NULL, 'a:13:{i:29;s:2:"29";i:26;s:2:"26";i:28;s:2:"28";i:25;s:2:"25";i:21;s:2:"21";i:22;s:2:"22";i:23;s:2:"23";i:24;s:2:"24";i:19;s:2:"19";i:20;s:2:"20";i:17;s:2:"17";i:18;s:2:"18";i:16;s:2:"16";}', 0, 0, 0, NULL, '', 0),
('student', 3, 1, 0, 1426217795, 'student', '', '', 0, 0, 0, NULL, '', 0),
('student', 4, 1, 0, 1426217795, 'student', '', '', 0, 0, 0, NULL, '', 0),
('student', 5, 1, 0, 1426217795, 'student', '', '', 0, 0, 0, NULL, '', 0);

-- --------------------------------------------------------

--
-- Table structure for table `users_to_projects`
--

CREATE TABLE IF NOT EXISTS `users_to_projects` (
  `users_LOGIN` varchar(100) NOT NULL,
  `projects_ID` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `status` tinyint(1) NOT NULL DEFAULT '0',
  `comments` text,
  `grade` float DEFAULT NULL,
  `filename` varchar(255) DEFAULT NULL,
  `upload_timestamp` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`users_LOGIN`,`projects_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `users_to_surveys`
--

CREATE TABLE IF NOT EXISTS `users_to_surveys` (
  `surveys_ID` mediumint(8) unsigned NOT NULL,
  `users_LOGIN` varchar(100) NOT NULL,
  `last_access` int(10) unsigned DEFAULT NULL,
  `last_post` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`users_LOGIN`,`surveys_ID`),
  KEY `surveys_ID` (`surveys_ID`,`users_LOGIN`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `user_profile`
--

CREATE TABLE IF NOT EXISTS `user_profile` (
  `name` varchar(20) NOT NULL,
  `description` varchar(100) NOT NULL,
  `db_type` varchar(10) NOT NULL,
  `size` tinyint(3) unsigned DEFAULT '255',
  `type` varchar(10) DEFAULT NULL,
  `options` text,
  `default_value` text,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  `visible` tinyint(1) NOT NULL DEFAULT '1',
  `mandatory` tinyint(1) NOT NULL DEFAULT '1',
  `languages_NAME` varchar(50) NOT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `user_times`
--

CREATE TABLE IF NOT EXISTS `user_times` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `session_timestamp` int(10) unsigned NOT NULL,
  `session_id` varchar(255) NOT NULL,
  `session_expired` tinyint(1) NOT NULL DEFAULT '0',
  `users_LOGIN` varchar(100) NOT NULL,
  `timestamp_now` int(10) unsigned NOT NULL,
  `time` int(10) unsigned NOT NULL,
  `lessons_ID` mediumint(8) unsigned DEFAULT NULL,
  `courses_ID` mediumint(8) unsigned DEFAULT NULL,
  `entity` varchar(100) NOT NULL,
  `entity_id` mediumint(8) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `users_LOGIN` (`users_LOGIN`),
  KEY `session_expired` (`session_expired`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=152 ;

--
-- Dumping data for table `user_times`
--

INSERT INTO `user_times` (`id`, `session_timestamp`, `session_id`, `session_expired`, `users_LOGIN`, `timestamp_now`, `time`, `lessons_ID`, `courses_ID`, `entity`, `entity_id`) VALUES
(1, 1426220401, '44cnmueeou7rfj4sfihn9tjn67', 1, 'admin', 1426220447, 46, NULL, NULL, 'system', 0),
(2, 1426220458, '6u6kdkl5rrs2uc392qpb7fabs3', 1, 'admin', 1426220483, 25, NULL, NULL, 'system', 0),
(3, 1426220490, 'qb7u5ub0ucomfv96qmnnjg0ee1', 1, 'student', 1426220806, 316, NULL, NULL, 'system', 0),
(4, 1426220879, 'aur102gqdujrm53guh7ufvl7j7', 1, 'professor', 1426220914, 35, NULL, NULL, 'system', 0),
(5, 1426220965, 'fc3hrmi95k2diqkp1jtqsgcl97', 1, 'admin', 1426221168, 203, NULL, NULL, 'system', 0),
(6, 1426221174, '9qckp26qnbko03um7kt6b2gc66', 1, 'student', 1426221176, 2, NULL, NULL, 'system', 0),
(7, 1426221184, '9qckp26qnbko03um7kt6b2gc66', 1, 'student', 1426221219, 35, 2, NULL, 'lesson', 2),
(8, 1426221320, '2oblbve8ndp5sfk4ha45092vc3', 1, 'student', 1426221454, 134, NULL, NULL, 'system', 0),
(9, 1426221459, 'rt2sra2gmh59h1j6rfddc28ta0', 1, 'professor', 1426221498, 39, NULL, NULL, 'system', 0),
(10, 1426221509, 'e78242pnlnb530m9orbhocjgs6', 1, 'student', 1426221552, 43, NULL, NULL, 'system', 0),
(11, 1426221553, 'e78242pnlnb530m9orbhocjgs6', 1, 'admin', 1426221602, 49, NULL, NULL, 'system', 0),
(12, 1426221611, 'e78242pnlnb530m9orbhocjgs6', 1, 'professor', 1426221620, 9, NULL, NULL, 'system', 0),
(13, 1426221626, 'e78242pnlnb530m9orbhocjgs6', 1, 'professor', 1426221655, 29, 2, NULL, 'lesson', 2),
(14, 1426221666, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221666, 0, NULL, NULL, 'system', 0),
(15, 1426221667, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221667, 0, 2, NULL, 'lesson', 2),
(16, 1426221669, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221669, 0, 2, NULL, 'unit', 29),
(17, 1426221672, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221674, 2, 2, NULL, 'unit', 30),
(18, 1426221678, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221678, 0, 2, NULL, 'unit', 16),
(19, 1426221680, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221683, 3, 2, NULL, 'unit', 30),
(20, 1426221685, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221685, 0, 2, NULL, 'unit', 16),
(21, 1426221687, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221687, 0, 2, NULL, 'unit', 28),
(22, 1426221688, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221688, 0, 2, NULL, 'unit', 25),
(23, 1426221689, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221689, 0, 2, NULL, 'unit', 22),
(24, 1426221690, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221690, 0, 2, NULL, 'unit', 26),
(25, 1426221691, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221691, 0, 2, NULL, 'unit', 29),
(26, 1426221692, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221692, 0, 2, NULL, 'unit', 26),
(27, 1426221693, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221697, 4, 2, NULL, 'unit', 29),
(28, 1426221698, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221701, 3, 2, NULL, 'unit', 26),
(29, 1426221701, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221702, 1, 2, NULL, 'unit', 28),
(30, 1426221703, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221707, 4, 2, NULL, 'unit', 25),
(31, 1426221707, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221708, 1, 2, NULL, 'unit', 21),
(32, 1426221709, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221712, 3, 2, NULL, 'unit', 22),
(33, 1426221712, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221713, 1, 2, NULL, 'unit', 23),
(34, 1426221714, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221717, 3, 2, NULL, 'unit', 24),
(35, 1426221718, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221719, 1, 2, NULL, 'unit', 19),
(36, 1426221720, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221723, 3, 2, NULL, 'unit', 20),
(37, 1426221724, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221727, 3, 2, NULL, 'unit', 17),
(38, 1426221727, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221730, 3, 2, NULL, 'unit', 18),
(39, 1426221732, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221734, 2, 2, NULL, 'unit', 16),
(40, 1426221735, '38ulsmq0p5enjm7njss6td0ng1', 1, 'student', 1426221753, 18, 2, NULL, 'unit', 30),
(41, 1426221772, 'dluvnsh5ju4c7nraevbj7vusc5', 1, 'admin', 1426221791, 19, NULL, NULL, 'system', 0),
(42, 1426221793, 'dluvnsh5ju4c7nraevbj7vusc5', 1, 'professor', 1426222152, 359, NULL, NULL, 'system', 0),
(43, 1426222158, 'dluvnsh5ju4c7nraevbj7vusc5', 1, 'student', 1426222306, 148, NULL, NULL, 'system', 0),
(44, 1426222343, 'dluvnsh5ju4c7nraevbj7vusc5', 1, 'student2', 1426222362, 19, NULL, NULL, 'system', 0),
(45, 1426222377, 'qpph60ie4mps815ks4m2s496m5', 1, 'admin', 1426222410, 33, NULL, NULL, 'system', 0),
(46, 1426222430, 'asp1khgdp089a0tf5j6son4ac4', 1, 'student2', 1426222711, 281, NULL, NULL, 'system', 0),
(47, 1426222767, '55absovccvnob3blv9bddt5mr6', 1, 'professor', 1426222777, 10, NULL, NULL, 'system', 0),
(48, 1426222779, '55absovccvnob3blv9bddt5mr6', 1, 'admin', 1426222782, 3, NULL, NULL, 'system', 0),
(49, 1426222784, '55absovccvnob3blv9bddt5mr6', 1, 'professor', 1426222784, 0, NULL, NULL, 'system', 0),
(50, 1426222787, '55absovccvnob3blv9bddt5mr6', 1, 'admin', 1426222787, 0, NULL, NULL, 'system', 0),
(51, 1426222788, '55absovccvnob3blv9bddt5mr6', 1, 'professor', 1426222788, 0, NULL, NULL, 'system', 0),
(52, 1426222790, '55absovccvnob3blv9bddt5mr6', 1, 'student', 1426222790, 0, NULL, NULL, 'system', 0),
(53, 1426222791, '55absovccvnob3blv9bddt5mr6', 1, 'admin', 1426223081, 290, NULL, NULL, 'system', 0),
(54, 1426223083, '55absovccvnob3blv9bddt5mr6', 1, 'student', 1426223129, 46, NULL, NULL, 'system', 0),
(55, 1426223129, '55absovccvnob3blv9bddt5mr6', 1, 'professor', 1426223353, 224, NULL, NULL, 'system', 0),
(56, 1426223420, 'h1k3msb5ueof17kral9745m776', 1, 'student', 1426223442, 22, NULL, NULL, 'system', 0),
(57, 1426223444, 'h1k3msb5ueof17kral9745m776', 1, 'student', 1426223444, 0, 2, NULL, 'lesson', 2),
(58, 1426223446, 'h1k3msb5ueof17kral9745m776', 1, 'student', 1426223448, 2, 2, NULL, 'unit', 29),
(59, 1426223450, 'h1k3msb5ueof17kral9745m776', 1, 'student', 1426223499, 49, 2, NULL, 'lesson', 2),
(60, 1426223723, 'qv3poab979ps6dqrclohhl4sk2', 1, 'professor', 1426223750, 27, NULL, NULL, 'system', 0),
(61, 1426223786, '552sva2rlouenk0n17jmj7d1d4', 1, 'admin', 1426230999, 7213, NULL, NULL, 'system', 0),
(62, 1426261388, 'g7vi2ag84pvuqci3ln360k4lv0', 1, 'admin', 1426315327, 53939, NULL, NULL, 'system', 0),
(63, 1426321915, 'rgp8v06igrud90kagmh97hvu46', 1, 'admin', 1426334970, 13055, NULL, NULL, 'system', 0),
(64, 1426386673, 'hoqtlt22v18mv77npfrft7tqq6', 1, 'admin', 1426387466, 793, NULL, NULL, 'system', 0),
(65, 1426398824, 'n18qqlpo19fknap5ggoftpfvn0', 1, 'admin', 1426418386, 19562, NULL, NULL, 'system', 0),
(66, 1426436724, 'r77qgjcblmliana5hfskg2ck81', 1, 'admin', 1426436790, 66, NULL, NULL, 'system', 0),
(67, 1426436793, 'r77qgjcblmliana5hfskg2ck81', 1, 'professor', 1426436793, 0, NULL, NULL, 'system', 0),
(68, 1426436795, 'r77qgjcblmliana5hfskg2ck81', 1, 'student', 1426436798, 3, NULL, NULL, 'system', 0),
(69, 1426442885, '2809bp10vb3r0mmhu9mqmbg736', 1, 'admin', 1426442903, 18, NULL, NULL, 'system', 0),
(70, 1426442915, '0ddp6rmp1cko2vu7p4ea3t0fn3', 1, 'professor', 1426442918, 3, NULL, NULL, 'system', 0),
(71, 1426442935, 'rsikdc3d5urlno5usm5t9h9kt4', 1, 'student', 1426442935, 0, NULL, NULL, 'system', 0),
(72, 1426442943, 'ga36j5aed0a59athvjllv4ad96', 1, 'student2', 1426442946, 3, NULL, NULL, 'system', 0),
(73, 1426447020, 'be7eqoji3dr8t5s4sf0f0oigb0', 1, 'professor', 1426447066, 46, NULL, NULL, 'system', 0),
(74, 1426447068, 'be7eqoji3dr8t5s4sf0f0oigb0', 1, 'student', 1426447085, 17, NULL, NULL, 'system', 0),
(75, 1426447095, 'v7bi9jggaaa38qg5s711s0qpc7', 1, 'admin', 1426447298, 203, NULL, NULL, 'system', 0),
(76, 1426447332, 'ms7139aa9dpkn1urfgop7oadr1', 1, 'student', 1426447402, 70, NULL, NULL, 'system', 0),
(77, 1426447408, 'gevs91eds01rvj4i19s2pd5ni5', 1, 'professor', 1426447413, 5, NULL, NULL, 'system', 0),
(78, 1426447467, 'bo3rd7pu0tmrkascqfr9eg1632', 1, 'admin', 1426447486, 19, NULL, NULL, 'system', 0),
(79, 1426475095, 'g8mr6mj6g93teqhtqv6cd7gia0', 1, 'admin', 1426476674, 1579, NULL, NULL, 'system', 0),
(80, 1426476677, '3ut9bcgfsahdvk6lg45h3to092', 1, 'admin', 1426476782, 105, NULL, NULL, 'system', 0),
(81, 1426487323, '1ks3nko8jif3e0gc2jllo8apc3', 1, 'admin', 1426487327, 4, NULL, NULL, 'system', 0),
(82, 1426496232, '7du558vtbekgl84ft2b06n9bc4', 1, 'admin', 1426496357, 125, NULL, NULL, 'system', 0),
(83, 1426496376, '9l7fjdenqrl3o4fmu4spm2i3a0', 1, 'admin', 1426496381, 5, NULL, NULL, 'system', 0),
(84, 1426528559, '5fvnc4jsdj9048p5mmqcloefs1', 1, 'student', 1426528564, 5, NULL, NULL, 'system', 0),
(85, 1426528578, '1aiamsuj4voluiirm7uoqbs3i3', 1, 'professor', 1426528584, 6, NULL, NULL, 'system', 0),
(86, 1426528587, '1aiamsuj4voluiirm7uoqbs3i3', 1, 'admin', 1426528587, 0, NULL, NULL, 'system', 0),
(87, 1426528589, '1aiamsuj4voluiirm7uoqbs3i3', 1, 'student', 1426528591, 2, NULL, NULL, 'system', 0),
(88, 1426528602, 'tf8q0p8cdttt24qkrg5slgj2j3', 1, 'admin', 1426528602, 0, NULL, NULL, 'system', 0),
(89, 1426528605, 'tf8q0p8cdttt24qkrg5slgj2j3', 1, 'professor', 1426528605, 0, NULL, NULL, 'system', 0),
(90, 1426528606, 'tf8q0p8cdttt24qkrg5slgj2j3', 1, 'student', 1426528609, 3, NULL, NULL, 'system', 0),
(91, 1426528615, 'tf8q0p8cdttt24qkrg5slgj2j3', 1, 'admin', 1426528646, 31, NULL, NULL, 'system', 0),
(92, 1426528648, 'tf8q0p8cdttt24qkrg5slgj2j3', 1, 'professor', 1426528677, 29, NULL, NULL, 'system', 0),
(93, 1426528685, '7i7inetbrfmt7kce2d03f7su06', 1, 'admin', 1426528690, 5, NULL, NULL, 'system', 0),
(94, 1461075813, '7v8ve48qe3ln1rs6061neaq6m4', 1, 'admin', 1461075813, 0, NULL, NULL, 'system', 0),
(95, 1461075971, 'b3nr1e45lvju8246m5j2o19iq4', 1, 'admin', 1461075971, 0, NULL, NULL, 'system', 0),
(96, 1461075972, 'febp2m2rm52kss8g2logo8ajg6', 1, 'admin', 1461075972, 0, NULL, NULL, 'system', 0),
(97, 1461075972, '9oa8g7pu3m88jhb4rdpnhmqqd2', 1, 'admin', 1461075972, 0, NULL, NULL, 'system', 0),
(98, 1461075972, 'la91j48phmn7g0bu3ngmf57f10', 1, 'admin', 1461075973, 1, NULL, NULL, 'system', 0),
(99, 1461075973, '3tjm7b5jteup7pknt1k19llm01', 1, 'admin', 1461075974, 1, NULL, NULL, 'system', 0),
(100, 1461075974, 'p4rtn7cc3532riv6v7muv2p0r0', 1, 'admin', 1461075974, 0, NULL, NULL, 'system', 0),
(101, 1461075974, 'pdu2n5ol9ee8acq479veq6l1r3', 1, 'admin', 1461075975, 1, NULL, NULL, 'system', 0),
(102, 1461075975, '4efrqvsgnk6majm4uqnlremqp7', 1, 'admin', 1461075975, 0, NULL, NULL, 'system', 0),
(103, 1461075975, '1anjjmphqrfqee6s9pp1g34457', 1, 'admin', 1461075976, 1, NULL, NULL, 'system', 0),
(104, 1461075976, 'esrllse95gasjab61mmlvog7q7', 1, 'admin', 1461075976, 0, NULL, NULL, 'system', 0),
(105, 1461075976, 'bnd8e71d6mb5i5sfjsvm6uv527', 1, 'admin', 1461075977, 1, NULL, NULL, 'system', 0),
(106, 1461075977, 'joupuiops718dj1uqumhhci7n4', 1, 'admin', 1461075978, 1, NULL, NULL, 'system', 0),
(107, 1461075978, '4tg9bkhbmhac1ksceu69m58nl5', 1, 'admin', 1461075978, 0, NULL, NULL, 'system', 0),
(108, 1461075979, 'jfe2673tqq5cmr9ie9fvkkro60', 1, 'admin', 1461075979, 0, NULL, NULL, 'system', 0),
(109, 1461075979, 'maiuj2d5lko2pugcl5srbqbnn1', 1, 'admin', 1461075979, 0, NULL, NULL, 'system', 0),
(110, 1461075979, 'gf52arcfkbd31kljmk7nlrjfu7', 1, 'admin', 1461075980, 1, NULL, NULL, 'system', 0),
(111, 1461075980, '7p6cstl3gel413ufoptc4abd47', 1, 'admin', 1461075980, 0, NULL, NULL, 'system', 0),
(112, 1461075980, 'sicotmi4np5tifmkcf8t2oinl2', 1, 'admin', 1461075981, 1, NULL, NULL, 'system', 0),
(113, 1461075981, '8ilabf035obl1b72raicr5d571', 1, 'admin', 1461075981, 0, NULL, NULL, 'system', 0),
(114, 1461075982, 'o7297t5ig602ca1ouvdmhoib25', 1, 'admin', 1461075983, 1, NULL, NULL, 'system', 0),
(115, 1461075983, '52mpn9bd0rgg51pskccc888hd2', 1, 'admin', 1461075984, 1, NULL, NULL, 'system', 0),
(116, 1461075984, 'lkqodrsk2oj50vf3h6c6vcs5s6', 1, 'admin', 1461075984, 0, NULL, NULL, 'system', 0),
(117, 1461075985, '8ol1n570v68rsncc9i37m2d7a5', 1, 'admin', 1461075985, 0, NULL, NULL, 'system', 0),
(118, 1461075985, '5fmpdqn18sjg27c9dmqgrpa882', 1, 'admin', 1461075985, 0, NULL, NULL, 'system', 0),
(119, 1461075986, 'amfpgb1uhu3krstbh364d79id5', 1, 'admin', 1461075986, 0, NULL, NULL, 'system', 0),
(120, 1461075986, 'n6nb8a6j42h2q6nctt51h78s27', 1, 'admin', 1461075987, 1, NULL, NULL, 'system', 0),
(121, 1461075987, 'ngrj90gcgdsrkobl0c79o2ung5', 1, 'admin', 1461075987, 0, NULL, NULL, 'system', 0),
(122, 1461075988, '946a09auhs2g0q5o61hv6aicc6', 1, 'admin', 1461075988, 0, NULL, NULL, 'system', 0),
(123, 1461075988, 'n9ceb6r7g7mr5fitg9vfdseqk6', 1, 'admin', 1461075988, 0, NULL, NULL, 'system', 0),
(124, 1461075988, 'lc8keb3aebqurikprci3iol687', 1, 'admin', 1461075989, 1, NULL, NULL, 'system', 0),
(125, 1461075989, 'v55f2mlnfvri7u91lfisknbri5', 1, 'admin', 1461075989, 0, NULL, NULL, 'system', 0),
(126, 1461075989, 'qro8eh76hd3vcp4hvod9rg82k5', 1, 'admin', 1461075990, 1, NULL, NULL, 'system', 0),
(127, 1461075990, 'oca50kmiops0idg4lbbetie960', 1, 'admin', 1461075991, 1, NULL, NULL, 'system', 0),
(128, 1461075991, '4ov25rs0u55mlbf017l1n3uqs4', 1, 'admin', 1461075992, 1, NULL, NULL, 'system', 0),
(129, 1461075992, '7flsrr9dvc7cp00cdi7sbqok54', 1, 'admin', 1461075994, 2, NULL, NULL, 'system', 0),
(130, 1461075994, 'l2r683lo56uert857oh3ujhti2', 1, 'admin', 1461075995, 1, NULL, NULL, 'system', 0),
(131, 1461075995, '8320jp2j0aa580353r4t5t1ch0', 1, 'admin', 1461075995, 0, NULL, NULL, 'system', 0),
(132, 1461075995, '32en1mr2t98f3nmohrcj7r7ou7', 1, 'admin', 1461075996, 1, NULL, NULL, 'system', 0),
(133, 1461075996, 'l5ftuk3ve5h8teqflrdf1lmde2', 1, 'admin', 1461075997, 1, NULL, NULL, 'system', 0),
(134, 1461075997, 'bgab5rgr4oe29bflo4chjqshj2', 1, 'admin', 1461075998, 1, NULL, NULL, 'system', 0),
(135, 1461075998, 'jqu2j24ejvdd5vuv2d8igodg35', 1, 'admin', 1461075998, 0, NULL, NULL, 'system', 0),
(136, 1461075998, '4p8f44u3e1rh33pbbavuss3m14', 1, 'admin', 1461075999, 1, NULL, NULL, 'system', 0),
(137, 1461075999, '1r97d6r3b21jvo24kn4kjoqi51', 1, 'admin', 1461075999, 0, NULL, NULL, 'system', 0),
(138, 1461076000, 't5c8r63g65lr6rt6f5drr4svk0', 1, 'admin', 1461076000, 0, NULL, NULL, 'system', 0),
(139, 1461076000, '2q0tppgvaijkudh5241s76g5b2', 1, 'admin', 1461076001, 1, NULL, NULL, 'system', 0),
(140, 1461076001, '7hlfdmgcgrs8c67uhb94nd6aa3', 1, 'admin', 1461076001, 0, NULL, NULL, 'system', 0),
(141, 1461076001, 'ha3jm72486kd48hji75ja4tlf6', 1, 'admin', 1461076002, 1, NULL, NULL, 'system', 0),
(142, 1461076002, '8np6ug1fg6sholhdbqnc94mln6', 1, 'admin', 1461076002, 0, NULL, NULL, 'system', 0),
(143, 1461076002, '810haimctr8h3b6ksdbl88fc07', 1, 'admin', 1461076003, 1, NULL, NULL, 'system', 0),
(144, 1461076003, 'tf1kangc38fcec1f08ef1t0ij7', 1, 'admin', 1461076003, 0, NULL, NULL, 'system', 0),
(145, 1461076004, '3bluaeq7shb6asn198al25hmk1', 1, 'admin', 1461076004, 0, NULL, NULL, 'system', 0),
(146, 1461076004, 'i6sckr0eubcq3tapv5s2k86i46', 1, 'admin', 1461076005, 1, NULL, NULL, 'system', 0),
(147, 1461076006, 'b0ub1mbjbm6pkq462e21g7lb13', 1, 'admin', 1461076006, 0, NULL, NULL, 'system', 0),
(148, 1461076006, 'hdsip5744cn5v642shtiqslvo2', 1, 'admin', 1461076006, 0, NULL, NULL, 'system', 0),
(149, 1461076006, '69pl7gj9bo3afekv8d2k2rils5', 1, 'admin', 1461076007, 1, NULL, NULL, 'system', 0),
(150, 1461076007, 'h9tlla1qf108c4j930tu7isjb0', 1, 'admin', 1461076008, 1, NULL, NULL, 'system', 0),
(151, 1461076008, '52aki7jjldbns9u379asf34o32', 0, 'admin', 1461076009, 1, NULL, NULL, 'system', 0);

-- --------------------------------------------------------

--
-- Table structure for table `user_types`
--

CREATE TABLE IF NOT EXISTS `user_types` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `basic_user_type` varchar(50) NOT NULL,
  `core_access` text,
  `modules_access` text,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `words`
--

CREATE TABLE IF NOT EXISTS `words` (
  `groupid` varchar(10) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL DEFAULT '''lt''',
  `word` varchar(20) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL DEFAULT '',
  `question` text CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL,
  PRIMARY KEY (`word`,`groupid`),
  KEY `groupid` (`groupid`),
  FULLTEXT KEY `word_3` (`word`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
